Binding
=======

Binding ties one object to another - for example, a pod is bound to a node by a scheduler.

kind: Binding                                                         # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
target:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectReference (an object to bind to)
  kind:                                                               # string (kind of the referent)
  namespace:                                                          # string (namespace of the referent)
  name:                                                               # string (name of the referent)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


ComponentStatus
===============

ComponentStatus (and ComponentStatusList) holds the cluster validation info.

kind: ComponentStatus                                                 # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
conditions:                                                           # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ComponentCondition (list of component conditions observed)
- type: Healthy                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ComponentConditionType (type of component condition, currently only Healthy)
  status: False|True|Unknown                                          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ConditionStatus (current status of this component condition, one of True, False, Unknown)
  message:                                                            # string (health check message received from the component)
  error:                                                              # string (error code from health check attempt (if any))


ComponentStatusList
===================


kind: ComponentStatusList                                             # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ComponentStatus (list of component status objects)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  conditions:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ComponentCondition (list of component conditions observed)
  - type: Healthy                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ComponentConditionType (type of component condition, currently only Healthy)
    status: False|True|Unknown                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ConditionStatus (current status of this component condition, one of True, False, Unknown)
    message:                                                          # string (health check message received from the component)
    error:                                                            # string (error code from health check attempt (if any))


DeleteOptions
=============

DeleteOptions may be provided when deleting an API object

kind: DeleteOptions                                                   # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
gracePeriodSeconds:                                                   # *int64 (the duration in seconds to wait before deleting this object; defaults to a per object value if not specified; zero means delete immediately)


Endpoints
=========

Endpoints is a collection of endpoints that implement the actual service.  Example:
  Name: "mysvc",
  Subsets: [
    {
      Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
      Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
    },
    {
      Addresses: [{"ip": "10.10.3.3"}],
      Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
    },
 ]

kind: Endpoints                                                       # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
subsets:                                                              # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EndpointSubset (sets of addresses and ports that comprise a service)
- addresses:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EndpointAddress (IP addresses which offer the related ports)
- - ip:                                                               # string (IP address of the endpoint)
    targetRef:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectReference (reference to object providing the endpoint)
      kind:                                                           # string (kind of the referent)
      namespace:                                                      # string (namespace of the referent)
      name:                                                           # string (name of the referent)
      uid:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
      apiVersion:                                                     # string (API version of the referent)
      resourceVersion:                                                # string (specific resourceVersion to which this reference is made, if any: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
      fieldPath:                                                      # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  ports:                                                              # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EndpointPort (port numbers available on the related IP addresses)
  - name:                                                             # string (name of this port)
    port:                                                             # int (port number of the endpoint)
    protocol: TCP|UDP                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Protocol (protocol for this port; must be UDP or TCP; TCP if unspecified)


EndpointsList
=============

EndpointsList is a list of endpoints.

kind: EndpointsList                                                   # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Endpoints (list of endpoints)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  subsets:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EndpointSubset (sets of addresses and ports that comprise a service)
  - addresses:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EndpointAddress (IP addresses which offer the related ports)
  - - ip:                                                             # string (IP address of the endpoint)
      targetRef:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectReference (reference to object providing the endpoint)
        kind:                                                         # string (kind of the referent)
        namespace:                                                    # string (namespace of the referent)
        name:                                                         # string (name of the referent)
        uid:                                                          # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
    ports:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EndpointPort (port numbers available on the related IP addresses)
    - name:                                                           # string (name of this port)
      port:                                                           # int (port number of the endpoint)
      protocol: TCP|UDP                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Protocol (protocol for this port; must be UDP or TCP; TCP if unspecified)


Event
=====

Event is a report of an event somewhere in the cluster.
TODO: Decide whether to store these separately or with the object they apply to.

kind: Event                                                           # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
involvedObject:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectReference (object this event is about)
  kind:                                                               # string (kind of the referent)
  namespace:                                                          # string (namespace of the referent)
  name:                                                               # string (name of the referent)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
reason:                                                               # string (short, machine understandable string that gives the reason for the transition into the object's current status)
message:                                                              # string (human-readable description of the status of this operation)
source:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EventSource (component reporting this event)
  component:                                                          # string (component that generated the event)
  host:                                                               # string (name of the host where the event is generated)
firstTimestamp:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (the time at which the event was first recorded)
lastTimestamp:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (the time at which the most recent occurance of this event was recorded)
count:                                                                # int (the number of times this event has occurred)


EventList
=========

EventList is a list of events.

kind: EventList                                                       # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Event (list of events)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  involvedObject:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectReference (object this event is about)
    kind:                                                             # string (kind of the referent)
    namespace:                                                        # string (namespace of the referent)
    name:                                                             # string (name of the referent)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  reason:                                                             # string (short, machine understandable string that gives the reason for the transition into the object's current status)
  message:                                                            # string (human-readable description of the status of this operation)
  source:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EventSource (component reporting this event)
    component:                                                        # string (component that generated the event)
    host:                                                             # string (name of the host where the event is generated)
  firstTimestamp:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (the time at which the event was first recorded)
  lastTimestamp:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (the time at which the most recent occurance of this event was recorded)
  count:                                                              # int (the number of times this event has occurred)


LimitRange
==========

LimitRange sets resource usage limits for each kind of resource in a Namespace

kind: LimitRange                                                      # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LimitRangeSpec (spec defines the limits enforced; http://docs.k8s.io/api-conventions.md#spec-and-status)
  limits:                                                             # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LimitRangeItem (limits is the list of LimitRangeItem objects that are enforced)
  - type: Container|Pod                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LimitType (type of resource that this limit applies to)
    max:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (max usage constraints on this kind by resource name)
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
    min:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (min usage constraints on this kind by resource name)
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
    default:                                                          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (default values on this kind by resource name if omitted)
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity


LimitRangeList
==============

LimitRangeList is a list of LimitRange items.

kind: LimitRangeList                                                  # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LimitRange (items is a list of LimitRange objects)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LimitRangeSpec (spec defines the limits enforced; http://docs.k8s.io/api-conventions.md#spec-and-status)
    limits:                                                           # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LimitRangeItem (limits is the list of LimitRangeItem objects that are enforced)
    - type: Container|Pod                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LimitType (type of resource that this limit applies to)
      max:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (max usage constraints on this kind by resource name)
        [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
      min:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (min usage constraints on this kind by resource name)
        [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
      default:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (default values on this kind by resource name if omitted)
        [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity


List
====

List holds a list of objects, which may not be known by the server.

kind: List                                                            # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/runtime.RawExtension (list of objects)
- - [byte]                                                            # 


ListOptions
===========

ListOptions is the query options to a standard REST list call

kind: ListOptions                                                     # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
labelSelector:                                                        # string (a selector to restrict the list of returned objects by their labels; defaults to everything)
fieldSelector:                                                        # string (a selector to restrict the list of returned objects by their fields; defaults to everything)
watch:                                                                # bool (watch for changes to the described resources and return them as a stream of add, update, and remove notifications; specify resourceVersion)
resourceVersion:                                                      # string (when specified with a watch call, shows changes that occur after that particular version of a resource; defaults to changes from the beginning of history)


Namespace
=========

A namespace provides a scope for Names.
Use of multiple namespaces is optional

kind: Namespace                                                       # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NamespaceSpec (spec defines the behavior of the Namespace; http://docs.k8s.io/api-conventions.md#spec-and-status)
  finalizers:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.FinalizerName (an opaque list of values that must be empty to permanently remove object from storage)
  - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.FinalizerName] # 
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NamespaceStatus (status describes the current status of a Namespace; http://docs.k8s.io/api-conventions.md#spec-and-status)
  phase: Active|Terminating                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NamespacePhase (phase is the current lifecycle phase of the namespace)


NamespaceList
=============

NamespaceList is a list of Namespaces.

kind: NamespaceList                                                   # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Namespace (items is the list of Namespace objects in the list)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NamespaceSpec (spec defines the behavior of the Namespace; http://docs.k8s.io/api-conventions.md#spec-and-status)
    finalizers:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.FinalizerName (an opaque list of values that must be empty to permanently remove object from storage)
    - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.FinalizerName] # 
  status:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NamespaceStatus (status describes the current status of a Namespace; http://docs.k8s.io/api-conventions.md#spec-and-status)
    phase: Active|Terminating                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NamespacePhase (phase is the current lifecycle phase of the namespace)


Node
====

Node is a worker node in Kubernetes.
The name of the node according to etcd is in ID.

kind: Node                                                            # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeSpec (specification of a node; http://docs.k8s.io/api-conventions.md#spec-and-status)
  podCIDR:                                                            # string (pod IP range assigned to the node)
  externalID:                                                         # string (external ID assigned to the node by some machine database (e.g. a cloud provider). Defaults to node name when empty.)
  unschedulable:                                                      # bool (disable pod scheduling on the node)
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeStatus (most recently observed status of the node; populated by the system, read-only; http://docs.k8s.io/api-conventions.md#spec-and-status)
  capacity:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (compute resource capacity of the node; http://docs.k8s.io/resources.md)
    [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
  phase: Pending|Running|Terminated                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodePhase (most recently observed lifecycle phase of the node)
  conditions:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeCondition (list of node conditions observed)
  - type: Ready                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeConditionType (type of node condition, currently only Ready)
    status: False|True|Unknown                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ConditionStatus (status of the condition, one of True, False, Unknown)
    lastHeartbeatTime:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (last time we got an update on a given condition)
    lastTransitionTime:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (last time the condition transit from one status to another)
    reason:                                                           # string ((brief) reason for the condition's last transition)
    message:                                                          # string (human readable message indicating details about last transition)
  addresses:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeAddress (list of addresses reachable to the node)
  - type: ExternalIP|Hostname|InternalIP                              # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeAddressType (node address type, one of Hostname, ExternalIP or InternalIP)
    address:                                                          # string (the node address)
  nodeInfo:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeSystemInfo (set of ids/uuids to uniquely identify the node)
    machineID:                                                        # string (machine-id reported by the node)
    systemUUID:                                                       # string (system-uuid reported by the node)
    bootID:                                                           # string (boot id is the boot-id reported by the node)
    kernelVersion:                                                    # string (Kernel version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64))
    osImage:                                                          # string (OS image used reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)))
    containerRuntimeVersion:                                          # string (Container runtime version reported by the node through runtime remote API (e.g. docker://1.5.0))
    kubeletVersion:                                                   # string (Kubelet version reported by the node)
    kubeProxyVersion:                                                 # string (Kube-proxy version reported by the node)


NodeList
========

NodeList is a list of minions.

kind: NodeList                                                        # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Node (list of nodes)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeSpec (specification of a node; http://docs.k8s.io/api-conventions.md#spec-and-status)
    podCIDR:                                                          # string (pod IP range assigned to the node)
    externalID:                                                       # string (external ID assigned to the node by some machine database (e.g. a cloud provider). Defaults to node name when empty.)
    unschedulable:                                                    # bool (disable pod scheduling on the node)
  status:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeStatus (most recently observed status of the node; populated by the system, read-only; http://docs.k8s.io/api-conventions.md#spec-and-status)
    capacity:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (compute resource capacity of the node; http://docs.k8s.io/resources.md)
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
    phase: Pending|Running|Terminated                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodePhase (most recently observed lifecycle phase of the node)
    conditions:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeCondition (list of node conditions observed)
    - type: Ready                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeConditionType (type of node condition, currently only Ready)
      status: False|True|Unknown                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ConditionStatus (status of the condition, one of True, False, Unknown)
      lastHeartbeatTime:                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (last time we got an update on a given condition)
      lastTransitionTime:                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (last time the condition transit from one status to another)
      reason:                                                         # string ((brief) reason for the condition's last transition)
      message:                                                        # string (human readable message indicating details about last transition)
    addresses:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeAddress (list of addresses reachable to the node)
    - type: ExternalIP|Hostname|InternalIP                            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeAddressType (node address type, one of Hostname, ExternalIP or InternalIP)
      address:                                                        # string (the node address)
    nodeInfo:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NodeSystemInfo (set of ids/uuids to uniquely identify the node)
      machineID:                                                      # string (machine-id reported by the node)
      systemUUID:                                                     # string (system-uuid reported by the node)
      bootID:                                                         # string (boot id is the boot-id reported by the node)
      kernelVersion:                                                  # string (Kernel version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64))
      osImage:                                                        # string (OS image used reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)))
      containerRuntimeVersion:                                        # string (Container runtime version reported by the node through runtime remote API (e.g. docker://1.5.0))
      kubeletVersion:                                                 # string (Kubelet version reported by the node)
      kubeProxyVersion:                                               # string (Kube-proxy version reported by the node)


PersistentVolume
================


kind: PersistentVolume                                                # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeSpec (specification of a persistent volume as provisioned by an administrator)
  capacity:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (a description of the persistent volume's resources and capacity)
    [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
  gcePersistentDisk:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GCEPersistentDiskVolumeSource (GCE disk resource provisioned by an admin)
    pdName:                                                           # string (unique name of the PD resource in GCE)
    fsType:                                                           # string (file system type to mount, such as ext4, xfs, ntfs)
    partition:                                                        # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
    readOnly:                                                         # bool (read-only if true, read-write otherwise (false or unspecified))
  awsElasticBlockStore:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.AWSElasticBlockStoreVolumeSource (AWS disk resource provisioned by an admin)
    volumeID:                                                         # string (unique id of the PD resource in AWS)
    fsType:                                                           # string (file system type to mount, such as ext4, xfs, ntfs)
    partition:                                                        # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
    readOnly:                                                         # bool (read-only if true, read-write otherwise (false or unspecified))
  hostPath:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HostPathVolumeSource (a HostPath provisioned by a developer or tester; for develment use only)
    path:                                                             # string (path of the directory on the host)
  glusterfs:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GlusterfsVolumeSource (Glusterfs volume resource provisioned by an admin)
    endpoints:                                                        # string (gluster hosts endpoints name)
    path:                                                             # string (path to gluster volume)
    readOnly:                                                         # bool (glusterfs volume to be mounted with read-only permissions)
  nfs:                                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NFSVolumeSource (NFS volume resource provisioned by an admin)
    server:                                                           # string (the hostname or IP address of the NFS server)
    path:                                                             # string (the path that is exported by the NFS server)
    readOnly:                                                         # bool (forces the NFS export to be mounted with read-only permissions)
  rbd:                                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RBDVolumeSource (rados block volume that will be mounted on the host machine)
    monitors:                                                         # []string (a collection of Ceph monitors)
    - [string]                                                        # 
    image:                                                            # string (rados image name)
    fsType:                                                           # string (file system type to mount, such as ext4, xfs, ntfs)
    pool:                                                             # string (rados pool name; default is rbd; optional)
    user:                                                             # string (rados user name; default is admin; optional)
    keyring:                                                          # string (keyring is the path to key ring for rados user; default is /etc/ceph/keyring; optional)
    secretRef:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the RBD user; if provided overrides keyring; optional)
      name:                                                           # string (name of the referent)
    readOnly:                                                         # bool (rbd volume to be mounted with read-only permissions)
  iscsi:                                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ISCSIVolumeSource (an iSCSI disk resource provisioned by an admin)
    targetPortal:                                                     # string (iSCSI target portal)
    iqn:                                                              # string (iSCSI Qualified Name)
    lun:                                                              # int (iscsi target lun number)
    fsType:                                                           # string (file system type to mount, such as ext4, xfs, ntfs)
    readOnly:                                                         # bool (read-only if true, read-write otherwise (false or unspecified))
  cephfs:                                                             # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.CephFSVolumeSource (Ceph filesystem that will be mounted on the host machine)
    monitors:                                                         # []string (a collection of Ceph monitors)
    - [string]                                                        # 
    user:                                                             # string (rados user name; default is admin; optional)
    secretFile:                                                       # string (path to secret for rados user; default is /etc/ceph/user.secret; optional)
    secretRef:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the user; if provided overrides keyring; optional)
      name:                                                           # string (name of the referent)
    readOnly:                                                         # bool (Ceph fs to be mounted with read-only permissions)
  accessModes:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeAccessMode (all ways the volume can be mounted)
  - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeAccessMode] # 
  claimRef:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectReference (when bound, a reference to the bound claim)
    kind:                                                             # string (kind of the referent)
    namespace:                                                        # string (namespace of the referent)
    name:                                                             # string (name of the referent)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  persistentVolumeReclaimPolicy: Recycle|Retain                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeReclaimPolicy (what happens to a volume when released from its claim; Valid options are Retain (default) and Recycle.  Recyling must be supported by the volume plugin underlying this persistent volume.)
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeStatus (current status of a persistent volume; populated by the system, read-only)
  phase: Available|Bound|Failed|Pending|Released                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumePhase (the current phase of a persistent volume)
  message:                                                            # string (human-readable message indicating details about why the volume is in this state)
  reason:                                                             # string ((brief) reason the volume is not is not available)


PersistentVolumeClaim
=====================

PersistentVolumeClaim is a user's request for and claim to a persistent volume

kind: PersistentVolumeClaim                                           # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaimSpec (the desired characteristics of a volume)
  accessModes:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeAccessMode (the desired access modes the volume should have)
  - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeAccessMode] # 
  resources:                                                          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceRequirements (the desired resources the volume should have)
    limits:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed)
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
    requests:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; requests are honored only for persistent volumes as of now)
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
  volumeName:                                                         # string (the binding reference to the persistent volume backing this claim)
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaimStatus (the current status of a persistent volume claim; read-only)
  phase: Bound|Pending                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaimPhase (the current phase of the claim)
  accessModes:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeAccessMode (the actual access modes the volume has)
  - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeAccessMode] # 
  capacity:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (the actual resources the volume has)
    [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity


PersistentVolumeClaimList
=========================


kind: PersistentVolumeClaimList                                       # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#types-kinds)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaim (a list of persistent volume claims)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaimSpec (the desired characteristics of a volume)
    accessModes:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeAccessMode (the desired access modes the volume should have)
    - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeAccessMode] # 
    resources:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceRequirements (the desired resources the volume should have)
      limits:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed)
        [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
      requests:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; requests are honored only for persistent volumes as of now)
        [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
    volumeName:                                                       # string (the binding reference to the persistent volume backing this claim)
  status:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaimStatus (the current status of a persistent volume claim; read-only)
    phase: Bound|Pending                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaimPhase (the current phase of the claim)
    accessModes:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeAccessMode (the actual access modes the volume has)
    - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeAccessMode] # 
    capacity:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (the actual resources the volume has)
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity


PersistentVolumeList
====================


kind: PersistentVolumeList                                            # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#types-kinds)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolume (list of persistent volumes)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeSpec (specification of a persistent volume as provisioned by an administrator)
    capacity:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (a description of the persistent volume's resources and capacity)
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
    gcePersistentDisk:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GCEPersistentDiskVolumeSource (GCE disk resource provisioned by an admin)
      pdName:                                                         # string (unique name of the PD resource in GCE)
      fsType:                                                         # string (file system type to mount, such as ext4, xfs, ntfs)
      partition:                                                      # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
      readOnly:                                                       # bool (read-only if true, read-write otherwise (false or unspecified))
    awsElasticBlockStore:                                             # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.AWSElasticBlockStoreVolumeSource (AWS disk resource provisioned by an admin)
      volumeID:                                                       # string (unique id of the PD resource in AWS)
      fsType:                                                         # string (file system type to mount, such as ext4, xfs, ntfs)
      partition:                                                      # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
      readOnly:                                                       # bool (read-only if true, read-write otherwise (false or unspecified))
    hostPath:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HostPathVolumeSource (a HostPath provisioned by a developer or tester; for develment use only)
      path:                                                           # string (path of the directory on the host)
    glusterfs:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GlusterfsVolumeSource (Glusterfs volume resource provisioned by an admin)
      endpoints:                                                      # string (gluster hosts endpoints name)
      path:                                                           # string (path to gluster volume)
      readOnly:                                                       # bool (glusterfs volume to be mounted with read-only permissions)
    nfs:                                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NFSVolumeSource (NFS volume resource provisioned by an admin)
      server:                                                         # string (the hostname or IP address of the NFS server)
      path:                                                           # string (the path that is exported by the NFS server)
      readOnly:                                                       # bool (forces the NFS export to be mounted with read-only permissions)
    rbd:                                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RBDVolumeSource (rados block volume that will be mounted on the host machine)
      monitors:                                                       # []string (a collection of Ceph monitors)
      - [string]                                                      # 
      image:                                                          # string (rados image name)
      fsType:                                                         # string (file system type to mount, such as ext4, xfs, ntfs)
      pool:                                                           # string (rados pool name; default is rbd; optional)
      user:                                                           # string (rados user name; default is admin; optional)
      keyring:                                                        # string (keyring is the path to key ring for rados user; default is /etc/ceph/keyring; optional)
      secretRef:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the RBD user; if provided overrides keyring; optional)
        name:                                                         # string (name of the referent)
      readOnly:                                                       # bool (rbd volume to be mounted with read-only permissions)
    iscsi:                                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ISCSIVolumeSource (an iSCSI disk resource provisioned by an admin)
      targetPortal:                                                   # string (iSCSI target portal)
      iqn:                                                            # string (iSCSI Qualified Name)
      lun:                                                            # int (iscsi target lun number)
      fsType:                                                         # string (file system type to mount, such as ext4, xfs, ntfs)
      readOnly:                                                       # bool (read-only if true, read-write otherwise (false or unspecified))
    cephfs:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.CephFSVolumeSource (Ceph filesystem that will be mounted on the host machine)
      monitors:                                                       # []string (a collection of Ceph monitors)
      - [string]                                                      # 
      user:                                                           # string (rados user name; default is admin; optional)
      secretFile:                                                     # string (path to secret for rados user; default is /etc/ceph/user.secret; optional)
      secretRef:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the user; if provided overrides keyring; optional)
        name:                                                         # string (name of the referent)
      readOnly:                                                       # bool (Ceph fs to be mounted with read-only permissions)
    accessModes:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeAccessMode (all ways the volume can be mounted)
    - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeAccessMode] # 
    claimRef:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectReference (when bound, a reference to the bound claim)
      kind:                                                           # string (kind of the referent)
      namespace:                                                      # string (namespace of the referent)
      name:                                                           # string (name of the referent)
      uid:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
      apiVersion:                                                     # string (API version of the referent)
      resourceVersion:                                                # string (specific resourceVersion to which this reference is made, if any: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
      fieldPath:                                                      # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
    persistentVolumeReclaimPolicy: Recycle|Retain                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeReclaimPolicy (what happens to a volume when released from its claim; Valid options are Retain (default) and Recycle.  Recyling must be supported by the volume plugin underlying this persistent volume.)
  status:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeStatus (current status of a persistent volume; populated by the system, read-only)
    phase: Available|Bound|Failed|Pending|Released                    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumePhase (the current phase of a persistent volume)
    message:                                                          # string (human-readable message indicating details about why the volume is in this state)
    reason:                                                           # string ((brief) reason the volume is not is not available)


Pod
===

Pod is a collection of containers that can run on a host. This resource is created
by clients and scheduled onto hosts.

kind: Pod                                                             # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodSpec (specification of the desired behavior of the pod; http://docs.k8s.io/api-conventions.md#spec-and-status)
  volumes:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Volume (list of volumes that can be mounted by containers belonging to the pod)
  - name:                                                             # string (volume name; must be a DNS_LABEL and unique within the pod)
    hostPath:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HostPathVolumeSource (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
      path:                                                           # string (path of the directory on the host)
    emptyDir:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EmptyDirVolumeSource (temporary directory that shares a pod's lifetime)
      medium: |Memory                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.StorageMedium (type of storage used to back the volume; must be an empty string (default) or Memory)
    gcePersistentDisk:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GCEPersistentDiskVolumeSource (GCE disk resource attached to the host machine on demand)
      pdName:                                                         # string (unique name of the PD resource in GCE)
      fsType:                                                         # string (file system type to mount, such as ext4, xfs, ntfs)
      partition:                                                      # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
      readOnly:                                                       # bool (read-only if true, read-write otherwise (false or unspecified))
    awsElasticBlockStore:                                             # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.AWSElasticBlockStoreVolumeSource (AWS disk resource attached to the host machine on demand)
      volumeID:                                                       # string (unique id of the PD resource in AWS)
      fsType:                                                         # string (file system type to mount, such as ext4, xfs, ntfs)
      partition:                                                      # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
      readOnly:                                                       # bool (read-only if true, read-write otherwise (false or unspecified))
    gitRepo:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GitRepoVolumeSource (git repository at a particular revision)
      repository:                                                     # string (repository URL)
      revision:                                                       # string (commit hash for the specified revision)
    secret:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecretVolumeSource (secret to populate volume)
      secretName:                                                     # string (secretName is the name of a secret in the pod's namespace)
    nfs:                                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NFSVolumeSource (NFS volume that will be mounted in the host machine)
      server:                                                         # string (the hostname or IP address of the NFS server)
      path:                                                           # string (the path that is exported by the NFS server)
      readOnly:                                                       # bool (forces the NFS export to be mounted with read-only permissions)
    iscsi:                                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ISCSIVolumeSource (iSCSI disk attached to host machine on demand)
      targetPortal:                                                   # string (iSCSI target portal)
      iqn:                                                            # string (iSCSI Qualified Name)
      lun:                                                            # int (iscsi target lun number)
      fsType:                                                         # string (file system type to mount, such as ext4, xfs, ntfs)
      readOnly:                                                       # bool (read-only if true, read-write otherwise (false or unspecified))
    glusterfs:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GlusterfsVolumeSource (Glusterfs volume that will be mounted on the host machine )
      endpoints:                                                      # string (gluster hosts endpoints name)
      path:                                                           # string (path to gluster volume)
      readOnly:                                                       # bool (glusterfs volume to be mounted with read-only permissions)
    persistentVolumeClaim:                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaimVolumeSource (a reference to a PersistentVolumeClaim in the same namespace)
      claimName:                                                      # string (the name of the claim in the same namespace to be mounted as a volume)
      readOnly:                                                       # bool (mount volume as read-only when true; default false)
    rbd:                                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RBDVolumeSource (rados block volume that will be mounted on the host machine)
      monitors:                                                       # []string (a collection of Ceph monitors)
      - [string]                                                      # 
      image:                                                          # string (rados image name)
      fsType:                                                         # string (file system type to mount, such as ext4, xfs, ntfs)
      pool:                                                           # string (rados pool name; default is rbd; optional)
      user:                                                           # string (rados user name; default is admin; optional)
      keyring:                                                        # string (keyring is the path to key ring for rados user; default is /etc/ceph/keyring; optional)
      secretRef:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the RBD user; if provided overrides keyring; optional)
        name:                                                         # string (name of the referent)
      readOnly:                                                       # bool (rbd volume to be mounted with read-only permissions)
    cephfs:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.CephFSVolumeSource (Ceph filesystem that will be mounted on the host machine)
      monitors:                                                       # []string (a collection of Ceph monitors)
      - [string]                                                      # 
      user:                                                           # string (rados user name; default is admin; optional)
      secretFile:                                                     # string (path to secret for rados user; default is /etc/ceph/user.secret; optional)
      secretRef:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the user; if provided overrides keyring; optional)
        name:                                                         # string (name of the referent)
      readOnly:                                                       # bool (Ceph fs to be mounted with read-only permissions)
    metadata:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.MetadataVolumeSource (Metadata volume containing information about the pod)
      items:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.MetadataFile (list of metadata files)
      - name:                                                         # string (the name of the file to be created)
        fieldRef:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod. Supported fields: metadata.annotations, metadata.labels, metadata.name, metadata.namespace)
          apiVersion:                                                 # string (version of the schema that fieldPath is written in terms of; defaults to v1)
          fieldPath:                                                  # string (path of the field to select in the specified API version)
  containers:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Container (list of containers belonging to the pod; cannot be updated; containers cannot currently be added or removed; there must be at least one container in a Pod)
  - name:                                                             # string (name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated)
    image:                                                            # string (Docker image name)
    command:                                                          # []string (entrypoint array; not executed within a shell; the docker image's entrypoint is used if this is not provided; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
    - [string]                                                        # 
    args:                                                             # []string (command array; the docker image's cmd is used if this is not provided; arguments to the entrypoint; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
    - [string]                                                        # 
    workingDir:                                                       # string (container's working directory; defaults to image's default; cannot be updated)
    ports:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerPort (list of ports to expose from the container; cannot be updated)
    - name:                                                           # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
      hostPort:                                                       # int (number of port to expose on the host; most containers do not need this)
      containerPort:                                                  # int (number of port to expose on the pod's IP address)
      protocol: TCP|UDP                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
      hostIP:                                                         # string (host IP to bind the port to)
    env:                                                              # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EnvVar (list of environment variables to set in the container; cannot be updated)
    - name:                                                           # string (name of the environment variable; must be a C_IDENTIFIER)
      value:                                                          # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
      valueFrom:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
        fieldRef:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
          apiVersion:                                                 # string (version of the schema that fieldPath is written in terms of; defaults to v1)
          fieldPath:                                                  # string (path of the field to select in the specified API version)
    resources:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceRequirements (Compute Resources required by this container; cannot be updated)
      limits:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed)
        [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
      requests:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; requests are honored only for persistent volumes as of now)
        [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
    volumeMounts:                                                     # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.VolumeMount (pod volumes to mount into the container's filesyste; cannot be updated)
    - name:                                                           # string (name of the volume to mount)
      readOnly:                                                       # bool (mounted read-only if true, read-write otherwise (false or unspecified))
      mountPath:                                                      # string (path within the container at which the volume should be mounted)
    livenessProbe:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Probe (periodic probe of container liveness; container will be restarted if the probe fails; cannot be updated)
      exec:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
        command:                                                      # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
        - [string]                                                    # 
      httpGet:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
        path:                                                         # string (path to access on the HTTP server)
        port:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
        host:                                                         # string (hostname to connect to; defaults to pod IP)
      tcpSocket:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
        port:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      initialDelaySeconds:                                            # int64 (number of seconds after the container has started before liveness probes are initiated)
      timeoutSeconds:                                                 # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
    readinessProbe:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Probe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails; cannot be updated)
      exec:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
        command:                                                      # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
        - [string]                                                    # 
      httpGet:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
        path:                                                         # string (path to access on the HTTP server)
        port:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
        host:                                                         # string (hostname to connect to; defaults to pod IP)
      tcpSocket:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
        port:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      initialDelaySeconds:                                            # int64 (number of seconds after the container has started before liveness probes are initiated)
      timeoutSeconds:                                                 # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
    lifecycle:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Lifecycle (actions that the management system should take in response to container lifecycle events; cannot be updated)
      postStart:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      preStop:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
    terminationMessagePath:                                           # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log; cannot be updated)
    imagePullPolicy: Always|IfNotPresent|Never                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PullPolicy (image pull policy; one of Always, Never, IfNotPresent; defaults to Always if :latest tag is specified, or IfNotPresent otherwise; cannot be updated)
    securityContext:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecurityContext (security options the pod should run with)
      capabilities:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capabilities (the linux capabilites that should be added or removed)
        add:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (added capabilities)
        - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
        drop:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (droped capabilities)
        - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
      privileged:                                                     # *bool (run the container in privileged mode)
      seLinuxOptions:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SELinuxOptions (options that control the SELinux labels applied)
        user:                                                         # string (the user label to apply to the container)
        role:                                                         # string (the role label to apply to the container)
        type:                                                         # string (the type label to apply to the container)
        level:                                                        # string (the level label to apply to the container)
      runAsUser:                                                      # *int64 (the user id that runs the first process in the container)
  restartPolicy: Always|Never|OnFailure                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
  terminationGracePeriodSeconds:                                      # *int64 (optional duration in seconds the pod needs to terminate gracefully; may be decreased in delete request; value must be non-negative integer; the value zero indicates delete immediately; if this value is not set, the default grace period will be used instead; the grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal; set this value longer than the expected cleanup time for your process)
  activeDeadlineSeconds:                                              # *int64
  dnsPolicy: ClusterFirst|Default                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
  nodeSelector:                                                       # map[string]string (selector which must match a node's labels for the pod to be scheduled on that node)
    [string]:                                                         # string
  serviceAccount:                                                     # string (name of the ServiceAccount to use to run this pod)
  host:                                                               # string (host requested for this pod)
  hostNetwork:                                                        # bool (host networking requested for this pod)
  imagePullSecrets:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (list of references to secrets in the same namespace available for pulling the container images)
  - name:                                                             # string (name of the referent)
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodStatus (most recently observed status of the pod; populated by the system, read-only; http://docs.k8s.io/api-conventions.md#spec-and-status)
  phase: Failed|Pending|Running|Succeeded|Unknown                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodPhase (current condition of the pod.)
  conditions:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodCondition (current service state of pod)
  - type: Ready                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodConditionType (kind of the condition, currently only Ready)
    status: False|True|Unknown                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ConditionStatus (status of the condition, one of True, False, Unknown)
  message:                                                            # string (human readable message indicating details about why the pod is in this condition)
  hostIP:                                                             # string (IP address of the host to which the pod is assigned; empty if not yet scheduled)
  podIP:                                                              # string (IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated)
  startTime:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was acknowledged by the Kubelet.  This is before the Kubelet pulled the container image(s) for the pod.)
  containerStatuses:                                                  # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStatus (list of container statuses)
  - name:                                                             # string (name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated)
    state:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerState (details about the container's current condition)
      waiting:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateWaiting (details about a waiting container)
        reason:                                                       # string ((brief) reason the container is not yet running, such as pulling its image)
      running:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateRunning (details about a running container)
        startedAt:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the container was last (re-)started)
      termination:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateTerminated (details about a terminated container)
        exitCode:                                                     # int (exit status from the last termination of the container)
        signal:                                                       # int (signal from the last termination of the container)
        reason:                                                       # string ((brief) reason from the last termination of the container)
        message:                                                      # string (message regarding the last termination of the container)
        startedAt:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which previous execution of the container started)
        finishedAt:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the container last terminated)
        containerID:                                                  # string (container's ID in the format 'docker://<container_id>')
    lastState:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerState (details about the container's last termination condition)
      waiting:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateWaiting (details about a waiting container)
        reason:                                                       # string ((brief) reason the container is not yet running, such as pulling its image)
      running:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateRunning (details about a running container)
        startedAt:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the container was last (re-)started)
      termination:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateTerminated (details about a terminated container)
        exitCode:                                                     # int (exit status from the last termination of the container)
        signal:                                                       # int (signal from the last termination of the container)
        reason:                                                       # string ((brief) reason from the last termination of the container)
        message:                                                      # string (message regarding the last termination of the container)
        startedAt:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which previous execution of the container started)
        finishedAt:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the container last terminated)
        containerID:                                                  # string (container's ID in the format 'docker://<container_id>')
    ready:                                                            # bool (specifies whether the container has passed its readiness probe)
    restartCount:                                                     # int (the number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed)
    image:                                                            # string (image of the container)
    imageID:                                                          # string (ID of the container's image)
    containerID:                                                      # string (container's ID in the format 'docker://<container_id>')


PodExecOptions
==============

PodExecOptions is the query options to a Pod's remote exec call

kind: PodExecOptions                                                  # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
stdin:                                                                # bool (redirect the standard input stream of the pod for this call; defaults to false)
stdout:                                                               # bool (redirect the standard output stream of the pod for this call; defaults to true)
stderr:                                                               # bool (redirect the standard error stream of the pod for this call; defaults to true)
tty:                                                                  # bool (allocate a terminal for this exec call; defaults to false)
container:                                                            # string (the container in which to execute the command. Defaults to only container if there is only one container in the pod.)
command:                                                              # []string (the command to execute; argv array; not executed within a shell)
- [string]                                                            # 


PodList
=======

PodList is a list of Pods.

kind: PodList                                                         # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#types-kinds)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Pod (list of pods)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodSpec (specification of the desired behavior of the pod; http://docs.k8s.io/api-conventions.md#spec-and-status)
    volumes:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Volume (list of volumes that can be mounted by containers belonging to the pod)
    - name:                                                           # string (volume name; must be a DNS_LABEL and unique within the pod)
      hostPath:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HostPathVolumeSource (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
        path:                                                         # string (path of the directory on the host)
      emptyDir:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EmptyDirVolumeSource (temporary directory that shares a pod's lifetime)
        medium: |Memory                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.StorageMedium (type of storage used to back the volume; must be an empty string (default) or Memory)
      gcePersistentDisk:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GCEPersistentDiskVolumeSource (GCE disk resource attached to the host machine on demand)
        pdName:                                                       # string (unique name of the PD resource in GCE)
        fsType:                                                       # string (file system type to mount, such as ext4, xfs, ntfs)
        partition:                                                    # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
        readOnly:                                                     # bool (read-only if true, read-write otherwise (false or unspecified))
      awsElasticBlockStore:                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.AWSElasticBlockStoreVolumeSource (AWS disk resource attached to the host machine on demand)
        volumeID:                                                     # string (unique id of the PD resource in AWS)
        fsType:                                                       # string (file system type to mount, such as ext4, xfs, ntfs)
        partition:                                                    # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
        readOnly:                                                     # bool (read-only if true, read-write otherwise (false or unspecified))
      gitRepo:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GitRepoVolumeSource (git repository at a particular revision)
        repository:                                                   # string (repository URL)
        revision:                                                     # string (commit hash for the specified revision)
      secret:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecretVolumeSource (secret to populate volume)
        secretName:                                                   # string (secretName is the name of a secret in the pod's namespace)
      nfs:                                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NFSVolumeSource (NFS volume that will be mounted in the host machine)
        server:                                                       # string (the hostname or IP address of the NFS server)
        path:                                                         # string (the path that is exported by the NFS server)
        readOnly:                                                     # bool (forces the NFS export to be mounted with read-only permissions)
      iscsi:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ISCSIVolumeSource (iSCSI disk attached to host machine on demand)
        targetPortal:                                                 # string (iSCSI target portal)
        iqn:                                                          # string (iSCSI Qualified Name)
        lun:                                                          # int (iscsi target lun number)
        fsType:                                                       # string (file system type to mount, such as ext4, xfs, ntfs)
        readOnly:                                                     # bool (read-only if true, read-write otherwise (false or unspecified))
      glusterfs:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GlusterfsVolumeSource (Glusterfs volume that will be mounted on the host machine )
        endpoints:                                                    # string (gluster hosts endpoints name)
        path:                                                         # string (path to gluster volume)
        readOnly:                                                     # bool (glusterfs volume to be mounted with read-only permissions)
      persistentVolumeClaim:                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaimVolumeSource (a reference to a PersistentVolumeClaim in the same namespace)
        claimName:                                                    # string (the name of the claim in the same namespace to be mounted as a volume)
        readOnly:                                                     # bool (mount volume as read-only when true; default false)
      rbd:                                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RBDVolumeSource (rados block volume that will be mounted on the host machine)
        monitors:                                                     # []string (a collection of Ceph monitors)
        - [string]                                                    # 
        image:                                                        # string (rados image name)
        fsType:                                                       # string (file system type to mount, such as ext4, xfs, ntfs)
        pool:                                                         # string (rados pool name; default is rbd; optional)
        user:                                                         # string (rados user name; default is admin; optional)
        keyring:                                                      # string (keyring is the path to key ring for rados user; default is /etc/ceph/keyring; optional)
        secretRef:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the RBD user; if provided overrides keyring; optional)
          name:                                                       # string (name of the referent)
        readOnly:                                                     # bool (rbd volume to be mounted with read-only permissions)
      cephfs:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.CephFSVolumeSource (Ceph filesystem that will be mounted on the host machine)
        monitors:                                                     # []string (a collection of Ceph monitors)
        - [string]                                                    # 
        user:                                                         # string (rados user name; default is admin; optional)
        secretFile:                                                   # string (path to secret for rados user; default is /etc/ceph/user.secret; optional)
        secretRef:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the user; if provided overrides keyring; optional)
          name:                                                       # string (name of the referent)
        readOnly:                                                     # bool (Ceph fs to be mounted with read-only permissions)
      metadata:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.MetadataVolumeSource (Metadata volume containing information about the pod)
        items:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.MetadataFile (list of metadata files)
        - name:                                                       # string (the name of the file to be created)
          fieldRef:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod. Supported fields: metadata.annotations, metadata.labels, metadata.name, metadata.namespace)
            apiVersion:                                               # string (version of the schema that fieldPath is written in terms of; defaults to v1)
            fieldPath:                                                # string (path of the field to select in the specified API version)
    containers:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Container (list of containers belonging to the pod; cannot be updated; containers cannot currently be added or removed; there must be at least one container in a Pod)
    - name:                                                           # string (name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated)
      image:                                                          # string (Docker image name)
      command:                                                        # []string (entrypoint array; not executed within a shell; the docker image's entrypoint is used if this is not provided; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
      - [string]                                                      # 
      args:                                                           # []string (command array; the docker image's cmd is used if this is not provided; arguments to the entrypoint; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
      - [string]                                                      # 
      workingDir:                                                     # string (container's working directory; defaults to image's default; cannot be updated)
      ports:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerPort (list of ports to expose from the container; cannot be updated)
      - name:                                                         # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
        hostPort:                                                     # int (number of port to expose on the host; most containers do not need this)
        containerPort:                                                # int (number of port to expose on the pod's IP address)
        protocol: TCP|UDP                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
        hostIP:                                                       # string (host IP to bind the port to)
      env:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EnvVar (list of environment variables to set in the container; cannot be updated)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        valueFrom:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
          fieldRef:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
            apiVersion:                                               # string (version of the schema that fieldPath is written in terms of; defaults to v1)
            fieldPath:                                                # string (path of the field to select in the specified API version)
      resources:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceRequirements (Compute Resources required by this container; cannot be updated)
        limits:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed)
          [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
        requests:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; requests are honored only for persistent volumes as of now)
          [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
      volumeMounts:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.VolumeMount (pod volumes to mount into the container's filesyste; cannot be updated)
      - name:                                                         # string (name of the volume to mount)
        readOnly:                                                     # bool (mounted read-only if true, read-write otherwise (false or unspecified))
        mountPath:                                                    # string (path within the container at which the volume should be mounted)
      livenessProbe:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Probe (periodic probe of container liveness; container will be restarted if the probe fails; cannot be updated)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        initialDelaySeconds:                                          # int64 (number of seconds after the container has started before liveness probes are initiated)
        timeoutSeconds:                                               # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
      readinessProbe:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Probe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails; cannot be updated)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        initialDelaySeconds:                                          # int64 (number of seconds after the container has started before liveness probes are initiated)
        timeoutSeconds:                                               # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
      lifecycle:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Lifecycle (actions that the management system should take in response to container lifecycle events; cannot be updated)
        postStart:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        preStop:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      terminationMessagePath:                                         # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log; cannot be updated)
      imagePullPolicy: Always|IfNotPresent|Never                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PullPolicy (image pull policy; one of Always, Never, IfNotPresent; defaults to Always if :latest tag is specified, or IfNotPresent otherwise; cannot be updated)
      securityContext:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecurityContext (security options the pod should run with)
        capabilities:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capabilities (the linux capabilites that should be added or removed)
          add:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (added capabilities)
          - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
          drop:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (droped capabilities)
          - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
        privileged:                                                   # *bool (run the container in privileged mode)
        seLinuxOptions:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SELinuxOptions (options that control the SELinux labels applied)
          user:                                                       # string (the user label to apply to the container)
          role:                                                       # string (the role label to apply to the container)
          type:                                                       # string (the type label to apply to the container)
          level:                                                      # string (the level label to apply to the container)
        runAsUser:                                                    # *int64 (the user id that runs the first process in the container)
    restartPolicy: Always|Never|OnFailure                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
    terminationGracePeriodSeconds:                                    # *int64 (optional duration in seconds the pod needs to terminate gracefully; may be decreased in delete request; value must be non-negative integer; the value zero indicates delete immediately; if this value is not set, the default grace period will be used instead; the grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal; set this value longer than the expected cleanup time for your process)
    activeDeadlineSeconds:                                            # *int64
    dnsPolicy: ClusterFirst|Default                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
    nodeSelector:                                                     # map[string]string (selector which must match a node's labels for the pod to be scheduled on that node)
      [string]:                                                       # string
    serviceAccount:                                                   # string (name of the ServiceAccount to use to run this pod)
    host:                                                             # string (host requested for this pod)
    hostNetwork:                                                      # bool (host networking requested for this pod)
    imagePullSecrets:                                                 # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (list of references to secrets in the same namespace available for pulling the container images)
    - name:                                                           # string (name of the referent)
  status:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodStatus (most recently observed status of the pod; populated by the system, read-only; http://docs.k8s.io/api-conventions.md#spec-and-status)
    phase: Failed|Pending|Running|Succeeded|Unknown                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodPhase (current condition of the pod.)
    conditions:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodCondition (current service state of pod)
    - type: Ready                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodConditionType (kind of the condition, currently only Ready)
      status: False|True|Unknown                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ConditionStatus (status of the condition, one of True, False, Unknown)
    message:                                                          # string (human readable message indicating details about why the pod is in this condition)
    hostIP:                                                           # string (IP address of the host to which the pod is assigned; empty if not yet scheduled)
    podIP:                                                            # string (IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated)
    startTime:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was acknowledged by the Kubelet.  This is before the Kubelet pulled the container image(s) for the pod.)
    containerStatuses:                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStatus (list of container statuses)
    - name:                                                           # string (name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated)
      state:                                                          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerState (details about the container's current condition)
        waiting:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateWaiting (details about a waiting container)
          reason:                                                     # string ((brief) reason the container is not yet running, such as pulling its image)
        running:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateRunning (details about a running container)
          startedAt:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the container was last (re-)started)
        termination:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateTerminated (details about a terminated container)
          exitCode:                                                   # int (exit status from the last termination of the container)
          signal:                                                     # int (signal from the last termination of the container)
          reason:                                                     # string ((brief) reason from the last termination of the container)
          message:                                                    # string (message regarding the last termination of the container)
          startedAt:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which previous execution of the container started)
          finishedAt:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the container last terminated)
          containerID:                                                # string (container's ID in the format 'docker://<container_id>')
      lastState:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerState (details about the container's last termination condition)
        waiting:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateWaiting (details about a waiting container)
          reason:                                                     # string ((brief) reason the container is not yet running, such as pulling its image)
        running:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateRunning (details about a running container)
          startedAt:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the container was last (re-)started)
        termination:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateTerminated (details about a terminated container)
          exitCode:                                                   # int (exit status from the last termination of the container)
          signal:                                                     # int (signal from the last termination of the container)
          reason:                                                     # string ((brief) reason from the last termination of the container)
          message:                                                    # string (message regarding the last termination of the container)
          startedAt:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which previous execution of the container started)
          finishedAt:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the container last terminated)
          containerID:                                                # string (container's ID in the format 'docker://<container_id>')
      ready:                                                          # bool (specifies whether the container has passed its readiness probe)
      restartCount:                                                   # int (the number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed)
      image:                                                          # string (image of the container)
      imageID:                                                        # string (ID of the container's image)
      containerID:                                                    # string (container's ID in the format 'docker://<container_id>')


PodLogOptions
=============

PodLogOptions is the query options for a Pod's logs REST call

kind: PodLogOptions                                                   # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
container:                                                            # string (the container for which to stream logs; defaults to only container if there is one container in the pod)
follow:                                                               # bool (follow the log stream of the pod; defaults to false)
previous:                                                             # bool (return previous terminated container logs; defaults to false)


PodProxyOptions
===============

PodProxyOptions is the query options to a Pod's proxy call

kind: PodProxyOptions                                                 # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
path:                                                                 # string (URL path to use in proxy request to pod)


PodStatusResult
===============

PodStatusResult is a wrapper for PodStatus returned by kubelet that can be encode/decoded

kind: PodStatusResult                                                 # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodStatus (most recently observed status of the pod; populated by the system, read-only; http://docs.k8s.io/api-conventions.md#spec-and-status)
  phase: Failed|Pending|Running|Succeeded|Unknown                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodPhase (current condition of the pod.)
  conditions:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodCondition (current service state of pod)
  - type: Ready                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodConditionType (kind of the condition, currently only Ready)
    status: False|True|Unknown                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ConditionStatus (status of the condition, one of True, False, Unknown)
  message:                                                            # string (human readable message indicating details about why the pod is in this condition)
  hostIP:                                                             # string (IP address of the host to which the pod is assigned; empty if not yet scheduled)
  podIP:                                                              # string (IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated)
  startTime:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was acknowledged by the Kubelet.  This is before the Kubelet pulled the container image(s) for the pod.)
  containerStatuses:                                                  # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStatus (list of container statuses)
  - name:                                                             # string (name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated)
    state:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerState (details about the container's current condition)
      waiting:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateWaiting (details about a waiting container)
        reason:                                                       # string ((brief) reason the container is not yet running, such as pulling its image)
      running:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateRunning (details about a running container)
        startedAt:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the container was last (re-)started)
      termination:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateTerminated (details about a terminated container)
        exitCode:                                                     # int (exit status from the last termination of the container)
        signal:                                                       # int (signal from the last termination of the container)
        reason:                                                       # string ((brief) reason from the last termination of the container)
        message:                                                      # string (message regarding the last termination of the container)
        startedAt:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which previous execution of the container started)
        finishedAt:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the container last terminated)
        containerID:                                                  # string (container's ID in the format 'docker://<container_id>')
    lastState:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerState (details about the container's last termination condition)
      waiting:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateWaiting (details about a waiting container)
        reason:                                                       # string ((brief) reason the container is not yet running, such as pulling its image)
      running:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateRunning (details about a running container)
        startedAt:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the container was last (re-)started)
      termination:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerStateTerminated (details about a terminated container)
        exitCode:                                                     # int (exit status from the last termination of the container)
        signal:                                                       # int (signal from the last termination of the container)
        reason:                                                       # string ((brief) reason from the last termination of the container)
        message:                                                      # string (message regarding the last termination of the container)
        startedAt:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which previous execution of the container started)
        finishedAt:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the container last terminated)
        containerID:                                                  # string (container's ID in the format 'docker://<container_id>')
    ready:                                                            # bool (specifies whether the container has passed its readiness probe)
    restartCount:                                                     # int (the number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed)
    image:                                                            # string (image of the container)
    imageID:                                                          # string (ID of the container's image)
    containerID:                                                      # string (container's ID in the format 'docker://<container_id>')


PodTemplate
===========

PodTemplate describes a template for creating copies of a predefined pod.

kind: PodTemplate                                                     # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
template:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodTemplateSpec (the template of the desired behavior of the pod; http://docs.k8s.io/api-conventions.md#spec-and-status)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodSpec (specification of the desired behavior of the pod; http://docs.k8s.io/api-conventions.md#spec-and-status)
    volumes:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Volume (list of volumes that can be mounted by containers belonging to the pod)
    - name:                                                           # string (volume name; must be a DNS_LABEL and unique within the pod)
      hostPath:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HostPathVolumeSource (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
        path:                                                         # string (path of the directory on the host)
      emptyDir:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EmptyDirVolumeSource (temporary directory that shares a pod's lifetime)
        medium: |Memory                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.StorageMedium (type of storage used to back the volume; must be an empty string (default) or Memory)
      gcePersistentDisk:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GCEPersistentDiskVolumeSource (GCE disk resource attached to the host machine on demand)
        pdName:                                                       # string (unique name of the PD resource in GCE)
        fsType:                                                       # string (file system type to mount, such as ext4, xfs, ntfs)
        partition:                                                    # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
        readOnly:                                                     # bool (read-only if true, read-write otherwise (false or unspecified))
      awsElasticBlockStore:                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.AWSElasticBlockStoreVolumeSource (AWS disk resource attached to the host machine on demand)
        volumeID:                                                     # string (unique id of the PD resource in AWS)
        fsType:                                                       # string (file system type to mount, such as ext4, xfs, ntfs)
        partition:                                                    # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
        readOnly:                                                     # bool (read-only if true, read-write otherwise (false or unspecified))
      gitRepo:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GitRepoVolumeSource (git repository at a particular revision)
        repository:                                                   # string (repository URL)
        revision:                                                     # string (commit hash for the specified revision)
      secret:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecretVolumeSource (secret to populate volume)
        secretName:                                                   # string (secretName is the name of a secret in the pod's namespace)
      nfs:                                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NFSVolumeSource (NFS volume that will be mounted in the host machine)
        server:                                                       # string (the hostname or IP address of the NFS server)
        path:                                                         # string (the path that is exported by the NFS server)
        readOnly:                                                     # bool (forces the NFS export to be mounted with read-only permissions)
      iscsi:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ISCSIVolumeSource (iSCSI disk attached to host machine on demand)
        targetPortal:                                                 # string (iSCSI target portal)
        iqn:                                                          # string (iSCSI Qualified Name)
        lun:                                                          # int (iscsi target lun number)
        fsType:                                                       # string (file system type to mount, such as ext4, xfs, ntfs)
        readOnly:                                                     # bool (read-only if true, read-write otherwise (false or unspecified))
      glusterfs:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GlusterfsVolumeSource (Glusterfs volume that will be mounted on the host machine )
        endpoints:                                                    # string (gluster hosts endpoints name)
        path:                                                         # string (path to gluster volume)
        readOnly:                                                     # bool (glusterfs volume to be mounted with read-only permissions)
      persistentVolumeClaim:                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaimVolumeSource (a reference to a PersistentVolumeClaim in the same namespace)
        claimName:                                                    # string (the name of the claim in the same namespace to be mounted as a volume)
        readOnly:                                                     # bool (mount volume as read-only when true; default false)
      rbd:                                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RBDVolumeSource (rados block volume that will be mounted on the host machine)
        monitors:                                                     # []string (a collection of Ceph monitors)
        - [string]                                                    # 
        image:                                                        # string (rados image name)
        fsType:                                                       # string (file system type to mount, such as ext4, xfs, ntfs)
        pool:                                                         # string (rados pool name; default is rbd; optional)
        user:                                                         # string (rados user name; default is admin; optional)
        keyring:                                                      # string (keyring is the path to key ring for rados user; default is /etc/ceph/keyring; optional)
        secretRef:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the RBD user; if provided overrides keyring; optional)
          name:                                                       # string (name of the referent)
        readOnly:                                                     # bool (rbd volume to be mounted with read-only permissions)
      cephfs:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.CephFSVolumeSource (Ceph filesystem that will be mounted on the host machine)
        monitors:                                                     # []string (a collection of Ceph monitors)
        - [string]                                                    # 
        user:                                                         # string (rados user name; default is admin; optional)
        secretFile:                                                   # string (path to secret for rados user; default is /etc/ceph/user.secret; optional)
        secretRef:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the user; if provided overrides keyring; optional)
          name:                                                       # string (name of the referent)
        readOnly:                                                     # bool (Ceph fs to be mounted with read-only permissions)
      metadata:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.MetadataVolumeSource (Metadata volume containing information about the pod)
        items:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.MetadataFile (list of metadata files)
        - name:                                                       # string (the name of the file to be created)
          fieldRef:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod. Supported fields: metadata.annotations, metadata.labels, metadata.name, metadata.namespace)
            apiVersion:                                               # string (version of the schema that fieldPath is written in terms of; defaults to v1)
            fieldPath:                                                # string (path of the field to select in the specified API version)
    containers:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Container (list of containers belonging to the pod; cannot be updated; containers cannot currently be added or removed; there must be at least one container in a Pod)
    - name:                                                           # string (name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated)
      image:                                                          # string (Docker image name)
      command:                                                        # []string (entrypoint array; not executed within a shell; the docker image's entrypoint is used if this is not provided; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
      - [string]                                                      # 
      args:                                                           # []string (command array; the docker image's cmd is used if this is not provided; arguments to the entrypoint; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
      - [string]                                                      # 
      workingDir:                                                     # string (container's working directory; defaults to image's default; cannot be updated)
      ports:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerPort (list of ports to expose from the container; cannot be updated)
      - name:                                                         # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
        hostPort:                                                     # int (number of port to expose on the host; most containers do not need this)
        containerPort:                                                # int (number of port to expose on the pod's IP address)
        protocol: TCP|UDP                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
        hostIP:                                                       # string (host IP to bind the port to)
      env:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EnvVar (list of environment variables to set in the container; cannot be updated)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        valueFrom:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
          fieldRef:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
            apiVersion:                                               # string (version of the schema that fieldPath is written in terms of; defaults to v1)
            fieldPath:                                                # string (path of the field to select in the specified API version)
      resources:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceRequirements (Compute Resources required by this container; cannot be updated)
        limits:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed)
          [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
        requests:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; requests are honored only for persistent volumes as of now)
          [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
      volumeMounts:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.VolumeMount (pod volumes to mount into the container's filesyste; cannot be updated)
      - name:                                                         # string (name of the volume to mount)
        readOnly:                                                     # bool (mounted read-only if true, read-write otherwise (false or unspecified))
        mountPath:                                                    # string (path within the container at which the volume should be mounted)
      livenessProbe:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Probe (periodic probe of container liveness; container will be restarted if the probe fails; cannot be updated)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        initialDelaySeconds:                                          # int64 (number of seconds after the container has started before liveness probes are initiated)
        timeoutSeconds:                                               # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
      readinessProbe:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Probe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails; cannot be updated)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        initialDelaySeconds:                                          # int64 (number of seconds after the container has started before liveness probes are initiated)
        timeoutSeconds:                                               # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
      lifecycle:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Lifecycle (actions that the management system should take in response to container lifecycle events; cannot be updated)
        postStart:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        preStop:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      terminationMessagePath:                                         # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log; cannot be updated)
      imagePullPolicy: Always|IfNotPresent|Never                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PullPolicy (image pull policy; one of Always, Never, IfNotPresent; defaults to Always if :latest tag is specified, or IfNotPresent otherwise; cannot be updated)
      securityContext:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecurityContext (security options the pod should run with)
        capabilities:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capabilities (the linux capabilites that should be added or removed)
          add:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (added capabilities)
          - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
          drop:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (droped capabilities)
          - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
        privileged:                                                   # *bool (run the container in privileged mode)
        seLinuxOptions:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SELinuxOptions (options that control the SELinux labels applied)
          user:                                                       # string (the user label to apply to the container)
          role:                                                       # string (the role label to apply to the container)
          type:                                                       # string (the type label to apply to the container)
          level:                                                      # string (the level label to apply to the container)
        runAsUser:                                                    # *int64 (the user id that runs the first process in the container)
    restartPolicy: Always|Never|OnFailure                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
    terminationGracePeriodSeconds:                                    # *int64 (optional duration in seconds the pod needs to terminate gracefully; may be decreased in delete request; value must be non-negative integer; the value zero indicates delete immediately; if this value is not set, the default grace period will be used instead; the grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal; set this value longer than the expected cleanup time for your process)
    activeDeadlineSeconds:                                            # *int64
    dnsPolicy: ClusterFirst|Default                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
    nodeSelector:                                                     # map[string]string (selector which must match a node's labels for the pod to be scheduled on that node)
      [string]:                                                       # string
    serviceAccount:                                                   # string (name of the ServiceAccount to use to run this pod)
    host:                                                             # string (host requested for this pod)
    hostNetwork:                                                      # bool (host networking requested for this pod)
    imagePullSecrets:                                                 # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (list of references to secrets in the same namespace available for pulling the container images)
    - name:                                                           # string (name of the referent)


PodTemplateList
===============

PodTemplateList is a list of PodTemplates.

kind: PodTemplateList                                                 # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodTemplate (list of pod templates)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  template:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodTemplateSpec (the template of the desired behavior of the pod; http://docs.k8s.io/api-conventions.md#spec-and-status)
    metadata:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
      name:                                                           # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
      generateName:                                                   # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
      namespace:                                                      # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
      selfLink:                                                       # string (URL for the object; populated by the system, read-only)
      uid:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
      resourceVersion:                                                # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
      creationTimestamp:                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
      deletionTimestamp:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
      labels:                                                         # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
        [string]:                                                     # string
      annotations:                                                    # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
        [string]:                                                     # string
    spec:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodSpec (specification of the desired behavior of the pod; http://docs.k8s.io/api-conventions.md#spec-and-status)
      volumes:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Volume (list of volumes that can be mounted by containers belonging to the pod)
      - name:                                                         # string (volume name; must be a DNS_LABEL and unique within the pod)
        hostPath:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HostPathVolumeSource (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
          path:                                                       # string (path of the directory on the host)
        emptyDir:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EmptyDirVolumeSource (temporary directory that shares a pod's lifetime)
          medium: |Memory                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.StorageMedium (type of storage used to back the volume; must be an empty string (default) or Memory)
        gcePersistentDisk:                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GCEPersistentDiskVolumeSource (GCE disk resource attached to the host machine on demand)
          pdName:                                                     # string (unique name of the PD resource in GCE)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          partition:                                                  # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified))
        awsElasticBlockStore:                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.AWSElasticBlockStoreVolumeSource (AWS disk resource attached to the host machine on demand)
          volumeID:                                                   # string (unique id of the PD resource in AWS)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          partition:                                                  # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified))
        gitRepo:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GitRepoVolumeSource (git repository at a particular revision)
          repository:                                                 # string (repository URL)
          revision:                                                   # string (commit hash for the specified revision)
        secret:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecretVolumeSource (secret to populate volume)
          secretName:                                                 # string (secretName is the name of a secret in the pod's namespace)
        nfs:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NFSVolumeSource (NFS volume that will be mounted in the host machine)
          server:                                                     # string (the hostname or IP address of the NFS server)
          path:                                                       # string (the path that is exported by the NFS server)
          readOnly:                                                   # bool (forces the NFS export to be mounted with read-only permissions)
        iscsi:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ISCSIVolumeSource (iSCSI disk attached to host machine on demand)
          targetPortal:                                               # string (iSCSI target portal)
          iqn:                                                        # string (iSCSI Qualified Name)
          lun:                                                        # int (iscsi target lun number)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified))
        glusterfs:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GlusterfsVolumeSource (Glusterfs volume that will be mounted on the host machine )
          endpoints:                                                  # string (gluster hosts endpoints name)
          path:                                                       # string (path to gluster volume)
          readOnly:                                                   # bool (glusterfs volume to be mounted with read-only permissions)
        persistentVolumeClaim:                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaimVolumeSource (a reference to a PersistentVolumeClaim in the same namespace)
          claimName:                                                  # string (the name of the claim in the same namespace to be mounted as a volume)
          readOnly:                                                   # bool (mount volume as read-only when true; default false)
        rbd:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RBDVolumeSource (rados block volume that will be mounted on the host machine)
          monitors:                                                   # []string (a collection of Ceph monitors)
          - [string]                                                  # 
          image:                                                      # string (rados image name)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          pool:                                                       # string (rados pool name; default is rbd; optional)
          user:                                                       # string (rados user name; default is admin; optional)
          keyring:                                                    # string (keyring is the path to key ring for rados user; default is /etc/ceph/keyring; optional)
          secretRef:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the RBD user; if provided overrides keyring; optional)
            name:                                                     # string (name of the referent)
          readOnly:                                                   # bool (rbd volume to be mounted with read-only permissions)
        cephfs:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.CephFSVolumeSource (Ceph filesystem that will be mounted on the host machine)
          monitors:                                                   # []string (a collection of Ceph monitors)
          - [string]                                                  # 
          user:                                                       # string (rados user name; default is admin; optional)
          secretFile:                                                 # string (path to secret for rados user; default is /etc/ceph/user.secret; optional)
          secretRef:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the user; if provided overrides keyring; optional)
            name:                                                     # string (name of the referent)
          readOnly:                                                   # bool (Ceph fs to be mounted with read-only permissions)
        metadata:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.MetadataVolumeSource (Metadata volume containing information about the pod)
          items:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.MetadataFile (list of metadata files)
          - name:                                                     # string (the name of the file to be created)
            fieldRef:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod. Supported fields: metadata.annotations, metadata.labels, metadata.name, metadata.namespace)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
      containers:                                                     # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Container (list of containers belonging to the pod; cannot be updated; containers cannot currently be added or removed; there must be at least one container in a Pod)
      - name:                                                         # string (name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated)
        image:                                                        # string (Docker image name)
        command:                                                      # []string (entrypoint array; not executed within a shell; the docker image's entrypoint is used if this is not provided; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        - [string]                                                    # 
        args:                                                         # []string (command array; the docker image's cmd is used if this is not provided; arguments to the entrypoint; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        - [string]                                                    # 
        workingDir:                                                   # string (container's working directory; defaults to image's default; cannot be updated)
        ports:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerPort (list of ports to expose from the container; cannot be updated)
        - name:                                                       # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
          hostPort:                                                   # int (number of port to expose on the host; most containers do not need this)
          containerPort:                                              # int (number of port to expose on the pod's IP address)
          protocol: TCP|UDP                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
          hostIP:                                                     # string (host IP to bind the port to)
        env:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EnvVar (list of environment variables to set in the container; cannot be updated)
        - name:                                                       # string (name of the environment variable; must be a C_IDENTIFIER)
          value:                                                      # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
          valueFrom:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
            fieldRef:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
        resources:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceRequirements (Compute Resources required by this container; cannot be updated)
          limits:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed)
            [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
          requests:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; requests are honored only for persistent volumes as of now)
            [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
        volumeMounts:                                                 # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.VolumeMount (pod volumes to mount into the container's filesyste; cannot be updated)
        - name:                                                       # string (name of the volume to mount)
          readOnly:                                                   # bool (mounted read-only if true, read-write otherwise (false or unspecified))
          mountPath:                                                  # string (path within the container at which the volume should be mounted)
        livenessProbe:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Probe (periodic probe of container liveness; container will be restarted if the probe fails; cannot be updated)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          initialDelaySeconds:                                        # int64 (number of seconds after the container has started before liveness probes are initiated)
          timeoutSeconds:                                             # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
        readinessProbe:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Probe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails; cannot be updated)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          initialDelaySeconds:                                        # int64 (number of seconds after the container has started before liveness probes are initiated)
          timeoutSeconds:                                             # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
        lifecycle:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Lifecycle (actions that the management system should take in response to container lifecycle events; cannot be updated)
          postStart:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          preStop:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        terminationMessagePath:                                       # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log; cannot be updated)
        imagePullPolicy: Always|IfNotPresent|Never                    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PullPolicy (image pull policy; one of Always, Never, IfNotPresent; defaults to Always if :latest tag is specified, or IfNotPresent otherwise; cannot be updated)
        securityContext:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecurityContext (security options the pod should run with)
          capabilities:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capabilities (the linux capabilites that should be added or removed)
            add:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (added capabilities)
            - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
            drop:                                                     # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (droped capabilities)
            - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
          privileged:                                                 # *bool (run the container in privileged mode)
          seLinuxOptions:                                             # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SELinuxOptions (options that control the SELinux labels applied)
            user:                                                     # string (the user label to apply to the container)
            role:                                                     # string (the role label to apply to the container)
            type:                                                     # string (the type label to apply to the container)
            level:                                                    # string (the level label to apply to the container)
          runAsUser:                                                  # *int64 (the user id that runs the first process in the container)
      restartPolicy: Always|Never|OnFailure                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
      terminationGracePeriodSeconds:                                  # *int64 (optional duration in seconds the pod needs to terminate gracefully; may be decreased in delete request; value must be non-negative integer; the value zero indicates delete immediately; if this value is not set, the default grace period will be used instead; the grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal; set this value longer than the expected cleanup time for your process)
      activeDeadlineSeconds:                                          # *int64
      dnsPolicy: ClusterFirst|Default                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
      nodeSelector:                                                   # map[string]string (selector which must match a node's labels for the pod to be scheduled on that node)
        [string]:                                                     # string
      serviceAccount:                                                 # string (name of the ServiceAccount to use to run this pod)
      host:                                                           # string (host requested for this pod)
      hostNetwork:                                                    # bool (host networking requested for this pod)
      imagePullSecrets:                                               # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (list of references to secrets in the same namespace available for pulling the container images)
      - name:                                                         # string (name of the referent)


RangeAllocation
===============

RangeAllocation is not a public type

kind: RangeAllocation                                                 # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
range:                                                                # string (a range string that identifies the range represented by 'data'; required)
data:                                                                 # []byte (a bit array containing all allocated addresses in the previous segment)
- [byte]                                                              # 


ReplicationController
=====================

ReplicationController represents the configuration of a replication controller.

kind: ReplicationController                                           # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ReplicationControllerSpec (specification of the desired behavior of the replication controller; http://docs.k8s.io/api-conventions.md#spec-and-status)
  replicas:                                                           # *int (number of replicas desired; defaults to 1)
  selector:                                                           # map[string]string (label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template)
    [string]:                                                         # string
  templateRef:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectReference (reference to an object that describes the pod that will be created if insufficient replicas are detected)
    kind:                                                             # string (kind of the referent)
    namespace:                                                        # string (namespace of the referent)
    name:                                                             # string (name of the referent)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  template:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodTemplateSpec (object that describes the pod that will be created if insufficient replicas are detected; takes precendence over templateRef)
    metadata:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
      name:                                                           # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
      generateName:                                                   # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
      namespace:                                                      # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
      selfLink:                                                       # string (URL for the object; populated by the system, read-only)
      uid:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
      resourceVersion:                                                # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
      creationTimestamp:                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
      deletionTimestamp:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
      labels:                                                         # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
        [string]:                                                     # string
      annotations:                                                    # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
        [string]:                                                     # string
    spec:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodSpec (specification of the desired behavior of the pod; http://docs.k8s.io/api-conventions.md#spec-and-status)
      volumes:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Volume (list of volumes that can be mounted by containers belonging to the pod)
      - name:                                                         # string (volume name; must be a DNS_LABEL and unique within the pod)
        hostPath:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HostPathVolumeSource (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
          path:                                                       # string (path of the directory on the host)
        emptyDir:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EmptyDirVolumeSource (temporary directory that shares a pod's lifetime)
          medium: |Memory                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.StorageMedium (type of storage used to back the volume; must be an empty string (default) or Memory)
        gcePersistentDisk:                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GCEPersistentDiskVolumeSource (GCE disk resource attached to the host machine on demand)
          pdName:                                                     # string (unique name of the PD resource in GCE)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          partition:                                                  # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified))
        awsElasticBlockStore:                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.AWSElasticBlockStoreVolumeSource (AWS disk resource attached to the host machine on demand)
          volumeID:                                                   # string (unique id of the PD resource in AWS)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          partition:                                                  # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified))
        gitRepo:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GitRepoVolumeSource (git repository at a particular revision)
          repository:                                                 # string (repository URL)
          revision:                                                   # string (commit hash for the specified revision)
        secret:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecretVolumeSource (secret to populate volume)
          secretName:                                                 # string (secretName is the name of a secret in the pod's namespace)
        nfs:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NFSVolumeSource (NFS volume that will be mounted in the host machine)
          server:                                                     # string (the hostname or IP address of the NFS server)
          path:                                                       # string (the path that is exported by the NFS server)
          readOnly:                                                   # bool (forces the NFS export to be mounted with read-only permissions)
        iscsi:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ISCSIVolumeSource (iSCSI disk attached to host machine on demand)
          targetPortal:                                               # string (iSCSI target portal)
          iqn:                                                        # string (iSCSI Qualified Name)
          lun:                                                        # int (iscsi target lun number)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified))
        glusterfs:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GlusterfsVolumeSource (Glusterfs volume that will be mounted on the host machine )
          endpoints:                                                  # string (gluster hosts endpoints name)
          path:                                                       # string (path to gluster volume)
          readOnly:                                                   # bool (glusterfs volume to be mounted with read-only permissions)
        persistentVolumeClaim:                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaimVolumeSource (a reference to a PersistentVolumeClaim in the same namespace)
          claimName:                                                  # string (the name of the claim in the same namespace to be mounted as a volume)
          readOnly:                                                   # bool (mount volume as read-only when true; default false)
        rbd:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RBDVolumeSource (rados block volume that will be mounted on the host machine)
          monitors:                                                   # []string (a collection of Ceph monitors)
          - [string]                                                  # 
          image:                                                      # string (rados image name)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          pool:                                                       # string (rados pool name; default is rbd; optional)
          user:                                                       # string (rados user name; default is admin; optional)
          keyring:                                                    # string (keyring is the path to key ring for rados user; default is /etc/ceph/keyring; optional)
          secretRef:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the RBD user; if provided overrides keyring; optional)
            name:                                                     # string (name of the referent)
          readOnly:                                                   # bool (rbd volume to be mounted with read-only permissions)
        cephfs:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.CephFSVolumeSource (Ceph filesystem that will be mounted on the host machine)
          monitors:                                                   # []string (a collection of Ceph monitors)
          - [string]                                                  # 
          user:                                                       # string (rados user name; default is admin; optional)
          secretFile:                                                 # string (path to secret for rados user; default is /etc/ceph/user.secret; optional)
          secretRef:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the user; if provided overrides keyring; optional)
            name:                                                     # string (name of the referent)
          readOnly:                                                   # bool (Ceph fs to be mounted with read-only permissions)
        metadata:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.MetadataVolumeSource (Metadata volume containing information about the pod)
          items:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.MetadataFile (list of metadata files)
          - name:                                                     # string (the name of the file to be created)
            fieldRef:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod. Supported fields: metadata.annotations, metadata.labels, metadata.name, metadata.namespace)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
      containers:                                                     # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Container (list of containers belonging to the pod; cannot be updated; containers cannot currently be added or removed; there must be at least one container in a Pod)
      - name:                                                         # string (name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated)
        image:                                                        # string (Docker image name)
        command:                                                      # []string (entrypoint array; not executed within a shell; the docker image's entrypoint is used if this is not provided; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        - [string]                                                    # 
        args:                                                         # []string (command array; the docker image's cmd is used if this is not provided; arguments to the entrypoint; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        - [string]                                                    # 
        workingDir:                                                   # string (container's working directory; defaults to image's default; cannot be updated)
        ports:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerPort (list of ports to expose from the container; cannot be updated)
        - name:                                                       # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
          hostPort:                                                   # int (number of port to expose on the host; most containers do not need this)
          containerPort:                                              # int (number of port to expose on the pod's IP address)
          protocol: TCP|UDP                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
          hostIP:                                                     # string (host IP to bind the port to)
        env:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EnvVar (list of environment variables to set in the container; cannot be updated)
        - name:                                                       # string (name of the environment variable; must be a C_IDENTIFIER)
          value:                                                      # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
          valueFrom:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
            fieldRef:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
        resources:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceRequirements (Compute Resources required by this container; cannot be updated)
          limits:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed)
            [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
          requests:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; requests are honored only for persistent volumes as of now)
            [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
        volumeMounts:                                                 # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.VolumeMount (pod volumes to mount into the container's filesyste; cannot be updated)
        - name:                                                       # string (name of the volume to mount)
          readOnly:                                                   # bool (mounted read-only if true, read-write otherwise (false or unspecified))
          mountPath:                                                  # string (path within the container at which the volume should be mounted)
        livenessProbe:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Probe (periodic probe of container liveness; container will be restarted if the probe fails; cannot be updated)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          initialDelaySeconds:                                        # int64 (number of seconds after the container has started before liveness probes are initiated)
          timeoutSeconds:                                             # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
        readinessProbe:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Probe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails; cannot be updated)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          initialDelaySeconds:                                        # int64 (number of seconds after the container has started before liveness probes are initiated)
          timeoutSeconds:                                             # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
        lifecycle:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Lifecycle (actions that the management system should take in response to container lifecycle events; cannot be updated)
          postStart:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          preStop:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        terminationMessagePath:                                       # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log; cannot be updated)
        imagePullPolicy: Always|IfNotPresent|Never                    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PullPolicy (image pull policy; one of Always, Never, IfNotPresent; defaults to Always if :latest tag is specified, or IfNotPresent otherwise; cannot be updated)
        securityContext:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecurityContext (security options the pod should run with)
          capabilities:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capabilities (the linux capabilites that should be added or removed)
            add:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (added capabilities)
            - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
            drop:                                                     # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (droped capabilities)
            - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
          privileged:                                                 # *bool (run the container in privileged mode)
          seLinuxOptions:                                             # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SELinuxOptions (options that control the SELinux labels applied)
            user:                                                     # string (the user label to apply to the container)
            role:                                                     # string (the role label to apply to the container)
            type:                                                     # string (the type label to apply to the container)
            level:                                                    # string (the level label to apply to the container)
          runAsUser:                                                  # *int64 (the user id that runs the first process in the container)
      restartPolicy: Always|Never|OnFailure                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
      terminationGracePeriodSeconds:                                  # *int64 (optional duration in seconds the pod needs to terminate gracefully; may be decreased in delete request; value must be non-negative integer; the value zero indicates delete immediately; if this value is not set, the default grace period will be used instead; the grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal; set this value longer than the expected cleanup time for your process)
      activeDeadlineSeconds:                                          # *int64
      dnsPolicy: ClusterFirst|Default                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
      nodeSelector:                                                   # map[string]string (selector which must match a node's labels for the pod to be scheduled on that node)
        [string]:                                                     # string
      serviceAccount:                                                 # string (name of the ServiceAccount to use to run this pod)
      host:                                                           # string (host requested for this pod)
      hostNetwork:                                                    # bool (host networking requested for this pod)
      imagePullSecrets:                                               # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (list of references to secrets in the same namespace available for pulling the container images)
      - name:                                                         # string (name of the referent)
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ReplicationControllerStatus (most recently observed status of the replication controller; populated by the system, read-only; http://docs.k8s.io/api-conventions.md#spec-and-status)
  replicas:                                                           # int (most recently oberved number of replicas)


ReplicationControllerList
=========================

ReplicationControllerList is a collection of replication controllers.

kind: ReplicationControllerList                                       # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ReplicationController (list of replication controllers)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ReplicationControllerSpec (specification of the desired behavior of the replication controller; http://docs.k8s.io/api-conventions.md#spec-and-status)
    replicas:                                                         # *int (number of replicas desired; defaults to 1)
    selector:                                                         # map[string]string (label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template)
      [string]:                                                       # string
    templateRef:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectReference (reference to an object that describes the pod that will be created if insufficient replicas are detected)
      kind:                                                           # string (kind of the referent)
      namespace:                                                      # string (namespace of the referent)
      name:                                                           # string (name of the referent)
      uid:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
      apiVersion:                                                     # string (API version of the referent)
      resourceVersion:                                                # string (specific resourceVersion to which this reference is made, if any: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
      fieldPath:                                                      # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
    template:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodTemplateSpec (object that describes the pod that will be created if insufficient replicas are detected; takes precendence over templateRef)
      metadata:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
        name:                                                         # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
        generateName:                                                 # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
        namespace:                                                    # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
        selfLink:                                                     # string (URL for the object; populated by the system, read-only)
        uid:                                                          # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
        resourceVersion:                                              # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
        creationTimestamp:                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
        deletionTimestamp:                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
        labels:                                                       # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
          [string]:                                                   # string
        annotations:                                                  # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
          [string]:                                                   # string
      spec:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PodSpec (specification of the desired behavior of the pod; http://docs.k8s.io/api-conventions.md#spec-and-status)
        volumes:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Volume (list of volumes that can be mounted by containers belonging to the pod)
        - name:                                                       # string (volume name; must be a DNS_LABEL and unique within the pod)
          hostPath:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HostPathVolumeSource (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
            path:                                                     # string (path of the directory on the host)
          emptyDir:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EmptyDirVolumeSource (temporary directory that shares a pod's lifetime)
            medium: |Memory                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.StorageMedium (type of storage used to back the volume; must be an empty string (default) or Memory)
          gcePersistentDisk:                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GCEPersistentDiskVolumeSource (GCE disk resource attached to the host machine on demand)
            pdName:                                                   # string (unique name of the PD resource in GCE)
            fsType:                                                   # string (file system type to mount, such as ext4, xfs, ntfs)
            partition:                                                # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
            readOnly:                                                 # bool (read-only if true, read-write otherwise (false or unspecified))
          awsElasticBlockStore:                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.AWSElasticBlockStoreVolumeSource (AWS disk resource attached to the host machine on demand)
            volumeID:                                                 # string (unique id of the PD resource in AWS)
            fsType:                                                   # string (file system type to mount, such as ext4, xfs, ntfs)
            partition:                                                # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
            readOnly:                                                 # bool (read-only if true, read-write otherwise (false or unspecified))
          gitRepo:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GitRepoVolumeSource (git repository at a particular revision)
            repository:                                               # string (repository URL)
            revision:                                                 # string (commit hash for the specified revision)
          secret:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecretVolumeSource (secret to populate volume)
            secretName:                                               # string (secretName is the name of a secret in the pod's namespace)
          nfs:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.NFSVolumeSource (NFS volume that will be mounted in the host machine)
            server:                                                   # string (the hostname or IP address of the NFS server)
            path:                                                     # string (the path that is exported by the NFS server)
            readOnly:                                                 # bool (forces the NFS export to be mounted with read-only permissions)
          iscsi:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ISCSIVolumeSource (iSCSI disk attached to host machine on demand)
            targetPortal:                                             # string (iSCSI target portal)
            iqn:                                                      # string (iSCSI Qualified Name)
            lun:                                                      # int (iscsi target lun number)
            fsType:                                                   # string (file system type to mount, such as ext4, xfs, ntfs)
            readOnly:                                                 # bool (read-only if true, read-write otherwise (false or unspecified))
          glusterfs:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.GlusterfsVolumeSource (Glusterfs volume that will be mounted on the host machine )
            endpoints:                                                # string (gluster hosts endpoints name)
            path:                                                     # string (path to gluster volume)
            readOnly:                                                 # bool (glusterfs volume to be mounted with read-only permissions)
          persistentVolumeClaim:                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PersistentVolumeClaimVolumeSource (a reference to a PersistentVolumeClaim in the same namespace)
            claimName:                                                # string (the name of the claim in the same namespace to be mounted as a volume)
            readOnly:                                                 # bool (mount volume as read-only when true; default false)
          rbd:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RBDVolumeSource (rados block volume that will be mounted on the host machine)
            monitors:                                                 # []string (a collection of Ceph monitors)
            - [string]                                                # 
            image:                                                    # string (rados image name)
            fsType:                                                   # string (file system type to mount, such as ext4, xfs, ntfs)
            pool:                                                     # string (rados pool name; default is rbd; optional)
            user:                                                     # string (rados user name; default is admin; optional)
            keyring:                                                  # string (keyring is the path to key ring for rados user; default is /etc/ceph/keyring; optional)
            secretRef:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the RBD user; if provided overrides keyring; optional)
              name:                                                   # string (name of the referent)
            readOnly:                                                 # bool (rbd volume to be mounted with read-only permissions)
          cephfs:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.CephFSVolumeSource (Ceph filesystem that will be mounted on the host machine)
            monitors:                                                 # []string (a collection of Ceph monitors)
            - [string]                                                # 
            user:                                                     # string (rados user name; default is admin; optional)
            secretFile:                                               # string (path to secret for rados user; default is /etc/ceph/user.secret; optional)
            secretRef:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the user; if provided overrides keyring; optional)
              name:                                                   # string (name of the referent)
            readOnly:                                                 # bool (Ceph fs to be mounted with read-only permissions)
          metadata:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.MetadataVolumeSource (Metadata volume containing information about the pod)
            items:                                                    # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.MetadataFile (list of metadata files)
            - name:                                                   # string (the name of the file to be created)
              fieldRef:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod. Supported fields: metadata.annotations, metadata.labels, metadata.name, metadata.namespace)
                apiVersion:                                           # string (version of the schema that fieldPath is written in terms of; defaults to v1)
                fieldPath:                                            # string (path of the field to select in the specified API version)
        containers:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Container (list of containers belonging to the pod; cannot be updated; containers cannot currently be added or removed; there must be at least one container in a Pod)
        - name:                                                       # string (name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated)
          image:                                                      # string (Docker image name)
          command:                                                    # []string (entrypoint array; not executed within a shell; the docker image's entrypoint is used if this is not provided; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
          - [string]                                                  # 
          args:                                                       # []string (command array; the docker image's cmd is used if this is not provided; arguments to the entrypoint; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
          - [string]                                                  # 
          workingDir:                                                 # string (container's working directory; defaults to image's default; cannot be updated)
          ports:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ContainerPort (list of ports to expose from the container; cannot be updated)
          - name:                                                     # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
            hostPort:                                                 # int (number of port to expose on the host; most containers do not need this)
            containerPort:                                            # int (number of port to expose on the pod's IP address)
            protocol: TCP|UDP                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
            hostIP:                                                   # string (host IP to bind the port to)
          env:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EnvVar (list of environment variables to set in the container; cannot be updated)
          - name:                                                     # string (name of the environment variable; must be a C_IDENTIFIER)
            value:                                                    # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
            valueFrom:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
              fieldRef:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
                apiVersion:                                           # string (version of the schema that fieldPath is written in terms of; defaults to v1)
                fieldPath:                                            # string (path of the field to select in the specified API version)
          resources:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceRequirements (Compute Resources required by this container; cannot be updated)
            limits:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed)
              [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
            requests:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; requests are honored only for persistent volumes as of now)
              [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
          volumeMounts:                                               # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.VolumeMount (pod volumes to mount into the container's filesyste; cannot be updated)
          - name:                                                     # string (name of the volume to mount)
            readOnly:                                                 # bool (mounted read-only if true, read-write otherwise (false or unspecified))
            mountPath:                                                # string (path within the container at which the volume should be mounted)
          livenessProbe:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Probe (periodic probe of container liveness; container will be restarted if the probe fails; cannot be updated)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
            initialDelaySeconds:                                      # int64 (number of seconds after the container has started before liveness probes are initiated)
            timeoutSeconds:                                           # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
          readinessProbe:                                             # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Probe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails; cannot be updated)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
            initialDelaySeconds:                                      # int64 (number of seconds after the container has started before liveness probes are initiated)
            timeoutSeconds:                                           # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
          lifecycle:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Lifecycle (actions that the management system should take in response to container lifecycle events; cannot be updated)
            postStart:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
              exec:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
                command:                                              # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                - [string]                                            # 
              httpGet:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
                path:                                                 # string (path to access on the HTTP server)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                host:                                                 # string (hostname to connect to; defaults to pod IP)
              tcpSocket:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
            preStop:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
              exec:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
                command:                                              # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                - [string]                                            # 
              httpGet:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
                path:                                                 # string (path to access on the HTTP server)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                host:                                                 # string (hostname to connect to; defaults to pod IP)
              tcpSocket:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          terminationMessagePath:                                     # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log; cannot be updated)
          imagePullPolicy: Always|IfNotPresent|Never                  # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.PullPolicy (image pull policy; one of Always, Never, IfNotPresent; defaults to Always if :latest tag is specified, or IfNotPresent otherwise; cannot be updated)
          securityContext:                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecurityContext (security options the pod should run with)
            capabilities:                                             # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capabilities (the linux capabilites that should be added or removed)
              add:                                                    # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (added capabilities)
              - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
              drop:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (droped capabilities)
              - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
            privileged:                                               # *bool (run the container in privileged mode)
            seLinuxOptions:                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SELinuxOptions (options that control the SELinux labels applied)
              user:                                                   # string (the user label to apply to the container)
              role:                                                   # string (the role label to apply to the container)
              type:                                                   # string (the type label to apply to the container)
              level:                                                  # string (the level label to apply to the container)
            runAsUser:                                                # *int64 (the user id that runs the first process in the container)
        restartPolicy: Always|Never|OnFailure                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
        terminationGracePeriodSeconds:                                # *int64 (optional duration in seconds the pod needs to terminate gracefully; may be decreased in delete request; value must be non-negative integer; the value zero indicates delete immediately; if this value is not set, the default grace period will be used instead; the grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal; set this value longer than the expected cleanup time for your process)
        activeDeadlineSeconds:                                        # *int64
        dnsPolicy: ClusterFirst|Default                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
        nodeSelector:                                                 # map[string]string (selector which must match a node's labels for the pod to be scheduled on that node)
          [string]:                                                   # string
        serviceAccount:                                               # string (name of the ServiceAccount to use to run this pod)
        host:                                                         # string (host requested for this pod)
        hostNetwork:                                                  # bool (host networking requested for this pod)
        imagePullSecrets:                                             # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (list of references to secrets in the same namespace available for pulling the container images)
        - name:                                                       # string (name of the referent)
  status:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ReplicationControllerStatus (most recently observed status of the replication controller; populated by the system, read-only; http://docs.k8s.io/api-conventions.md#spec-and-status)
    replicas:                                                         # int (most recently oberved number of replicas)


ResourceQuota
=============

ResourceQuota sets aggregate quota restrictions enforced per namespace

kind: ResourceQuota                                                   # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceQuotaSpec (spec defines the desired quota; http://docs.k8s.io/api-conventions.md#spec-and-status)
  hard:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (hard is the set of desired hard limits for each named resource)
    [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceQuotaStatus (status defines the actual enforced quota and current usage; http://docs.k8s.io/api-conventions.md#spec-and-status)
  hard:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (hard is the set of enforced hard limits for each named resource)
    [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
  used:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (used is the current observed total usage of the resource in the namespace)
    [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity


ResourceQuotaList
=================

ResourceQuotaList is a list of ResourceQuota items

kind: ResourceQuotaList                                               # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceQuota (items is a list of ResourceQuota objects)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceQuotaSpec (spec defines the desired quota; http://docs.k8s.io/api-conventions.md#spec-and-status)
    hard:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (hard is the set of desired hard limits for each named resource)
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
  status:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceQuotaStatus (status defines the actual enforced quota and current usage; http://docs.k8s.io/api-conventions.md#spec-and-status)
    hard:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (hard is the set of enforced hard limits for each named resource)
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity
    used:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceList (used is the current observed total usage of the resource in the namespace)
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/api/resource.Quantity


Secret
======

Secret holds secret data of a certain type.  The total bytes of the values in
the Data field must be less than MaxSecretSize bytes.

kind: Secret                                                          # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
data:                                                                 # map[string][]byte (data contains the secret data.  Each key must be a valid DNS_SUBDOMAIN or leading dot followed by valid DNS_SUBDOMAIN.  Each value must be a base64 encoded string as described in https://tools.ietf.org/html/rfc4648#section-4)
  [string]:                                                           # []byte
type: kubernetes.io/dockercfg|Opaque|kubernetes.io/service-account-token # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecretType (type facilitates programmatic handling of secret data)


SecretList
==========


kind: SecretList                                                      # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Secret (items is a list of secret objects)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  data:                                                               # map[string][]byte (data contains the secret data.  Each key must be a valid DNS_SUBDOMAIN or leading dot followed by valid DNS_SUBDOMAIN.  Each value must be a base64 encoded string as described in https://tools.ietf.org/html/rfc4648#section-4)
    [string]:                                                         # []byte
  type: kubernetes.io/dockercfg|Opaque|kubernetes.io/service-account-token # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecretType (type facilitates programmatic handling of secret data)


SecurityContextConstraints
==========================

SecurityContextConstraints governs the ability to make requests that affect the SecurityContext
that will be applied to a container.

kind: SecurityContextConstraints                                      # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
allowPrivilegedContainer:                                             # bool (allow containers to run as privileged)
allowedCapabilities:                                                  # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (capabilities that are allowed to be added)
- [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability]   # 
allowHostDirVolumePlugin:                                             # bool (allow the use of the host dir volume plugin)
seLinuxContext:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SELinuxContextStrategyOptions (strategy used to generate SELinuxOptions)
  type: MustRunAs|RunAsAny                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SELinuxContextStrategyType (strategy used to generate the SELinux context)
  seLinuxOptions:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SELinuxOptions (seLinuxOptions required to run as; required for MustRunAs)
    user:                                                             # string (the user label to apply to the container)
    role:                                                             # string (the role label to apply to the container)
    type:                                                             # string (the type label to apply to the container)
    level:                                                            # string (the level label to apply to the container)
runAsUser:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RunAsUserStrategyOptions (strategy used to generate RunAsUser)
  type: MustRunAs|MustRunAsNonRoot|MustRunAsRange|RunAsAny            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RunAsUserStrategyType (strategy used to generate RunAsUser)
  uid:                                                                # *int64 (the uid to always run as; required for MustRunAs)
  uidRangeMin:                                                        # *int64 (min value for range based allocators)
  uidRangeMax:                                                        # *int64 (max value for range based allocators)
users:                                                                # []string (users allowed to use this SecurityContextConstraints)
- [string]                                                            # 
groups:                                                               # []string (groups allowed to use this SecurityContextConstraints)
- [string]                                                            # 


SecurityContextConstraintsList
==============================

SecurityContextConstraintsList is a list of SecurityContextConstraints objects

kind: SecurityContextConstraintsList                                  # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SecurityContextConstraints
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  allowPrivilegedContainer:                                           # bool (allow containers to run as privileged)
  allowedCapabilities:                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability (capabilities that are allowed to be added)
  - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Capability] # 
  allowHostDirVolumePlugin:                                           # bool (allow the use of the host dir volume plugin)
  seLinuxContext:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SELinuxContextStrategyOptions (strategy used to generate SELinuxOptions)
    type: MustRunAs|RunAsAny                                          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SELinuxContextStrategyType (strategy used to generate the SELinux context)
    seLinuxOptions:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.SELinuxOptions (seLinuxOptions required to run as; required for MustRunAs)
      user:                                                           # string (the user label to apply to the container)
      role:                                                           # string (the role label to apply to the container)
      type:                                                           # string (the type label to apply to the container)
      level:                                                          # string (the level label to apply to the container)
  runAsUser:                                                          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RunAsUserStrategyOptions (strategy used to generate RunAsUser)
    type: MustRunAs|MustRunAsNonRoot|MustRunAsRange|RunAsAny          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.RunAsUserStrategyType (strategy used to generate RunAsUser)
    uid:                                                              # *int64 (the uid to always run as; required for MustRunAs)
    uidRangeMin:                                                      # *int64 (min value for range based allocators)
    uidRangeMax:                                                      # *int64 (max value for range based allocators)
  users:                                                              # []string (users allowed to use this SecurityContextConstraints)
  - [string]                                                          # 
  groups:                                                             # []string (groups allowed to use this SecurityContextConstraints)
  - [string]                                                          # 


SerializedReference
===================


kind: SerializedReference                                             # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
reference:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectReference (the reference to an object in the system)
  kind:                                                               # string (kind of the referent)
  namespace:                                                          # string (namespace of the referent)
  name:                                                               # string (name of the referent)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


Service
=======

Service is a named abstraction of software service (for example, mysql) consisting of local port
(for example 3306) that the proxy listens on, and the selector that determines which pods
will answer requests sent through the proxy.

kind: Service                                                         # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ServiceSpec (specification of the desired behavior of the service; http://docs.k8s.io/api-conventions.md#spec-and-status)
  ports:                                                              # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ServicePort (ports exposed by the service)
  - name:                                                             # string (the name of this port; optional if only one port is defined)
    protocol: TCP|UDP                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Protocol (the protocol used by this port; must be UDP or TCP; TCP if unspecified)
    port:                                                             # int (the port number that is exposed)
    targetPort:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (the port to access on the pods targeted by the service; defaults to the service port)
    nodePort:                                                         # int (the port on each node on which this service is exposed)
  selector:                                                           # map[string]string (label keys and values that must match in order to receive traffic for this service; if empty, all pods are selected, if not specified, endpoints must be manually specified)
    [string]:                                                         # string
  portalIP:                                                           # string
  type: ClusterIP|LoadBalancer|NodePort                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ServiceType (type of this service; must be ClusterIP, NodePort, or LoadBalancer; defaults to ClusterIP)
  deprecatedPublicIPs:                                                # []string (deprecated. externally visible IPs (e.g. load balancers) that should be proxied to this service)
  - [string]                                                          # 
  sessionAffinity: ClientIP|None                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ServiceAffinity (enable client IP based session affinity; must be ClientIP or None; defaults to None)
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ServiceStatus (most recently observed status of the service; populated by the system, read-only; http://docs.k8s.io/api-conventions.md#spec-and-status)
  loadBalancer:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LoadBalancerStatus (status of load-balancer)
    ingress:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LoadBalancerIngress (load-balancer ingress points)
    - ip:                                                             # string (IP address of ingress point)
      hostname:                                                       # string (hostname of ingress point)


ServiceAccount
==============

ServiceAccount binds together:
* a name, understood by users, and perhaps by peripheral systems, for an identity
* a principal that can be authenticated and authorized
* a set of secrets

kind: ServiceAccount                                                  # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
  deletionTimestamp:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
    [string]:                                                         # string
secrets:                                                              # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectReference (list of secrets that can be used by pods running as this service account)
- kind:                                                               # string (kind of the referent)
  namespace:                                                          # string (namespace of the referent)
  name:                                                               # string (name of the referent)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
imagePullSecrets:                                                     # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (list of references to secrets in the same namespace available for pulling container images)
- name:                                                               # string (name of the referent)


ServiceAccountList
==================

ServiceAccountList is a list of ServiceAccount objects

kind: ServiceAccountList                                              # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ServiceAccount (list of ServiceAccounts)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  secrets:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectReference (list of secrets that can be used by pods running as this service account)
  - kind:                                                             # string (kind of the referent)
    namespace:                                                        # string (namespace of the referent)
    name:                                                             # string (name of the referent)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  imagePullSecrets:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LocalObjectReference (list of references to secrets in the same namespace available for pulling container images)
  - name:                                                             # string (name of the referent)


ServiceList
===========

ServiceList holds a list of services.

kind: ServiceList                                                     # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Service (list of services)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated)
  apiVersion:                                                         # string (version of the schema the object should have)
  metadata:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://docs.k8s.io/api-conventions.md#metadata)
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
    creationTimestamp:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists)
    deletionTimestamp:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects)
      [string]:                                                       # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ServiceSpec (specification of the desired behavior of the service; http://docs.k8s.io/api-conventions.md#spec-and-status)
    ports:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ServicePort (ports exposed by the service)
    - name:                                                           # string (the name of this port; optional if only one port is defined)
      protocol: TCP|UDP                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.Protocol (the protocol used by this port; must be UDP or TCP; TCP if unspecified)
      port:                                                           # int (the port number that is exposed)
      targetPort:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (the port to access on the pods targeted by the service; defaults to the service port)
      nodePort:                                                       # int (the port on each node on which this service is exposed)
    selector:                                                         # map[string]string (label keys and values that must match in order to receive traffic for this service; if empty, all pods are selected, if not specified, endpoints must be manually specified)
      [string]:                                                       # string
    portalIP:                                                         # string
    type: ClusterIP|LoadBalancer|NodePort                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ServiceType (type of this service; must be ClusterIP, NodePort, or LoadBalancer; defaults to ClusterIP)
    deprecatedPublicIPs:                                              # []string (deprecated. externally visible IPs (e.g. load balancers) that should be proxied to this service)
    - [string]                                                        # 
    sessionAffinity: ClientIP|None                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ServiceAffinity (enable client IP based session affinity; must be ClientIP or None; defaults to None)
  status:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ServiceStatus (most recently observed status of the service; populated by the system, read-only; http://docs.k8s.io/api-conventions.md#spec-and-status)
    loadBalancer:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LoadBalancerStatus (status of load-balancer)
      ingress:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.LoadBalancerIngress (load-balancer ingress points)
      - ip:                                                           # string (IP address of ingress point)
        hostname:                                                     # string (hostname of ingress point)


Status
======

Status is a return value for calls that don't return other objects.

kind: Status                                                          # string (kind of object, in CamelCase; cannot be updated)
apiVersion: v1                                                        # string (version of the schema the object should have)
metadata:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.ListMeta (standard list metadata; see http://docs.k8s.io/api-conventions.md#metadata)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://docs.k8s.io/api-conventions.md#concurrency-control-and-consistency)
status:                                                               # string (status of the operation; either Success, or Failure)
message:                                                              # string (human-readable description of the status of this operation)
reason: AlreadyExists|Conflict|Invalid|NotFound|ServerTimeout|        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.StatusReason (machine-readable description of why this operation is in the 'Failure' status; if this value is empty there is no information available; a reason clarifies an HTTP status code but does not override it)
details:                                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.StatusDetails (extended data associated with the reason; each reason may define its own extended details; this field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type)
  name:                                                               # string (the name attribute of the resource associated with the status StatusReason (when there is a single name which can be described))
  kind:                                                               # string (the kind attribute of the resource associated with the status StatusReason; on some operations may differ from the requested resource Kind)
  causes:                                                             # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.StatusCause (the Causes array includes more details associated with the StatusReason failure; not all StatusReasons may provide detailed causes)
  - reason: FieldValueDuplicate|FieldValueInvalid|FieldValueNotFound|FieldValueNotSupported|FieldValueRequired # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1.CauseType (machine-readable description of the cause of the error; if this value is empty there is no information available)
    message:                                                          # string (human-readable description of the cause of the error; this field may be presented as-is to a reader)
    field:                                                            # string (field of the resource that has caused this error, as named by its JSON serialization; may include dot and postfix notation for nested attributes; arrays are zero-indexed; fields may appear more than once in an array of causes due to fields having multiple errors)
  retryAfterSeconds:                                                  # int (the number of seconds before the client should attempt to retry this operation)
code:                                                                 # int (suggested HTTP return code for this status; 0 if not set)



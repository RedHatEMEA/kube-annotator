Binding
=======

Binding ties one object to another. For example, a pod is bound to a node by a scheduler.

kind: Binding                           # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
target:                                 # v1.ObjectReference                      The target object that you want to bind to the standard object.
  kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.


ComponentStatus
===============

ComponentStatus (and ComponentStatusList) holds the cluster validation info.

kind: ComponentStatus                   # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
conditions:                             # []v1.ComponentCondition                 List of component conditions observed
- type:                                 # string                                  Type of condition for a component. Valid value: "Healthy"
  status:                               # string                                  Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
  message:                              # string                                  Message about the condition for a component. For example, information about a health check.
  error:                                # string                                  Condition error code for a component. For example, a health check error code.


ConfigMap
=========

ConfigMap holds configuration data for pods to consume.

kind: ConfigMap                         # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
data:                                   # map[string]string                       Data contains the configuration data. Each key must be a valid DNS_SUBDOMAIN with an optional leading dot.
  [string]:                             # string


DeleteOptions
=============

DeleteOptions may be provided when deleting an API object

kind: DeleteOptions                     # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
gracePeriodSeconds:                     # integer                                 The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
preconditions:                          # v1.Preconditions                        Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
  uid:                                  # types.UID                               Specifies the target UID.
orphanDependents:                       # boolean                                 Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list.


Endpoints
=========

Endpoints is a collection of endpoints that implement the actual service. Example:
  Name: "mysvc",
  Subsets: [
    {
      Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
      Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
    },
    {
      Addresses: [{"ip": "10.10.3.3"}],
      Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
    },
 ]

kind: Endpoints                         # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
subsets:                                # []v1.EndpointSubset                     The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
- addresses:                            # []v1.EndpointAddress                    IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
  - ip:                                 # string                                  The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
    hostname:                           # string                                  The Hostname of this endpoint
    targetRef:                          # v1.ObjectReference                      Reference to object providing the endpoint.
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      namespace:                        # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      apiVersion:                       # string                                  API version of the referent.
      resourceVersion:                  # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      fieldPath:                        # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  notReadyAddresses:                    # []v1.EndpointAddress                    IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
  - ip:                                 # string                                  The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
    hostname:                           # string                                  The Hostname of this endpoint
    targetRef:                          # v1.ObjectReference                      Reference to object providing the endpoint.
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      namespace:                        # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      apiVersion:                       # string                                  API version of the referent.
      resourceVersion:                  # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      fieldPath:                        # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  ports:                                # []v1.EndpointPort                       Port numbers available on the related IP addresses.
  - name:                               # string                                  The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined.
    port:                               # integer                                 The port number of the endpoint.
    protocol:                           # string                                  The IP protocol for this port. Must be UDP or TCP. Default is TCP.


Event
=====

Event is a report of an event somewhere in the cluster.

kind: Event                             # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
involvedObject:                         # v1.ObjectReference                      The object that this event is about.
  kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
reason:                                 # string                                  This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
message:                                # string                                  A human-readable description of the status of this operation.
source:                                 # v1.EventSource                          The component reporting this event. Should be a short machine understandable string.
  component:                            # string                                  Component from which the event is generated.
  host:                                 # string                                  Host name on which the event is generated.
firstTimestamp:                         # string                                  The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
lastTimestamp:                          # string                                  The time at which the most recent occurrence of this event was recorded.
count:                                  # integer                                 The number of times this event has occurred.
type:                                   # string                                  Type of this event (Normal, Warning), new types could be added in the future


LimitRange
==========

LimitRange sets resource usage limits for each kind of resource in a Namespace.

kind: LimitRange                        # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.LimitRangeSpec                       Spec defines the limits enforced. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  limits:                               # []v1.LimitRangeItem                     Limits is the list of LimitRangeItem objects that are enforced.
  - type:                               # string                                  Type of resource that this limit applies to.
    max:                                # map[string]string                       Max usage constraints on this kind by resource name.
      [string]:                         # string
    min:                                # map[string]string                       Min usage constraints on this kind by resource name.
      [string]:                         # string
    default:                            # map[string]string                       Default resource requirement limit value by resource name if resource limit is omitted.
      [string]:                         # string
    defaultRequest:                     # map[string]string                       DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
      [string]:                         # string
    maxLimitRequestRatio:               # map[string]string                       MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
      [string]:                         # string


Namespace
=========

Namespace provides a scope for Names. Use of multiple namespaces is optional.

kind: Namespace                         # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.NamespaceSpec                        Spec defines the behavior of the Namespace. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  finalizers:                           # []v1.FinalizerName                      Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: http://releases.k8s.io/release-1.3/docs/design/namespaces.md#finalizers
status:                                 # v1.NamespaceStatus                      Status describes the current status of a Namespace. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  phase:                                # string                                  Phase is the current lifecycle phase of the namespace. More info: http://releases.k8s.io/release-1.3/docs/design/namespaces.md#phases


Node
====

Node is a worker node in Kubernetes, formerly known as minion. Each node will have a unique identifier in the cache (i.e. in etcd).

kind: Node                              # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.NodeSpec                             Spec defines the behavior of a node. http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  podCIDR:                              # string                                  PodCIDR represents the pod IP range assigned to the node.
  externalID:                           # string                                  External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated.
  providerID:                           # string                                  ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
  unschedulable:                        # boolean                                 Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: http://releases.k8s.io/release-1.3/docs/admin/node.md#manual-node-administration"`
status:                                 # v1.NodeStatus                           Most recently observed status of the node. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  capacity:                             # map[string]string                       Capacity represents the total resources of a node. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#capacity for more details.
    [string]:                           # string
  allocatable:                          # map[string]string                       Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
    [string]:                           # string
  phase:                                # string                                  NodePhase is the recently observed lifecycle phase of the node. More info: http://releases.k8s.io/release-1.3/docs/admin/node.md#node-phase
  conditions:                           # []v1.NodeCondition                      Conditions is an array of current observed node conditions. More info: http://releases.k8s.io/release-1.3/docs/admin/node.md#node-condition
  - type:                               # string                                  Type of node condition.
    status:                             # string                                  Status of the condition, one of True, False, Unknown.
    lastHeartbeatTime:                  # string                                  Last time we got an update on a given condition.
    lastTransitionTime:                 # string                                  Last time the condition transit from one status to another.
    reason:                             # string                                  (brief) reason for the condition's last transition.
    message:                            # string                                  Human readable message indicating details about last transition.
  addresses:                            # []v1.NodeAddress                        List of addresses reachable to the node. Queried from cloud provider, if available. More info: http://releases.k8s.io/release-1.3/docs/admin/node.md#node-addresses
  - type:                               # string                                  Node address type, one of Hostname, ExternalIP or InternalIP.
    address:                            # string                                  The node address.
  daemonEndpoints:                      # v1.NodeDaemonEndpoints                  Endpoints of daemons running on the Node.
    kubeletEndpoint:                    # v1.DaemonEndpoint                       Endpoint on which Kubelet is listening.
      Port:                             # integer                                 Port number of the given endpoint.
  nodeInfo:                             # v1.NodeSystemInfo                       Set of ids/uuids to uniquely identify the node. More info: http://releases.k8s.io/release-1.3/docs/admin/node.md#node-info
    machineID:                          # string                                  Machine ID reported by the node.
    systemUUID:                         # string                                  System UUID reported by the node.
    bootID:                             # string                                  Boot ID reported by the node.
    kernelVersion:                      # string                                  Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
    osImage:                            # string                                  OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
    containerRuntimeVersion:            # string                                  ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
    kubeletVersion:                     # string                                  Kubelet Version reported by the node.
    kubeProxyVersion:                   # string                                  KubeProxy Version reported by the node.
    operatingSystem:                    # string                                  The Operating System reported by the node
    architecture:                       # string                                  The Architecture reported by the node
  images:                               # []v1.ContainerImage                     List of container images on this node
  - names:                              # []string                                Names by which this image is known. e.g. ["gcr.io/google_containers/hyperkube:v1.0.7", "dockerhub.io/google_containers/hyperkube:v1.0.7"]
    - [string]                          # 
    sizeBytes:                          # integer                                 The size of the image in bytes.
  volumesInUse:                         # []v1.UniqueVolumeName                   List of attachable volumes in use (mounted) by the node.
  volumesAttached:                      # []v1.AttachedVolume                     List of volumes that are attached to the node.
  - name:                               # string                                  Name of the attached volume
    devicePath:                         # string                                  DevicePath represents the device path where the volume should be avilable


ObjectReference
===============

ObjectReference contains enough information to let you inspect or modify the referred object.

kind: ObjectReference                   # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
namespace:                              # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
name:                                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
uid:                                    # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
apiVersion: v1                          # string                                  API version of the referent.
resourceVersion:                        # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
fieldPath:                              # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.


OwnerReference
==============

OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.

apiVersion: v1                          # string                                  API version of the referent.
kind: OwnerReference                    # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
name:                                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
uid:                                    # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
controller:                             # boolean                                 If true, this reference points to the managing controller.


PersistentVolume
================

PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md

kind: PersistentVolume                  # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.PersistentVolumeSpec                 Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#persistent-volumes
  capacity:                             # map[string]string                       A description of the persistent volume's resources and capacity. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#capacity
    [string]:                           # string
  gcePersistentDisk:                    # v1.GCEPersistentDiskVolumeSource        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
    pdName:                             # string                                  Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
    fsType:                             # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
    partition:                          # integer                                 The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
    readOnly:                           # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
  awsElasticBlockStore:                 # v1.AWSElasticBlockStoreVolumeSource     AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
    volumeID:                           # string                                  Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
    fsType:                             # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
    partition:                          # integer                                 The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
    readOnly:                           # boolean                                 Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
  hostPath:                             # v1.HostPathVolumeSource                 HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#hostpath
    path:                               # string                                  Path of the directory on the host. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#hostpath
  glusterfs:                            # v1.GlusterfsVolumeSource                Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md
    endpoints:                          # string                                  EndpointsName is the endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
    path:                               # string                                  Path is the Glusterfs volume path. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
    readOnly:                           # boolean                                 ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
  nfs:                                  # v1.NFSVolumeSource                      NFS represents an NFS mount on the host. Provisioned by an admin. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
    server:                             # string                                  Server is the hostname or IP address of the NFS server. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
    path:                               # string                                  Path that is exported by the NFS server. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
    readOnly:                           # boolean                                 ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
  rbd:                                  # v1.RBDVolumeSource                      RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md
    monitors:                           # []string                                A collection of Ceph monitors. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
    - [string]                          # 
    image:                              # string                                  The rados image name. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
    fsType:                             # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#rbd
    pool:                               # string                                  The rados pool name. Default is rbd. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it.
    user:                               # string                                  The rados user name. Default is admin. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
    keyring:                            # string                                  Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
    secretRef:                          # v1.LocalObjectReference                 SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    readOnly:                           # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
  iscsi:                                # v1.ISCSIVolumeSource                    ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
    targetPortal:                       # string                                  iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    iqn:                                # string                                  Target iSCSI Qualified Name.
    lun:                                # integer                                 iSCSI target lun number.
    iscsiInterface:                     # string                                  Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
    fsType:                             # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#iscsi
    readOnly:                           # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
  cinder:                               # v1.CinderVolumeSource                   Cinder represents a cinder volume attached and mounted on kubelets host machine More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
    volumeID:                           # string                                  volume id used to identify the volume in cinder More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
    fsType:                             # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
    readOnly:                           # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
  cephfs:                               # v1.CephFSVolumeSource                   CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    monitors:                           # []string                                Required: Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
    - [string]                          # 
    path:                               # string                                  Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    user:                               # string                                  Optional: User is the rados user name, default is admin More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
    secretFile:                         # string                                  Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
    secretRef:                          # v1.LocalObjectReference                 Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    readOnly:                           # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
  fc:                                   # v1.FCVolumeSource                       FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    targetWWNs:                         # []string                                Required: FC target world wide names (WWNs)
    - [string]                          # 
    lun:                                # integer                                 Required: FC target lun number
    fsType:                             # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    readOnly:                           # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  flocker:                              # v1.FlockerVolumeSource                  Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
    datasetName:                        # string                                  Required: the volume name. This is going to be store on metadata -> name on the payload for Flocker
  flexVolume:                           # v1.FlexVolumeSource                     FlexVolume represents a generic volume resource that is provisioned/attached using a exec based plugin. This is an alpha feature and may change in future.
    driver:                             # string                                  Driver is the name of the driver to use for this volume.
    fsType:                             # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
    secretRef:                          # v1.LocalObjectReference                 Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    readOnly:                           # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    options:                            # map[string]string                       Optional: Extra command options if any.
      [string]:                         # string
  azureFile:                            # v1.AzureFileVolumeSource                AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    secretName:                         # string                                  the name of secret that contains Azure Storage Account Name and Key
    shareName:                          # string                                  Share Name
    readOnly:                           # boolean                                 Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  vsphereVolume:                        # v1.VsphereVirtualDiskVolumeSource       VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    volumePath:                         # string                                  Path that identifies vSphere volume vmdk
    fsType:                             # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
  accessModes:                          # []v1.PersistentVolumeAccessMode         AccessModes contains all ways the volume can be mounted. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#access-modes
  claimRef:                             # v1.ObjectReference                      ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#binding
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    namespace:                          # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    apiVersion:                         # string                                  API version of the referent.
    resourceVersion:                    # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
    fieldPath:                          # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  persistentVolumeReclaimPolicy:        # string                                  What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recyling must be supported by the volume plugin underlying this persistent volume. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#recycling-policy
status:                                 # v1.PersistentVolumeStatus               Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#persistent-volumes
  phase:                                # string                                  Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#phase
  message:                              # string                                  A human-readable message indicating details about why the volume is in this state.
  reason:                               # string                                  Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.


PersistentVolumeClaim
=====================

PersistentVolumeClaim is a user's request for and claim to a persistent volume

kind: PersistentVolumeClaim             # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.PersistentVolumeClaimSpec            Spec defines the desired characteristics of a volume requested by a pod author. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#persistentvolumeclaims
  accessModes:                          # []v1.PersistentVolumeAccessMode         AccessModes contains the desired access modes the volume should have. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#access-modes-1
  selector:                             # unversioned.LabelSelector               A label query over volumes to consider for binding.
    matchLabels:                        # map[string]string                       matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
      [string]:                         # string
    matchExpressions:                   # []unversioned.LabelSelectorRequirement  matchExpressions is a list of label selector requirements. The requirements are ANDed.
    - key:                              # string                                  key is the label key that the selector applies to.
      operator:                         # string                                  operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist.
      values:                           # []string                                values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
      - [string]                        # 
  resources:                            # v1.ResourceRequirements                 Resources represents the minimum resources the volume should have. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#resources
    limits:                             # map[string]string                       Limits describes the maximum amount of compute resources allowed. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
      [string]:                         # string
    requests:                           # map[string]string                       Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
      [string]:                         # string
  volumeName:                           # string                                  VolumeName is the binding reference to the PersistentVolume backing this claim.
status:                                 # v1.PersistentVolumeClaimStatus          Status represents the current information/status of a persistent volume claim. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#persistentvolumeclaims
  phase:                                # string                                  Phase represents the current phase of PersistentVolumeClaim.
  accessModes:                          # []v1.PersistentVolumeAccessMode         AccessModes contains the actual access modes the volume backing the PVC has. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#access-modes-1
  capacity:                             # map[string]string                       Represents the actual resources of the underlying volume.
    [string]:                           # string


Pod
===

Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.

kind: Pod                               # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.PodSpec                              Specification of the desired behavior of the pod. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  volumes:                              # []v1.Volume                             List of volumes that can be mounted by containers belonging to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md
  - name:                               # string                                  Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    hostPath:                           # v1.HostPathVolumeSource                 HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#hostpath
      path:                             # string                                  Path of the directory on the host. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#hostpath
    emptyDir:                           # v1.EmptyDirVolumeSource                 EmptyDir represents a temporary directory that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#emptydir
      medium:                           # string                                  What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#emptydir
    gcePersistentDisk:                  # v1.GCEPersistentDiskVolumeSource        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
      pdName:                           # string                                  Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
      fsType:                           # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
      partition:                        # integer                                 The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
      readOnly:                         # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
    awsElasticBlockStore:               # v1.AWSElasticBlockStoreVolumeSource     AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
      volumeID:                         # string                                  Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
      fsType:                           # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
      partition:                        # integer                                 The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
      readOnly:                         # boolean                                 Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
    gitRepo:                            # v1.GitRepoVolumeSource                  GitRepo represents a git repository at a particular revision.
      repository:                       # string                                  Repository URL
      revision:                         # string                                  Commit hash for the specified revision.
      directory:                        # string                                  Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
    secret:                             # v1.SecretVolumeSource                   Secret represents a secret that should populate this volume. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#secrets
      secretName:                       # string                                  Name of the secret in the pod's namespace to use. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#secrets
      items:                            # []v1.KeyToPath                          If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
      - key:                            # string                                  The key to project.
        path:                           # string                                  The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    nfs:                                # v1.NFSVolumeSource                      NFS represents an NFS mount on the host that shares a pod's lifetime More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
      server:                           # string                                  Server is the hostname or IP address of the NFS server. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
      path:                             # string                                  Path that is exported by the NFS server. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
      readOnly:                         # boolean                                 ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
    iscsi:                              # v1.ISCSIVolumeSource                    ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/examples/iscsi/README.md
      targetPortal:                     # string                                  iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
      iqn:                              # string                                  Target iSCSI Qualified Name.
      lun:                              # integer                                 iSCSI target lun number.
      iscsiInterface:                   # string                                  Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
      fsType:                           # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#iscsi
      readOnly:                         # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    glusterfs:                          # v1.GlusterfsVolumeSource                Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md
      endpoints:                        # string                                  EndpointsName is the endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
      path:                             # string                                  Path is the Glusterfs volume path. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
      readOnly:                         # boolean                                 ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
    persistentVolumeClaim:              # v1.PersistentVolumeClaimVolumeSource    PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#persistentvolumeclaims
      claimName:                        # string                                  ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#persistentvolumeclaims
      readOnly:                         # boolean                                 Will force the ReadOnly setting in VolumeMounts. Default false.
    rbd:                                # v1.RBDVolumeSource                      RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md
      monitors:                         # []string                                A collection of Ceph monitors. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
      - [string]                        # 
      image:                            # string                                  The rados image name. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
      fsType:                           # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#rbd
      pool:                             # string                                  The rados pool name. Default is rbd. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it.
      user:                             # string                                  The rados user name. Default is admin. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
      keyring:                          # string                                  Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
      secretRef:                        # v1.LocalObjectReference                 SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      readOnly:                         # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
    flexVolume:                         # v1.FlexVolumeSource                     FlexVolume represents a generic volume resource that is provisioned/attached using a exec based plugin. This is an alpha feature and may change in future.
      driver:                           # string                                  Driver is the name of the driver to use for this volume.
      fsType:                           # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
      secretRef:                        # v1.LocalObjectReference                 Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      readOnly:                         # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
      options:                          # map[string]string                       Optional: Extra command options if any.
        [string]:                       # string
    cinder:                             # v1.CinderVolumeSource                   Cinder represents a cinder volume attached and mounted on kubelets host machine More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
      volumeID:                         # string                                  volume id used to identify the volume in cinder More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
      fsType:                           # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
      readOnly:                         # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
    cephfs:                             # v1.CephFSVolumeSource                   CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
      monitors:                         # []string                                Required: Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
      - [string]                        # 
      path:                             # string                                  Optional: Used as the mounted root, rather than the full Ceph tree, default is /
      user:                             # string                                  Optional: User is the rados user name, default is admin More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
      secretFile:                       # string                                  Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
      secretRef:                        # v1.LocalObjectReference                 Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      readOnly:                         # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
    flocker:                            # v1.FlockerVolumeSource                  Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
      datasetName:                      # string                                  Required: the volume name. This is going to be store on metadata -> name on the payload for Flocker
    downwardAPI:                        # v1.DownwardAPIVolumeSource              DownwardAPI represents downward API about the pod that should populate this volume
      items:                            # []v1.DownwardAPIVolumeFile              Items is a list of downward API volume file
      - path:                           # string                                  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        fieldRef:                       # v1.ObjectFieldSelector                  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
          apiVersion:                   # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
          fieldPath:                    # string                                  Path of the field to select in the specified API version.
        resourceFieldRef:               # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
          containerName:                # string                                  Container name: required for volumes, optional for env vars
          resource:                     # string                                  Required: resource to select
          divisor:                      # string                                  Specifies the output format of the exposed resources, defaults to "1"
    fc:                                 # v1.FCVolumeSource                       FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
      targetWWNs:                       # []string                                Required: FC target world wide names (WWNs)
      - [string]                        # 
      lun:                              # integer                                 Required: FC target lun number
      fsType:                           # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
      readOnly:                         # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    azureFile:                          # v1.AzureFileVolumeSource                AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
      secretName:                       # string                                  the name of secret that contains Azure Storage Account Name and Key
      shareName:                        # string                                  Share Name
      readOnly:                         # boolean                                 Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    configMap:                          # v1.ConfigMapVolumeSource                ConfigMap represents a configMap that should populate this volume
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      items:                            # []v1.KeyToPath                          If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
      - key:                            # string                                  The key to project.
        path:                           # string                                  The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    vsphereVolume:                      # v1.VsphereVirtualDiskVolumeSource       VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
      volumePath:                       # string                                  Path that identifies vSphere volume vmdk
      fsType:                           # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    metadata:                           # v1.DeprecatedDownwardAPIVolumeSource    Metadata represents metadata about the pod that should populate this volume Deprecated: Use downwardAPI instead.
      items:                            # []v1.DeprecatedDownwardAPIVolumeFile    Items is a list of downward API volume file
      - name:                           # string                                  Required: Name is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        fieldRef:                       # v1.ObjectFieldSelector                  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
          apiVersion:                   # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
          fieldPath:                    # string                                  Path of the field to select in the specified API version.
        resourceFieldRef:               # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
          containerName:                # string                                  Container name: required for volumes, optional for env vars
          resource:                     # string                                  Required: resource to select
          divisor:                      # string                                  Specifies the output format of the exposed resources, defaults to "1"
  containers:                           # []v1.Container                          List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/containers.md
  - name:                               # string                                  Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
    image:                              # string                                  Docker image name. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md
    command:                            # []string                                Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/containers.md#containers-and-commands
    - [string]                          # 
    args:                               # []string                                Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/containers.md#containers-and-commands
    - [string]                          # 
    workingDir:                         # string                                  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
    ports:                              # []v1.ContainerPort                      List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
    - name:                             # string                                  If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
      hostPort:                         # integer                                 Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
      containerPort:                    # integer                                 Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
      protocol:                         # string                                  Protocol for port. Must be UDP or TCP. Defaults to "TCP".
      hostIP:                           # string                                  What host IP to bind the external port to.
    env:                                # []v1.EnvVar                             List of environment variables to set in the container. Cannot be updated.
    - name:                             # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
      value:                            # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
      valueFrom:                        # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
        fieldRef:                       # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
          apiVersion:                   # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
          fieldPath:                    # string                                  Path of the field to select in the specified API version.
        resourceFieldRef:               # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
          containerName:                # string                                  Container name: required for volumes, optional for env vars
          resource:                     # string                                  Required: resource to select
          divisor:                      # string                                  Specifies the output format of the exposed resources, defaults to "1"
        configMapKeyRef:                # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
          name:                         # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          key:                          # string                                  The key to select.
        secretKeyRef:                   # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
          name:                         # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          key:                          # string                                  The key of the secret to select from.  Must be a valid secret key.
    resources:                          # v1.ResourceRequirements                 Compute Resources required by this container. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#resources
      limits:                           # map[string]string                       Limits describes the maximum amount of compute resources allowed. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
        [string]:                       # string
      requests:                         # map[string]string                       Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
        [string]:                       # string
    volumeMounts:                       # []v1.VolumeMount                        Pod volumes to mount into the container's filesystem. Cannot be updated.
    - name:                             # string                                  This must match the Name of a Volume.
      readOnly:                         # boolean                                 Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
      mountPath:                        # string                                  Path within the container at which the volume should be mounted.  Must not contain ':'.
      subPath:                          # string                                  Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
    livenessProbe:                      # v1.Probe                                Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
      exec:                             # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
        command:                        # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        - [string]                      # 
      httpGet:                          # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
        path:                           # string                                  Path to access on the HTTP server.
        port:                           # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        host:                           # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        scheme:                         # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
        httpHeaders:                    # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
        - name:                         # string                                  The header field name
          value:                        # string                                  The header field value
      tcpSocket:                        # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        port:                           # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
      initialDelaySeconds:              # integer                                 Number of seconds after the container has started before liveness probes are initiated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
      timeoutSeconds:                   # integer                                 Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
      periodSeconds:                    # integer                                 How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
      successThreshold:                 # integer                                 Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
      failureThreshold:                 # integer                                 Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    readinessProbe:                     # v1.Probe                                Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
      exec:                             # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
        command:                        # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        - [string]                      # 
      httpGet:                          # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
        path:                           # string                                  Path to access on the HTTP server.
        port:                           # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        host:                           # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        scheme:                         # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
        httpHeaders:                    # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
        - name:                         # string                                  The header field name
          value:                        # string                                  The header field value
      tcpSocket:                        # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        port:                           # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
      initialDelaySeconds:              # integer                                 Number of seconds after the container has started before liveness probes are initiated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
      timeoutSeconds:                   # integer                                 Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
      periodSeconds:                    # integer                                 How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
      successThreshold:                 # integer                                 Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
      failureThreshold:                 # integer                                 Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    lifecycle:                          # v1.Lifecycle                            Actions that the management system should take in response to container lifecycle events. Cannot be updated.
      postStart:                        # v1.Handler                              PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: http://releases.k8s.io/release-1.3/docs/user-guide/container-environment.md#hook-details
        exec:                           # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
          command:                      # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          - [string]                    # 
        httpGet:                        # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
          path:                         # string                                  Path to access on the HTTP server.
          port:                         # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          host:                         # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          scheme:                       # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
          httpHeaders:                  # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
          - name:                       # string                                  The header field name
            value:                      # string                                  The header field value
        tcpSocket:                      # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
          port:                         # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
      preStop:                          # v1.Handler                              PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: http://releases.k8s.io/release-1.3/docs/user-guide/container-environment.md#hook-details
        exec:                           # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
          command:                      # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          - [string]                    # 
        httpGet:                        # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
          path:                         # string                                  Path to access on the HTTP server.
          port:                         # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          host:                         # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          scheme:                       # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
          httpHeaders:                  # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
          - name:                       # string                                  The header field name
            value:                      # string                                  The header field value
        tcpSocket:                      # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
          port:                         # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    terminationMessagePath:             # string                                  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
    imagePullPolicy:                    # string                                  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md#updating-images
    securityContext:                    # v1.SecurityContext                      Security options the pod should run with. More info: http://releases.k8s.io/release-1.3/docs/design/security_context.md
      capabilities:                     # v1.Capabilities                         The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        add:                            # []v1.Capability                         Added capabilities
        drop:                           # []v1.Capability                         Removed capabilities
      privileged:                       # boolean                                 Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
      seLinuxOptions:                   # v1.SELinuxOptions                       The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        user:                           # string                                  User is a SELinux user label that applies to the container.
        role:                           # string                                  Role is a SELinux role label that applies to the container.
        type:                           # string                                  Type is a SELinux type label that applies to the container.
        level:                          # string                                  Level is SELinux level label that applies to the container.
      runAsUser:                        # integer                                 The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
      runAsNonRoot:                     # boolean                                 Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
      readOnlyRootFilesystem:           # boolean                                 Whether this container has a read-only root filesystem. Default is false.
    stdin:                              # boolean                                 Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
    stdinOnce:                          # boolean                                 Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
    tty:                                # boolean                                 Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
  restartPolicy:                        # string                                  Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#restartpolicy
  terminationGracePeriodSeconds:        # integer                                 Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
  activeDeadlineSeconds:                # integer                                 Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
  dnsPolicy:                            # string                                  Set DNS policy for containers within the pod. One of 'ClusterFirst' or 'Default'. Defaults to "ClusterFirst".
  nodeSelector:                         # map[string]string                       NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://releases.k8s.io/release-1.3/docs/user-guide/node-selection/README.md
    [string]:                           # string
  host:                                 # string                                  A request to schedule this pod onto a specific node Deprecated: Use nodeName instead.
  serviceAccountName:                   # string                                  ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/release-1.3/docs/design/service_accounts.md
  serviceAccount:                       # string                                  DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
  nodeName:                             # string                                  NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
  hostNetwork:                          # boolean                                 Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
  hostPID:                              # boolean                                 Use the host's pid namespace. Optional: Default to false.
  hostIPC:                              # boolean                                 Use the host's ipc namespace. Optional: Default to false.
  securityContext:                      # v1.PodSecurityContext                   SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
    seLinuxOptions:                     # v1.SELinuxOptions                       The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
      user:                             # string                                  User is a SELinux user label that applies to the container.
      role:                             # string                                  Role is a SELinux role label that applies to the container.
      type:                             # string                                  Type is a SELinux type label that applies to the container.
      level:                            # string                                  Level is SELinux level label that applies to the container.
    runAsUser:                          # integer                                 The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
    runAsNonRoot:                       # boolean                                 Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    supplementalGroups:                 # []integer                               A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
    - [integer]                         # 
    fsGroup:                            # integer                                 A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw 
  imagePullSecrets:                     # []v1.LocalObjectReference               ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md#specifying-imagepullsecrets-on-a-pod
  - name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  hostname:                             # string                                  Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
  subdomain:                            # string                                  If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
status:                                 # v1.PodStatus                            Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  phase:                                # string                                  Current condition of the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#pod-phase
  conditions:                           # []v1.PodCondition                       Current service state of pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#pod-conditions
  - type:                               # string                                  Type is the type of the condition. Currently only Ready. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#pod-conditions
    status:                             # string                                  Status is the status of the condition. Can be True, False, Unknown. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#pod-conditions
    lastProbeTime:                      # string                                  Last time we probed the condition.
    lastTransitionTime:                 # string                                  Last time the condition transitioned from one status to another.
    reason:                             # string                                  Unique, one-word, CamelCase reason for the condition's last transition.
    message:                            # string                                  Human-readable message indicating details about last transition.
  message:                              # string                                  A human readable message indicating details about why the pod is in this condition.
  reason:                               # string                                  A brief CamelCase message indicating details about why the pod is in this state. e.g. 'OutOfDisk'
  hostIP:                               # string                                  IP address of the host to which the pod is assigned. Empty if not yet scheduled.
  podIP:                                # string                                  IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
  startTime:                            # string                                  RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
  containerStatuses:                    # []v1.ContainerStatus                    The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-statuses
  - name:                               # string                                  This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
    state:                              # v1.ContainerState                       Details about the container's current condition.
      waiting:                          # v1.ContainerStateWaiting                Details about a waiting container
        reason:                         # string                                  (brief) reason the container is not yet running.
        message:                        # string                                  Message regarding why the container is not yet running.
      running:                          # v1.ContainerStateRunning                Details about a running container
        startedAt:                      # string                                  Time at which the container was last (re-)started
      terminated:                       # v1.ContainerStateTerminated             Details about a terminated container
        exitCode:                       # integer                                 Exit status from the last termination of the container
        signal:                         # integer                                 Signal from the last termination of the container
        reason:                         # string                                  (brief) reason from the last termination of the container
        message:                        # string                                  Message regarding the last termination of the container
        startedAt:                      # string                                  Time at which previous execution of the container started
        finishedAt:                     # string                                  Time at which the container last terminated
        containerID:                    # string                                  Container's ID in the format 'docker://<container_id>'
    lastState:                          # v1.ContainerState                       Details about the container's last termination condition.
      waiting:                          # v1.ContainerStateWaiting                Details about a waiting container
        reason:                         # string                                  (brief) reason the container is not yet running.
        message:                        # string                                  Message regarding why the container is not yet running.
      running:                          # v1.ContainerStateRunning                Details about a running container
        startedAt:                      # string                                  Time at which the container was last (re-)started
      terminated:                       # v1.ContainerStateTerminated             Details about a terminated container
        exitCode:                       # integer                                 Exit status from the last termination of the container
        signal:                         # integer                                 Signal from the last termination of the container
        reason:                         # string                                  (brief) reason from the last termination of the container
        message:                        # string                                  Message regarding the last termination of the container
        startedAt:                      # string                                  Time at which previous execution of the container started
        finishedAt:                     # string                                  Time at which the container last terminated
        containerID:                    # string                                  Container's ID in the format 'docker://<container_id>'
    ready:                              # boolean                                 Specifies whether the container has passed its readiness probe.
    restartCount:                       # integer                                 The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
    image:                              # string                                  The image the container is running. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md
    imageID:                            # string                                  ImageID of the container's image.
    containerID:                        # string                                  Container's ID in the format 'docker://<container_id>'. More info: http://releases.k8s.io/release-1.3/docs/user-guide/container-environment.md#container-information


PodTemplate
===========

PodTemplate describes a template for creating copies of a predefined pod.

kind: PodTemplate                       # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
template:                               # v1.PodTemplateSpec                      Template defines the pods that will be created from this pod template. http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  metadata:                             # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
    name:                               # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    generateName:                       # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
    namespace:                          # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
    selfLink:                           # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
    uid:                                # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    resourceVersion:                    # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
    generation:                         # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
    creationTimestamp:                  # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
    deletionTimestamp:                  # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
    deletionGracePeriodSeconds:         # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
    labels:                             # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
      [string]:                         # string
    annotations:                        # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
      [string]:                         # string
    ownerReferences:                    # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
    - apiVersion:                       # string                                  API version of the referent.
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      controller:                       # boolean                                 If true, this reference points to the managing controller.
    finalizers:                         # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
    - [string]                          # 
  spec:                                 # v1.PodSpec                              Specification of the desired behavior of the pod. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
    volumes:                            # []v1.Volume                             List of volumes that can be mounted by containers belonging to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md
    - name:                             # string                                  Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      hostPath:                         # v1.HostPathVolumeSource                 HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#hostpath
        path:                           # string                                  Path of the directory on the host. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#hostpath
      emptyDir:                         # v1.EmptyDirVolumeSource                 EmptyDir represents a temporary directory that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#emptydir
        medium:                         # string                                  What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#emptydir
      gcePersistentDisk:                # v1.GCEPersistentDiskVolumeSource        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
        pdName:                         # string                                  Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
        fsType:                         # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
        partition:                      # integer                                 The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
        readOnly:                       # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
      awsElasticBlockStore:             # v1.AWSElasticBlockStoreVolumeSource     AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
        volumeID:                       # string                                  Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
        fsType:                         # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
        partition:                      # integer                                 The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        readOnly:                       # boolean                                 Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
      gitRepo:                          # v1.GitRepoVolumeSource                  GitRepo represents a git repository at a particular revision.
        repository:                     # string                                  Repository URL
        revision:                       # string                                  Commit hash for the specified revision.
        directory:                      # string                                  Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
      secret:                           # v1.SecretVolumeSource                   Secret represents a secret that should populate this volume. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#secrets
        secretName:                     # string                                  Name of the secret in the pod's namespace to use. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#secrets
        items:                          # []v1.KeyToPath                          If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        - key:                          # string                                  The key to project.
          path:                         # string                                  The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
      nfs:                              # v1.NFSVolumeSource                      NFS represents an NFS mount on the host that shares a pod's lifetime More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
        server:                         # string                                  Server is the hostname or IP address of the NFS server. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
        path:                           # string                                  Path that is exported by the NFS server. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
        readOnly:                       # boolean                                 ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
      iscsi:                            # v1.ISCSIVolumeSource                    ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/examples/iscsi/README.md
        targetPortal:                   # string                                  iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        iqn:                            # string                                  Target iSCSI Qualified Name.
        lun:                            # integer                                 iSCSI target lun number.
        iscsiInterface:                 # string                                  Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
        fsType:                         # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#iscsi
        readOnly:                       # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
      glusterfs:                        # v1.GlusterfsVolumeSource                Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md
        endpoints:                      # string                                  EndpointsName is the endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
        path:                           # string                                  Path is the Glusterfs volume path. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
        readOnly:                       # boolean                                 ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
      persistentVolumeClaim:            # v1.PersistentVolumeClaimVolumeSource    PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#persistentvolumeclaims
        claimName:                      # string                                  ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#persistentvolumeclaims
        readOnly:                       # boolean                                 Will force the ReadOnly setting in VolumeMounts. Default false.
      rbd:                              # v1.RBDVolumeSource                      RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md
        monitors:                       # []string                                A collection of Ceph monitors. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
        - [string]                      # 
        image:                          # string                                  The rados image name. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
        fsType:                         # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#rbd
        pool:                           # string                                  The rados pool name. Default is rbd. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it.
        user:                           # string                                  The rados user name. Default is admin. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
        keyring:                        # string                                  Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
        secretRef:                      # v1.LocalObjectReference                 SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
          name:                         # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        readOnly:                       # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
      flexVolume:                       # v1.FlexVolumeSource                     FlexVolume represents a generic volume resource that is provisioned/attached using a exec based plugin. This is an alpha feature and may change in future.
        driver:                         # string                                  Driver is the name of the driver to use for this volume.
        fsType:                         # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        secretRef:                      # v1.LocalObjectReference                 Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
          name:                         # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        readOnly:                       # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        options:                        # map[string]string                       Optional: Extra command options if any.
          [string]:                     # string
      cinder:                           # v1.CinderVolumeSource                   Cinder represents a cinder volume attached and mounted on kubelets host machine More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
        volumeID:                       # string                                  volume id used to identify the volume in cinder More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
        fsType:                         # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
        readOnly:                       # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
      cephfs:                           # v1.CephFSVolumeSource                   CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        monitors:                       # []string                                Required: Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
        - [string]                      # 
        path:                           # string                                  Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        user:                           # string                                  Optional: User is the rados user name, default is admin More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
        secretFile:                     # string                                  Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
        secretRef:                      # v1.LocalObjectReference                 Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
          name:                         # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        readOnly:                       # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
      flocker:                          # v1.FlockerVolumeSource                  Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        datasetName:                    # string                                  Required: the volume name. This is going to be store on metadata -> name on the payload for Flocker
      downwardAPI:                      # v1.DownwardAPIVolumeSource              DownwardAPI represents downward API about the pod that should populate this volume
        items:                          # []v1.DownwardAPIVolumeFile              Items is a list of downward API volume file
        - path:                         # string                                  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
          fieldRef:                     # v1.ObjectFieldSelector                  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
            apiVersion:                 # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
            fieldPath:                  # string                                  Path of the field to select in the specified API version.
          resourceFieldRef:             # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
            containerName:              # string                                  Container name: required for volumes, optional for env vars
            resource:                   # string                                  Required: resource to select
            divisor:                    # string                                  Specifies the output format of the exposed resources, defaults to "1"
      fc:                               # v1.FCVolumeSource                       FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        targetWWNs:                     # []string                                Required: FC target world wide names (WWNs)
        - [string]                      # 
        lun:                            # integer                                 Required: FC target lun number
        fsType:                         # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        readOnly:                       # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
      azureFile:                        # v1.AzureFileVolumeSource                AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        secretName:                     # string                                  the name of secret that contains Azure Storage Account Name and Key
        shareName:                      # string                                  Share Name
        readOnly:                       # boolean                                 Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
      configMap:                        # v1.ConfigMapVolumeSource                ConfigMap represents a configMap that should populate this volume
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        items:                          # []v1.KeyToPath                          If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
        - key:                          # string                                  The key to project.
          path:                         # string                                  The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
      vsphereVolume:                    # v1.VsphereVirtualDiskVolumeSource       VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        volumePath:                     # string                                  Path that identifies vSphere volume vmdk
        fsType:                         # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
      metadata:                         # v1.DeprecatedDownwardAPIVolumeSource    Metadata represents metadata about the pod that should populate this volume Deprecated: Use downwardAPI instead.
        items:                          # []v1.DeprecatedDownwardAPIVolumeFile    Items is a list of downward API volume file
        - name:                         # string                                  Required: Name is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
          fieldRef:                     # v1.ObjectFieldSelector                  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
            apiVersion:                 # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
            fieldPath:                  # string                                  Path of the field to select in the specified API version.
          resourceFieldRef:             # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
            containerName:              # string                                  Container name: required for volumes, optional for env vars
            resource:                   # string                                  Required: resource to select
            divisor:                    # string                                  Specifies the output format of the exposed resources, defaults to "1"
    containers:                         # []v1.Container                          List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/containers.md
    - name:                             # string                                  Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
      image:                            # string                                  Docker image name. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md
      command:                          # []string                                Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/containers.md#containers-and-commands
      - [string]                        # 
      args:                             # []string                                Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/containers.md#containers-and-commands
      - [string]                        # 
      workingDir:                       # string                                  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
      ports:                            # []v1.ContainerPort                      List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
      - name:                           # string                                  If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        hostPort:                       # integer                                 Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        containerPort:                  # integer                                 Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        protocol:                       # string                                  Protocol for port. Must be UDP or TCP. Defaults to "TCP".
        hostIP:                         # string                                  What host IP to bind the external port to.
      env:                              # []v1.EnvVar                             List of environment variables to set in the container. Cannot be updated.
      - name:                           # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
        value:                          # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        valueFrom:                      # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
          fieldRef:                     # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
            apiVersion:                 # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
            fieldPath:                  # string                                  Path of the field to select in the specified API version.
          resourceFieldRef:             # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
            containerName:              # string                                  Container name: required for volumes, optional for env vars
            resource:                   # string                                  Required: resource to select
            divisor:                    # string                                  Specifies the output format of the exposed resources, defaults to "1"
          configMapKeyRef:              # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key to select.
          secretKeyRef:                 # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key of the secret to select from.  Must be a valid secret key.
      resources:                        # v1.ResourceRequirements                 Compute Resources required by this container. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#resources
        limits:                         # map[string]string                       Limits describes the maximum amount of compute resources allowed. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
          [string]:                     # string
        requests:                       # map[string]string                       Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
          [string]:                     # string
      volumeMounts:                     # []v1.VolumeMount                        Pod volumes to mount into the container's filesystem. Cannot be updated.
      - name:                           # string                                  This must match the Name of a Volume.
        readOnly:                       # boolean                                 Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        mountPath:                      # string                                  Path within the container at which the volume should be mounted.  Must not contain ':'.
        subPath:                        # string                                  Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
      livenessProbe:                    # v1.Probe                                Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
        exec:                           # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
          command:                      # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          - [string]                    # 
        httpGet:                        # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
          path:                         # string                                  Path to access on the HTTP server.
          port:                         # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          host:                         # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          scheme:                       # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
          httpHeaders:                  # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
          - name:                       # string                                  The header field name
            value:                      # string                                  The header field value
        tcpSocket:                      # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
          port:                         # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        initialDelaySeconds:            # integer                                 Number of seconds after the container has started before liveness probes are initiated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
        timeoutSeconds:                 # integer                                 Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
        periodSeconds:                  # integer                                 How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        successThreshold:               # integer                                 Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
        failureThreshold:               # integer                                 Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
      readinessProbe:                   # v1.Probe                                Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
        exec:                           # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
          command:                      # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          - [string]                    # 
        httpGet:                        # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
          path:                         # string                                  Path to access on the HTTP server.
          port:                         # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          host:                         # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          scheme:                       # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
          httpHeaders:                  # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
          - name:                       # string                                  The header field name
            value:                      # string                                  The header field value
        tcpSocket:                      # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
          port:                         # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        initialDelaySeconds:            # integer                                 Number of seconds after the container has started before liveness probes are initiated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
        timeoutSeconds:                 # integer                                 Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
        periodSeconds:                  # integer                                 How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        successThreshold:               # integer                                 Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
        failureThreshold:               # integer                                 Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
      lifecycle:                        # v1.Lifecycle                            Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        postStart:                      # v1.Handler                              PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: http://releases.k8s.io/release-1.3/docs/user-guide/container-environment.md#hook-details
          exec:                         # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
            command:                    # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            - [string]                  # 
          httpGet:                      # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
            path:                       # string                                  Path to access on the HTTP server.
            port:                       # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            host:                       # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            scheme:                     # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
            httpHeaders:                # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
            - name:                     # string                                  The header field name
              value:                    # string                                  The header field value
          tcpSocket:                    # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
            port:                       # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        preStop:                        # v1.Handler                              PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: http://releases.k8s.io/release-1.3/docs/user-guide/container-environment.md#hook-details
          exec:                         # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
            command:                    # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            - [string]                  # 
          httpGet:                      # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
            path:                       # string                                  Path to access on the HTTP server.
            port:                       # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            host:                       # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            scheme:                     # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
            httpHeaders:                # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
            - name:                     # string                                  The header field name
              value:                    # string                                  The header field value
          tcpSocket:                    # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
            port:                       # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
      terminationMessagePath:           # string                                  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
      imagePullPolicy:                  # string                                  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md#updating-images
      securityContext:                  # v1.SecurityContext                      Security options the pod should run with. More info: http://releases.k8s.io/release-1.3/docs/design/security_context.md
        capabilities:                   # v1.Capabilities                         The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
          add:                          # []v1.Capability                         Added capabilities
          drop:                         # []v1.Capability                         Removed capabilities
        privileged:                     # boolean                                 Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        seLinuxOptions:                 # v1.SELinuxOptions                       The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          user:                         # string                                  User is a SELinux user label that applies to the container.
          role:                         # string                                  Role is a SELinux role label that applies to the container.
          type:                         # string                                  Type is a SELinux type label that applies to the container.
          level:                        # string                                  Level is SELinux level label that applies to the container.
        runAsUser:                      # integer                                 The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        runAsNonRoot:                   # boolean                                 Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        readOnlyRootFilesystem:         # boolean                                 Whether this container has a read-only root filesystem. Default is false.
      stdin:                            # boolean                                 Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
      stdinOnce:                        # boolean                                 Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
      tty:                              # boolean                                 Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
    restartPolicy:                      # string                                  Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#restartpolicy
    terminationGracePeriodSeconds:      # integer                                 Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
    activeDeadlineSeconds:              # integer                                 Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
    dnsPolicy:                          # string                                  Set DNS policy for containers within the pod. One of 'ClusterFirst' or 'Default'. Defaults to "ClusterFirst".
    nodeSelector:                       # map[string]string                       NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://releases.k8s.io/release-1.3/docs/user-guide/node-selection/README.md
      [string]:                         # string
    host:                               # string                                  A request to schedule this pod onto a specific node Deprecated: Use nodeName instead.
    serviceAccountName:                 # string                                  ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/release-1.3/docs/design/service_accounts.md
    serviceAccount:                     # string                                  DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
    nodeName:                           # string                                  NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
    hostNetwork:                        # boolean                                 Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
    hostPID:                            # boolean                                 Use the host's pid namespace. Optional: Default to false.
    hostIPC:                            # boolean                                 Use the host's ipc namespace. Optional: Default to false.
    securityContext:                    # v1.PodSecurityContext                   SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
      seLinuxOptions:                   # v1.SELinuxOptions                       The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        user:                           # string                                  User is a SELinux user label that applies to the container.
        role:                           # string                                  Role is a SELinux role label that applies to the container.
        type:                           # string                                  Type is a SELinux type label that applies to the container.
        level:                          # string                                  Level is SELinux level label that applies to the container.
      runAsUser:                        # integer                                 The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
      runAsNonRoot:                     # boolean                                 Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
      supplementalGroups:               # []integer                               A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
      - [integer]                       # 
      fsGroup:                          # integer                                 A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw 
    imagePullSecrets:                   # []v1.LocalObjectReference               ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md#specifying-imagepullsecrets-on-a-pod
    - name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    hostname:                           # string                                  Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
    subdomain:                          # string                                  If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.


ReplicationController
=====================

ReplicationController represents the configuration of a replication controller.

kind: ReplicationController             # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.ReplicationControllerSpec            Spec defines the specification of the desired behavior of the replication controller. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  replicas:                             # integer                                 Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: http://releases.k8s.io/release-1.3/docs/user-guide/replication-controller.md#what-is-a-replication-controller
  selector:                             # map[string]string                       Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md#label-selectors
    [string]:                           # string
  template:                             # v1.PodTemplateSpec                      Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: http://releases.k8s.io/release-1.3/docs/user-guide/replication-controller.md#pod-template
    metadata:                           # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      name:                             # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      generateName:                     # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
      namespace:                        # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      selfLink:                         # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
      uid:                              # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      resourceVersion:                  # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      generation:                       # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
      creationTimestamp:                # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionTimestamp:                # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionGracePeriodSeconds:       # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
      labels:                           # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
        [string]:                       # string
      annotations:                      # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
        [string]:                       # string
      ownerReferences:                  # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
      - apiVersion:                     # string                                  API version of the referent.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        controller:                     # boolean                                 If true, this reference points to the managing controller.
      finalizers:                       # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
      - [string]                        # 
    spec:                               # v1.PodSpec                              Specification of the desired behavior of the pod. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
      volumes:                          # []v1.Volume                             List of volumes that can be mounted by containers belonging to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md
      - name:                           # string                                  Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        hostPath:                       # v1.HostPathVolumeSource                 HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#hostpath
          path:                         # string                                  Path of the directory on the host. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#hostpath
        emptyDir:                       # v1.EmptyDirVolumeSource                 EmptyDir represents a temporary directory that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#emptydir
          medium:                       # string                                  What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#emptydir
        gcePersistentDisk:              # v1.GCEPersistentDiskVolumeSource        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
          pdName:                       # string                                  Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
          fsType:                       # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
          partition:                    # integer                                 The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
          readOnly:                     # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
        awsElasticBlockStore:           # v1.AWSElasticBlockStoreVolumeSource     AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
          volumeID:                     # string                                  Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
          fsType:                       # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
          partition:                    # integer                                 The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          readOnly:                     # boolean                                 Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
        gitRepo:                        # v1.GitRepoVolumeSource                  GitRepo represents a git repository at a particular revision.
          repository:                   # string                                  Repository URL
          revision:                     # string                                  Commit hash for the specified revision.
          directory:                    # string                                  Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        secret:                         # v1.SecretVolumeSource                   Secret represents a secret that should populate this volume. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#secrets
          secretName:                   # string                                  Name of the secret in the pod's namespace to use. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#secrets
          items:                        # []v1.KeyToPath                          If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
          - key:                        # string                                  The key to project.
            path:                       # string                                  The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        nfs:                            # v1.NFSVolumeSource                      NFS represents an NFS mount on the host that shares a pod's lifetime More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
          server:                       # string                                  Server is the hostname or IP address of the NFS server. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
          path:                         # string                                  Path that is exported by the NFS server. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
          readOnly:                     # boolean                                 ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
        iscsi:                          # v1.ISCSIVolumeSource                    ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/examples/iscsi/README.md
          targetPortal:                 # string                                  iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
          iqn:                          # string                                  Target iSCSI Qualified Name.
          lun:                          # integer                                 iSCSI target lun number.
          iscsiInterface:               # string                                  Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
          fsType:                       # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#iscsi
          readOnly:                     # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        glusterfs:                      # v1.GlusterfsVolumeSource                Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md
          endpoints:                    # string                                  EndpointsName is the endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
          path:                         # string                                  Path is the Glusterfs volume path. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
          readOnly:                     # boolean                                 ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
        persistentVolumeClaim:          # v1.PersistentVolumeClaimVolumeSource    PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#persistentvolumeclaims
          claimName:                    # string                                  ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#persistentvolumeclaims
          readOnly:                     # boolean                                 Will force the ReadOnly setting in VolumeMounts. Default false.
        rbd:                            # v1.RBDVolumeSource                      RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md
          monitors:                     # []string                                A collection of Ceph monitors. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
          - [string]                    # 
          image:                        # string                                  The rados image name. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
          fsType:                       # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#rbd
          pool:                         # string                                  The rados pool name. Default is rbd. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it.
          user:                         # string                                  The rados user name. Default is admin. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
          keyring:                      # string                                  Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
          secretRef:                    # v1.LocalObjectReference                 SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          readOnly:                     # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
        flexVolume:                     # v1.FlexVolumeSource                     FlexVolume represents a generic volume resource that is provisioned/attached using a exec based plugin. This is an alpha feature and may change in future.
          driver:                       # string                                  Driver is the name of the driver to use for this volume.
          fsType:                       # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
          secretRef:                    # v1.LocalObjectReference                 Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          readOnly:                     # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
          options:                      # map[string]string                       Optional: Extra command options if any.
            [string]:                   # string
        cinder:                         # v1.CinderVolumeSource                   Cinder represents a cinder volume attached and mounted on kubelets host machine More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
          volumeID:                     # string                                  volume id used to identify the volume in cinder More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
          fsType:                       # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
          readOnly:                     # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
        cephfs:                         # v1.CephFSVolumeSource                   CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
          monitors:                     # []string                                Required: Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
          - [string]                    # 
          path:                         # string                                  Optional: Used as the mounted root, rather than the full Ceph tree, default is /
          user:                         # string                                  Optional: User is the rados user name, default is admin More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
          secretFile:                   # string                                  Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
          secretRef:                    # v1.LocalObjectReference                 Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          readOnly:                     # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
        flocker:                        # v1.FlockerVolumeSource                  Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
          datasetName:                  # string                                  Required: the volume name. This is going to be store on metadata -> name on the payload for Flocker
        downwardAPI:                    # v1.DownwardAPIVolumeSource              DownwardAPI represents downward API about the pod that should populate this volume
          items:                        # []v1.DownwardAPIVolumeFile              Items is a list of downward API volume file
          - path:                       # string                                  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
            fieldRef:                   # v1.ObjectFieldSelector                  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
              apiVersion:               # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
              fieldPath:                # string                                  Path of the field to select in the specified API version.
            resourceFieldRef:           # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
              containerName:            # string                                  Container name: required for volumes, optional for env vars
              resource:                 # string                                  Required: resource to select
              divisor:                  # string                                  Specifies the output format of the exposed resources, defaults to "1"
        fc:                             # v1.FCVolumeSource                       FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
          targetWWNs:                   # []string                                Required: FC target world wide names (WWNs)
          - [string]                    # 
          lun:                          # integer                                 Required: FC target lun number
          fsType:                       # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          readOnly:                     # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        azureFile:                      # v1.AzureFileVolumeSource                AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
          secretName:                   # string                                  the name of secret that contains Azure Storage Account Name and Key
          shareName:                    # string                                  Share Name
          readOnly:                     # boolean                                 Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        configMap:                      # v1.ConfigMapVolumeSource                ConfigMap represents a configMap that should populate this volume
          name:                         # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          items:                        # []v1.KeyToPath                          If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
          - key:                        # string                                  The key to project.
            path:                       # string                                  The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        vsphereVolume:                  # v1.VsphereVirtualDiskVolumeSource       VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
          volumePath:                   # string                                  Path that identifies vSphere volume vmdk
          fsType:                       # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        metadata:                       # v1.DeprecatedDownwardAPIVolumeSource    Metadata represents metadata about the pod that should populate this volume Deprecated: Use downwardAPI instead.
          items:                        # []v1.DeprecatedDownwardAPIVolumeFile    Items is a list of downward API volume file
          - name:                       # string                                  Required: Name is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
            fieldRef:                   # v1.ObjectFieldSelector                  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
              apiVersion:               # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
              fieldPath:                # string                                  Path of the field to select in the specified API version.
            resourceFieldRef:           # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
              containerName:            # string                                  Container name: required for volumes, optional for env vars
              resource:                 # string                                  Required: resource to select
              divisor:                  # string                                  Specifies the output format of the exposed resources, defaults to "1"
      containers:                       # []v1.Container                          List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/containers.md
      - name:                           # string                                  Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        image:                          # string                                  Docker image name. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md
        command:                        # []string                                Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/containers.md#containers-and-commands
        - [string]                      # 
        args:                           # []string                                Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/containers.md#containers-and-commands
        - [string]                      # 
        workingDir:                     # string                                  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        ports:                          # []v1.ContainerPort                      List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        - name:                         # string                                  If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
          hostPort:                     # integer                                 Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
          containerPort:                # integer                                 Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
          protocol:                     # string                                  Protocol for port. Must be UDP or TCP. Defaults to "TCP".
          hostIP:                       # string                                  What host IP to bind the external port to.
        env:                            # []v1.EnvVar                             List of environment variables to set in the container. Cannot be updated.
        - name:                         # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
          value:                        # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
          valueFrom:                    # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
            fieldRef:                   # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
              apiVersion:               # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
              fieldPath:                # string                                  Path of the field to select in the specified API version.
            resourceFieldRef:           # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
              containerName:            # string                                  Container name: required for volumes, optional for env vars
              resource:                 # string                                  Required: resource to select
              divisor:                  # string                                  Specifies the output format of the exposed resources, defaults to "1"
            configMapKeyRef:            # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
              name:                     # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
              key:                      # string                                  The key to select.
            secretKeyRef:               # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
              name:                     # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
              key:                      # string                                  The key of the secret to select from.  Must be a valid secret key.
        resources:                      # v1.ResourceRequirements                 Compute Resources required by this container. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#resources
          limits:                       # map[string]string                       Limits describes the maximum amount of compute resources allowed. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
            [string]:                   # string
          requests:                     # map[string]string                       Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
            [string]:                   # string
        volumeMounts:                   # []v1.VolumeMount                        Pod volumes to mount into the container's filesystem. Cannot be updated.
        - name:                         # string                                  This must match the Name of a Volume.
          readOnly:                     # boolean                                 Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
          mountPath:                    # string                                  Path within the container at which the volume should be mounted.  Must not contain ':'.
          subPath:                      # string                                  Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        livenessProbe:                  # v1.Probe                                Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
          exec:                         # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
            command:                    # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            - [string]                  # 
          httpGet:                      # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
            path:                       # string                                  Path to access on the HTTP server.
            port:                       # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            host:                       # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            scheme:                     # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
            httpHeaders:                # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
            - name:                     # string                                  The header field name
              value:                    # string                                  The header field value
          tcpSocket:                    # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
            port:                       # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          initialDelaySeconds:          # integer                                 Number of seconds after the container has started before liveness probes are initiated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
          timeoutSeconds:               # integer                                 Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
          periodSeconds:                # integer                                 How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
          successThreshold:             # integer                                 Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
          failureThreshold:             # integer                                 Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        readinessProbe:                 # v1.Probe                                Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
          exec:                         # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
            command:                    # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            - [string]                  # 
          httpGet:                      # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
            path:                       # string                                  Path to access on the HTTP server.
            port:                       # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            host:                       # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            scheme:                     # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
            httpHeaders:                # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
            - name:                     # string                                  The header field name
              value:                    # string                                  The header field value
          tcpSocket:                    # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
            port:                       # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          initialDelaySeconds:          # integer                                 Number of seconds after the container has started before liveness probes are initiated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
          timeoutSeconds:               # integer                                 Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
          periodSeconds:                # integer                                 How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
          successThreshold:             # integer                                 Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
          failureThreshold:             # integer                                 Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        lifecycle:                      # v1.Lifecycle                            Actions that the management system should take in response to container lifecycle events. Cannot be updated.
          postStart:                    # v1.Handler                              PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: http://releases.k8s.io/release-1.3/docs/user-guide/container-environment.md#hook-details
            exec:                       # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
              command:                  # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
              - [string]                # 
            httpGet:                    # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
              path:                     # string                                  Path to access on the HTTP server.
              port:                     # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              host:                     # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
              scheme:                   # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
              httpHeaders:              # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
              - name:                   # string                                  The header field name
                value:                  # string                                  The header field value
            tcpSocket:                  # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
              port:                     # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          preStop:                      # v1.Handler                              PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: http://releases.k8s.io/release-1.3/docs/user-guide/container-environment.md#hook-details
            exec:                       # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
              command:                  # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
              - [string]                # 
            httpGet:                    # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
              path:                     # string                                  Path to access on the HTTP server.
              port:                     # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              host:                     # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
              scheme:                   # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
              httpHeaders:              # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
              - name:                   # string                                  The header field name
                value:                  # string                                  The header field value
            tcpSocket:                  # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
              port:                     # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        terminationMessagePath:         # string                                  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
        imagePullPolicy:                # string                                  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md#updating-images
        securityContext:                # v1.SecurityContext                      Security options the pod should run with. More info: http://releases.k8s.io/release-1.3/docs/design/security_context.md
          capabilities:                 # v1.Capabilities                         The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
            add:                        # []v1.Capability                         Added capabilities
            drop:                       # []v1.Capability                         Removed capabilities
          privileged:                   # boolean                                 Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
          seLinuxOptions:               # v1.SELinuxOptions                       The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
            user:                       # string                                  User is a SELinux user label that applies to the container.
            role:                       # string                                  Role is a SELinux role label that applies to the container.
            type:                       # string                                  Type is a SELinux type label that applies to the container.
            level:                      # string                                  Level is SELinux level label that applies to the container.
          runAsUser:                    # integer                                 The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          runAsNonRoot:                 # boolean                                 Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          readOnlyRootFilesystem:       # boolean                                 Whether this container has a read-only root filesystem. Default is false.
        stdin:                          # boolean                                 Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        stdinOnce:                      # boolean                                 Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        tty:                            # boolean                                 Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
      restartPolicy:                    # string                                  Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#restartpolicy
      terminationGracePeriodSeconds:    # integer                                 Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
      activeDeadlineSeconds:            # integer                                 Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
      dnsPolicy:                        # string                                  Set DNS policy for containers within the pod. One of 'ClusterFirst' or 'Default'. Defaults to "ClusterFirst".
      nodeSelector:                     # map[string]string                       NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://releases.k8s.io/release-1.3/docs/user-guide/node-selection/README.md
        [string]:                       # string
      host:                             # string                                  A request to schedule this pod onto a specific node Deprecated: Use nodeName instead.
      serviceAccountName:               # string                                  ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/release-1.3/docs/design/service_accounts.md
      serviceAccount:                   # string                                  DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
      nodeName:                         # string                                  NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
      hostNetwork:                      # boolean                                 Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
      hostPID:                          # boolean                                 Use the host's pid namespace. Optional: Default to false.
      hostIPC:                          # boolean                                 Use the host's ipc namespace. Optional: Default to false.
      securityContext:                  # v1.PodSecurityContext                   SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
        seLinuxOptions:                 # v1.SELinuxOptions                       The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
          user:                         # string                                  User is a SELinux user label that applies to the container.
          role:                         # string                                  Role is a SELinux role label that applies to the container.
          type:                         # string                                  Type is a SELinux type label that applies to the container.
          level:                        # string                                  Level is SELinux level label that applies to the container.
        runAsUser:                      # integer                                 The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        runAsNonRoot:                   # boolean                                 Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        supplementalGroups:             # []integer                               A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
        - [integer]                     # 
        fsGroup:                        # integer                                 A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw 
      imagePullSecrets:                 # []v1.LocalObjectReference               ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md#specifying-imagepullsecrets-on-a-pod
      - name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      hostname:                         # string                                  Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
      subdomain:                        # string                                  If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
status:                                 # v1.ReplicationControllerStatus          Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  replicas:                             # integer                                 Replicas is the most recently oberved number of replicas. More info: http://releases.k8s.io/release-1.3/docs/user-guide/replication-controller.md#what-is-a-replication-controller
  fullyLabeledReplicas:                 # integer                                 The number of pods that have labels matching the labels of the pod template of the replication controller.
  observedGeneration:                   # integer                                 ObservedGeneration reflects the generation of the most recently observed replication controller.


ResourceQuota
=============

ResourceQuota sets aggregate quota restrictions enforced per namespace

kind: ResourceQuota                     # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.ResourceQuotaSpec                    Spec defines the desired quota. http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  hard:                                 # map[string]string                       Hard is the set of desired hard limits for each named resource. More info: http://releases.k8s.io/release-1.3/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota
    [string]:                           # string
  scopes:                               # []v1.ResourceQuotaScope                 A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
status:                                 # v1.ResourceQuotaStatus                  Status defines the actual enforced quota and its current usage. http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  hard:                                 # map[string]string                       Hard is the set of enforced hard limits for each named resource. More info: http://releases.k8s.io/release-1.3/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota
    [string]:                           # string
  used:                                 # map[string]string                       Used is the current observed total usage of the resource in the namespace.
    [string]:                           # string


Scale
=====

Scale represents a scaling request for a resource.

kind: Scale                             # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object metadata; More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.ScaleSpec                            defines the behavior of the scale. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status.
  replicas:                             # integer                                 desired number of instances for the scaled object.
status:                                 # v1.ScaleStatus                          current status of the scale. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status. Read-only.
  replicas:                             # integer                                 actual number of observed instances of the scaled object.
  selector:                             # string                                  label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md#label-selectors


Secret
======

Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.

kind: Secret                            # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
data:                                   # map[string]string                       Data contains the secret data. Each key must be a valid DNS_SUBDOMAIN or leading dot followed by valid DNS_SUBDOMAIN. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
  [string]:                             # string
type:                                   # string                                  Used to facilitate programmatic handling of secret data.


SecurityContextConstraints
==========================

SecurityContextConstraints governs the ability to make requests that affect the SecurityContext that will be applied to a container.

kind: SecurityContextConstraints        # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
priority:                               # integer                                 Priority influences the sort order of SCCs when evaluating which SCCs to try first for a given pod request based on access in the Users and Groups fields.  The higher the int, the higher priority.  If scores for multiple SCCs are equal they will be sorted by name.
allowPrivilegedContainer:               # boolean                                 AllowPrivilegedContainer determines if a container can request to be run as privileged.
defaultAddCapabilities:                 # []v1.Capability                         DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.
requiredDropCapabilities:               # []v1.Capability                         RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
allowedCapabilities:                    # []v1.Capability                         AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field maybe added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities.
allowHostDirVolumePlugin:               # boolean                                 AllowHostDirVolumePlugin determines if the policy allow containers to use the HostDir volume plugin
volumes:                                # []v1.FSType                             Volumes is a white list of allowed volume plugins.  FSType corresponds directly with the field names of a VolumeSource (azureFile, configMap, emptyDir).  To allow all volumes you may use '*'.
allowHostNetwork:                       # boolean                                 AllowHostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
allowHostPorts:                         # boolean                                 AllowHostPorts determines if the policy allows host ports in the containers.
allowHostPID:                           # boolean                                 AllowHostPID determines if the policy allows host pid in the containers.
allowHostIPC:                           # boolean                                 AllowHostIPC determines if the policy allows host ipc in the containers.
seLinuxContext:                         # v1.SELinuxContextStrategyOptions        SELinuxContext is the strategy that will dictate what labels will be set in the SecurityContext.
  type:                                 # string                                  Type is the strategy that will dictate what SELinux context is used in the SecurityContext.
  seLinuxOptions:                       # v1.SELinuxOptions                       seLinuxOptions required to run as; required for MustRunAs
    user:                               # string                                  User is a SELinux user label that applies to the container.
    role:                               # string                                  Role is a SELinux role label that applies to the container.
    type:                               # string                                  Type is a SELinux type label that applies to the container.
    level:                              # string                                  Level is SELinux level label that applies to the container.
runAsUser:                              # v1.RunAsUserStrategyOptions             RunAsUser is the strategy that will dictate what RunAsUser is used in the SecurityContext.
  type:                                 # string                                  Type is the strategy that will dictate what RunAsUser is used in the SecurityContext.
  uid:                                  # integer                                 UID is the user id that containers must run as.  Required for the MustRunAs strategy if not using namespace/service account allocated uids.
  uidRangeMin:                          # integer                                 UIDRangeMin defines the min value for a strategy that allocates by range.
  uidRangeMax:                          # integer                                 UIDRangeMax defines the max value for a strategy that allocates by range.
supplementalGroups:                     # v1.SupplementalGroupsStrategyOptions    SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
  type:                                 # string                                  Type is the strategy that will dictate what supplemental groups is used in the SecurityContext.
  ranges:                               # []v1.IDRange                            Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.
  - min:                                # integer                                 Min is the start of the range, inclusive.
    max:                                # integer                                 Max is the end of the range, inclusive.
fsGroup:                                # v1.FSGroupStrategyOptions               FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.
  type:                                 # string                                  Type is the strategy that will dictate what FSGroup is used in the SecurityContext.
  ranges:                               # []v1.IDRange                            Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.
  - min:                                # integer                                 Min is the start of the range, inclusive.
    max:                                # integer                                 Max is the end of the range, inclusive.
readOnlyRootFilesystem:                 # boolean                                 ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the SCC should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
users:                                  # []string                                The users who have permissions to use this security context constraints
- [string]                              # 
groups:                                 # []string                                The groups that have permission to use this security context constraints
- [string]                              # 


Service
=======

Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.

kind: Service                           # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.ServiceSpec                          Spec defines the behavior of a service. http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  ports:                                # []v1.ServicePort                        The list of ports that are exposed by this service. More info: http://releases.k8s.io/release-1.3/docs/user-guide/services.md#virtual-ips-and-service-proxies
  - name:                               # string                                  The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.
    protocol:                           # string                                  The IP protocol for this port. Supports "TCP" and "UDP". Default is TCP.
    port:                               # integer                                 The port that will be exposed by this service.
    targetPort:                         # string                                  Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: http://releases.k8s.io/release-1.3/docs/user-guide/services.md#defining-a-service
    nodePort:                           # integer                                 The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: http://releases.k8s.io/release-1.3/docs/user-guide/services.md#type--nodeport
  selector:                             # map[string]string                       This service will route traffic to pods having labels matching this selector. Label keys and values that must match in order to receive traffic for this service. If empty, all pods are selected, if not specified, endpoints must be manually specified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/services.md#overview
    [string]:                           # string
  portalIP:                             # string                                  The IP Address of the service. Deprecated: Use clusterIP instead.
  clusterIP:                            # string                                  ClusterIP is usually assigned by the master and is the IP address of the service. If specified, it will be allocated to the service if it is unused or else creation of the service will fail. Valid values are None, empty string (""), or a valid IP address. 'None' can be specified for a headless service when proxying is not required. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/services.md#virtual-ips-and-service-proxies
  type:                                 # string                                  Type of exposed service. Must be ClusterIP, NodePort, or LoadBalancer. Defaults to ClusterIP. More info: http://releases.k8s.io/release-1.3/docs/user-guide/services.md#external-services
  externalIPs:                          # []string                                externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.  A previous form of this functionality exists as the deprecatedPublicIPs field.  When using this field, callers should also clear the deprecatedPublicIPs field.
  - [string]                            # 
  deprecatedPublicIPs:                  # []string                                deprecatedPublicIPs is deprecated and replaced by the externalIPs field with almost the exact same semantics.  This field is retained in the v1 API for compatibility until at least 8/20/2016.  It will be removed from any new API revisions.  If both deprecatedPublicIPs *and* externalIPs are set, deprecatedPublicIPs is used.
  - [string]                            # 
  sessionAffinity:                      # string                                  Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: http://releases.k8s.io/release-1.3/docs/user-guide/services.md#virtual-ips-and-service-proxies
  loadBalancerIP:                       # string                                  Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
  loadBalancerSourceRanges:             # []string                                If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: http://releases.k8s.io/release-1.3/docs/user-guide/services-firewalls.md
  - [string]                            # 
status:                                 # v1.ServiceStatus                        Most recently observed status of the service. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
  loadBalancer:                         # v1.LoadBalancerStatus                   LoadBalancer contains the current status of the load-balancer, if one is present.
    ingress:                            # []v1.LoadBalancerIngress                Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
    - ip:                               # string                                  IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
      hostname:                         # string                                  Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)


ServiceAccount
==============

ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets

kind: ServiceAccount                    # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
secrets:                                # []v1.ObjectReference                    Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: http://releases.k8s.io/release-1.3/docs/user-guide/secrets.md
- kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
imagePullSecrets:                       # []v1.LocalObjectReference               ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: http://releases.k8s.io/release-1.3/docs/user-guide/secrets.md#manually-specifying-an-imagepullsecret
- name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names



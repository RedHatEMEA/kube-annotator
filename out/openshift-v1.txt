ClusterPolicy
=============

ClusterPolicy is a object that holds all the ClusterRoles for a particular namespace.  There is at most
one ClusterPolicy document per namespace.

kind: ClusterPolicy                                                   # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
lastModified:                                                         # k8s.io/kubernetes/pkg/util.Time (last time any part of the object was created, updated, or deleted)
roles:                                                                # []github.com/openshift/origin/pkg/authorization/api/v1.NamedClusterRole (all the roles held by this policy, mapped by role name)
- name:                                                               # string (name of the cluster role)
  role:                                                               # github.com/openshift/origin/pkg/authorization/api/v1.ClusterRole (the cluster role)
    kind:                                                             # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    apiVersion:                                                       # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
    metadata:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
      name:                                                           # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      generateName:                                                   # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
      namespace:                                                      # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      selfLink:                                                       # string (URL for the object; populated by the system, read-only)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      resourceVersion:                                                # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      generation:                                                     # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
      creationTimestamp:                                              # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
      deletionTimestamp:                                              # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
      labels:                                                         # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
        [string]:                                                     # string
      annotations:                                                    # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
        [string]:                                                     # string
    rules:                                                            # []github.com/openshift/origin/pkg/authorization/api/v1.PolicyRule (list of policy rules)
    - verbs:                                                          # []string (list of verbs that apply to ALL the resourceKinds and attributeRestrictions contained in this rule.  The verb * represents all kinds.)
      - [string]                                                      #
      attributeRestrictions:                                          # k8s.io/kubernetes/pkg/runtime.RawExtension (vary depending on what the authorizer supports.  If the authorizer does not recognize how to handle the specified value, it should report an error.)
      resources:                                                      # []string (list of resources this rule applies to.  * represents all resources.)
      - [string]                                                      #
      resourceNames:                                                  # []string (optional white list of names that the rule applies to.  An empty set means that everything is allowed.)
      - [string]                                                      #
      nonResourceURLs:                                                # []string (set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path.)
      - [string]                                                      #


ClusterPolicyBinding
====================

ClusterPolicyBinding is a object that holds all the ClusterRoleBindings for a particular namespace.  There is
one ClusterPolicyBinding document per referenced ClusterPolicy namespace

kind: ClusterPolicyBinding                                            # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
lastModified:                                                         # k8s.io/kubernetes/pkg/util.Time (last time any part of the object was created, updated, or deleted)
policyRef:                                                            # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to the cluster policy that this cluster policy binding's role bindings may reference)
  kind:                                                               # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  namespace:                                                          # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  name:                                                               # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
roleBindings:                                                         # []github.com/openshift/origin/pkg/authorization/api/v1.NamedClusterRoleBinding (all the role bindings held by this policy, mapped by role name)
- name:                                                               # string (name of the cluster role binding)
  roleBinding:                                                        # github.com/openshift/origin/pkg/authorization/api/v1.ClusterRoleBinding (the cluster role binding)
    kind:                                                             # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    apiVersion:                                                       # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
    metadata:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
      name:                                                           # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      generateName:                                                   # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
      namespace:                                                      # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      selfLink:                                                       # string (URL for the object; populated by the system, read-only)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      resourceVersion:                                                # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      generation:                                                     # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
      creationTimestamp:                                              # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
      deletionTimestamp:                                              # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
      labels:                                                         # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
        [string]:                                                     # string
      annotations:                                                    # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
        [string]:                                                     # string
    userNames:                                                        # []string (all user names directly bound to the role)
    - [string]                                                        #
    groupNames:                                                       # []string (all the groups directly bound to the role)
    - [string]                                                        #
    subjects:                                                         # []k8s.io/kubernetes/pkg/api/v1.ObjectReference (references to subjects bound to the role.  Only User, Group, SystemUser, SystemGroup, and ServiceAccount are allowed.)
    - kind:                                                           # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      namespace:                                                      # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      apiVersion:                                                     # string (API version of the referent)
      resourceVersion:                                                # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      fieldPath:                                                      # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
    roleRef:                                                          # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to the policy role)
      kind:                                                           # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      namespace:                                                      # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      apiVersion:                                                     # string (API version of the referent)
      resourceVersion:                                                # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      fieldPath:                                                      # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


ClusterPolicyBindingList
========================

ClusterPolicyBindingList is a collection of ClusterPolicyBindings

kind: ClusterPolicyBindingList                                        # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/authorization/api/v1.ClusterPolicyBinding (list of cluster policy bindings)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  lastModified:                                                       # k8s.io/kubernetes/pkg/util.Time (last time any part of the object was created, updated, or deleted)
  policyRef:                                                          # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to the cluster policy that this cluster policy binding's role bindings may reference)
    kind:                                                             # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    namespace:                                                        # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    name:                                                             # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  roleBindings:                                                       # []github.com/openshift/origin/pkg/authorization/api/v1.NamedClusterRoleBinding (all the role bindings held by this policy, mapped by role name)
  - name:                                                             # string (name of the cluster role binding)
    roleBinding:                                                      # github.com/openshift/origin/pkg/authorization/api/v1.ClusterRoleBinding (the cluster role binding)
      kind:                                                           # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      apiVersion:                                                     # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
      metadata:                                                       # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
        name:                                                         # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        generateName:                                                 # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
        namespace:                                                    # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        selfLink:                                                     # string (URL for the object; populated by the system, read-only)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        resourceVersion:                                              # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        generation:                                                   # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
        creationTimestamp:                                            # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
        deletionTimestamp:                                            # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
        labels:                                                       # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
          [string]:                                                   # string
        annotations:                                                  # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
          [string]:                                                   # string
      userNames:                                                      # []string (all user names directly bound to the role)
      - [string]                                                      #
      groupNames:                                                     # []string (all the groups directly bound to the role)
      - [string]                                                      #
      subjects:                                                       # []k8s.io/kubernetes/pkg/api/v1.ObjectReference (references to subjects bound to the role.  Only User, Group, SystemUser, SystemGroup, and ServiceAccount are allowed.)
      - kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
      roleRef:                                                        # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to the policy role)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


ClusterPolicyList
=================

ClusterPolicyList is a collection of ClusterPolicies

kind: ClusterPolicyList                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/authorization/api/v1.ClusterPolicy (list of cluster policies)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  lastModified:                                                       # k8s.io/kubernetes/pkg/util.Time (last time any part of the object was created, updated, or deleted)
  roles:                                                              # []github.com/openshift/origin/pkg/authorization/api/v1.NamedClusterRole (all the roles held by this policy, mapped by role name)
  - name:                                                             # string (name of the cluster role)
    role:                                                             # github.com/openshift/origin/pkg/authorization/api/v1.ClusterRole (the cluster role)
      kind:                                                           # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      apiVersion:                                                     # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
      metadata:                                                       # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
        name:                                                         # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        generateName:                                                 # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
        namespace:                                                    # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        selfLink:                                                     # string (URL for the object; populated by the system, read-only)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        resourceVersion:                                              # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        generation:                                                   # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
        creationTimestamp:                                            # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
        deletionTimestamp:                                            # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
        labels:                                                       # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
          [string]:                                                   # string
        annotations:                                                  # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
          [string]:                                                   # string
      rules:                                                          # []github.com/openshift/origin/pkg/authorization/api/v1.PolicyRule (list of policy rules)
      - verbs:                                                        # []string (list of verbs that apply to ALL the resourceKinds and attributeRestrictions contained in this rule.  The verb * represents all kinds.)
        - [string]                                                    #
        attributeRestrictions:                                        # k8s.io/kubernetes/pkg/runtime.RawExtension (vary depending on what the authorizer supports.  If the authorizer does not recognize how to handle the specified value, it should report an error.)
        resources:                                                    # []string (list of resources this rule applies to.  * represents all resources.)
        - [string]                                                    #
        resourceNames:                                                # []string (optional white list of names that the rule applies to.  An empty set means that everything is allowed.)
        - [string]                                                    #
        nonResourceURLs:                                              # []string (set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path.)
        - [string]                                                    #


ClusterRole
===========

ClusterRole is a logical grouping of PolicyRules that can be referenced as a unit by ClusterRoleBindings.

kind: ClusterRole                                                     # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
rules:                                                                # []github.com/openshift/origin/pkg/authorization/api/v1.PolicyRule (list of policy rules)
- verbs:                                                              # []string (list of verbs that apply to ALL the resourceKinds and attributeRestrictions contained in this rule.  The verb * represents all kinds.)
  - [string]                                                          #
  attributeRestrictions:                                              # k8s.io/kubernetes/pkg/runtime.RawExtension (vary depending on what the authorizer supports.  If the authorizer does not recognize how to handle the specified value, it should report an error.)
  resources:                                                          # []string (list of resources this rule applies to.  * represents all resources.)
  - [string]                                                          #
  resourceNames:                                                      # []string (optional white list of names that the rule applies to.  An empty set means that everything is allowed.)
  - [string]                                                          #
  nonResourceURLs:                                                    # []string (set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path.)
  - [string]                                                          #


ClusterRoleBinding
==================

ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference any ClusterRole in the same namespace or in the global namespace.
It adds who information via Users and Groups and namespace information by which namespace it exists in.  ClusterRoleBindings in a given
namespace only have effect in that namespace (excepting the master namespace which has power in all namespaces).

kind: ClusterRoleBinding                                              # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
userNames:                                                            # []string (all user names directly bound to the role)
- [string]                                                            #
groupNames:                                                           # []string (all the groups directly bound to the role)
- [string]                                                            #
subjects:                                                             # []k8s.io/kubernetes/pkg/api/v1.ObjectReference (references to subjects bound to the role.  Only User, Group, SystemUser, SystemGroup, and ServiceAccount are allowed.)
- kind:                                                               # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  namespace:                                                          # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  name:                                                               # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
roleRef:                                                              # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to the policy role)
  kind:                                                               # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  namespace:                                                          # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  name:                                                               # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


ClusterRoleBindingList
======================

ClusterRoleBindingList is a collection of ClusterRoleBindings

kind: ClusterRoleBindingList                                          # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/authorization/api/v1.ClusterRoleBinding (list of cluster role bindings)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  userNames:                                                          # []string (all user names directly bound to the role)
  - [string]                                                          #
  groupNames:                                                         # []string (all the groups directly bound to the role)
  - [string]                                                          #
  subjects:                                                           # []k8s.io/kubernetes/pkg/api/v1.ObjectReference (references to subjects bound to the role.  Only User, Group, SystemUser, SystemGroup, and ServiceAccount are allowed.)
  - kind:                                                             # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    namespace:                                                        # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    name:                                                             # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  roleRef:                                                            # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to the policy role)
    kind:                                                             # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    namespace:                                                        # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    name:                                                             # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


ClusterRoleList
===============

ClusterRoleList is a collection of ClusterRoles

kind: ClusterRoleList                                                 # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/authorization/api/v1.ClusterRole (list of cluster roles)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  rules:                                                              # []github.com/openshift/origin/pkg/authorization/api/v1.PolicyRule (list of policy rules)
  - verbs:                                                            # []string (list of verbs that apply to ALL the resourceKinds and attributeRestrictions contained in this rule.  The verb * represents all kinds.)
    - [string]                                                        #
    attributeRestrictions:                                            # k8s.io/kubernetes/pkg/runtime.RawExtension (vary depending on what the authorizer supports.  If the authorizer does not recognize how to handle the specified value, it should report an error.)
    resources:                                                        # []string (list of resources this rule applies to.  * represents all resources.)
    - [string]                                                        #
    resourceNames:                                                    # []string (optional white list of names that the rule applies to.  An empty set means that everything is allowed.)
    - [string]                                                        #
    nonResourceURLs:                                                  # []string (set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path.)
    - [string]                                                        #


IsPersonalSubjectAccessReview
=============================

IsPersonalSubjectAccessReview is a marker for PolicyRule.AttributeRestrictions that denotes that subjectaccessreviews on self should be allowed

kind: IsPersonalSubjectAccessReview                                   # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)


LocalResourceAccessReview
=========================

LocalResourceAccessReview is a means to request a list of which users and groups are authorized to perform the action specified by spec in a particular namespace

kind: LocalResourceAccessReview                                       # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
namespace:                                                            # string (namespace of the action being requested)
verb:                                                                 # string (one of get, list, watch, create, update, delete)
resource:                                                             # string (one of the existing resource types)
resourceName:                                                         # string (name of the resource being requested for a get or delete)
content:                                                              # k8s.io/kubernetes/pkg/runtime.RawExtension (actual content of the request for create and update)


LocalSubjectAccessReview
========================

LocalSubjectAccessReview is an object for requesting information about whether a user or group can perform an action in a particular namespace

kind: LocalSubjectAccessReview                                        # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
namespace:                                                            # string (namespace of the action being requested)
verb:                                                                 # string (one of get, list, watch, create, update, delete)
resource:                                                             # string (one of the existing resource types)
resourceName:                                                         # string (name of the resource being requested for a get or delete)
content:                                                              # k8s.io/kubernetes/pkg/runtime.RawExtension (actual content of the request for create and update)
user:                                                                 # string (optional, if both user and groups are empty, the current authenticated user is used)
groups:                                                               # []string (optional, list of groups to which the user belongs)
- [string]                                                            #


Policy
======

Policy is a object that holds all the Roles for a particular namespace.  There is at most
one Policy document per namespace.

kind: Policy                                                          # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
lastModified:                                                         # k8s.io/kubernetes/pkg/util.Time (last time that any part of the policy was created, updated, or deleted)
roles:                                                                # []github.com/openshift/origin/pkg/authorization/api/v1.NamedRole (roles held by this policy)
- name:                                                               # string (name of the role)
  role:                                                               # github.com/openshift/origin/pkg/authorization/api/v1.Role (the role)
    kind:                                                             # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    apiVersion:                                                       # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
    metadata:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
      name:                                                           # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      generateName:                                                   # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
      namespace:                                                      # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      selfLink:                                                       # string (URL for the object; populated by the system, read-only)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      resourceVersion:                                                # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      generation:                                                     # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
      creationTimestamp:                                              # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
      deletionTimestamp:                                              # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
      labels:                                                         # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
        [string]:                                                     # string
      annotations:                                                    # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
        [string]:                                                     # string
    rules:                                                            # []github.com/openshift/origin/pkg/authorization/api/v1.PolicyRule (all the rules for this role)
    - verbs:                                                          # []string (list of verbs that apply to ALL the resourceKinds and attributeRestrictions contained in this rule.  The verb * represents all kinds.)
      - [string]                                                      #
      attributeRestrictions:                                          # k8s.io/kubernetes/pkg/runtime.RawExtension (vary depending on what the authorizer supports.  If the authorizer does not recognize how to handle the specified value, it should report an error.)
      resources:                                                      # []string (list of resources this rule applies to.  * represents all resources.)
      - [string]                                                      #
      resourceNames:                                                  # []string (optional white list of names that the rule applies to.  An empty set means that everything is allowed.)
      - [string]                                                      #
      nonResourceURLs:                                                # []string (set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path.)
      - [string]                                                      #


PolicyBinding
=============

PolicyBinding is a object that holds all the RoleBindings for a particular namespace.  There is
one PolicyBinding document per referenced Policy namespace

kind: PolicyBinding                                                   # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
lastModified:                                                         # k8s.io/kubernetes/pkg/util.Time (last time that any part of the object was created, updated, or deleted)
policyRef:                                                            # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to the policy that contains all the Roles that this object's roleBindings may reference)
  kind:                                                               # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  namespace:                                                          # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  name:                                                               # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
roleBindings:                                                         # []github.com/openshift/origin/pkg/authorization/api/v1.NamedRoleBinding (all roleBindings held by this policyBinding)
- name:                                                               # string (name of the roleBinding)
  roleBinding:                                                        # github.com/openshift/origin/pkg/authorization/api/v1.RoleBinding (the roleBinding)
    kind:                                                             # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    apiVersion:                                                       # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
    metadata:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
      name:                                                           # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      generateName:                                                   # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
      namespace:                                                      # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      selfLink:                                                       # string (URL for the object; populated by the system, read-only)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      resourceVersion:                                                # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      generation:                                                     # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
      creationTimestamp:                                              # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
      deletionTimestamp:                                              # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
      labels:                                                         # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
        [string]:                                                     # string
      annotations:                                                    # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
        [string]:                                                     # string
    userNames:                                                        # []string (all the usernames directly bound to the role)
    - [string]                                                        #
    groupNames:                                                       # []string (all the groups directly bound to the role)
    - [string]                                                        #
    subjects:                                                         # []k8s.io/kubernetes/pkg/api/v1.ObjectReference (references to subjects bound to the role.  Only User, Group, SystemUser, SystemGroup, and ServiceAccount are allowed.)
    - kind:                                                           # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      namespace:                                                      # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      apiVersion:                                                     # string (API version of the referent)
      resourceVersion:                                                # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      fieldPath:                                                      # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
    roleRef:                                                          # k8s.io/kubernetes/pkg/api/v1.ObjectReference (a reference to a role)
      kind:                                                           # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      namespace:                                                      # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      apiVersion:                                                     # string (API version of the referent)
      resourceVersion:                                                # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      fieldPath:                                                      # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


PolicyBindingList
=================

PolicyBindingList is a collection of PolicyBindings

kind: PolicyBindingList                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/authorization/api/v1.PolicyBinding (list of policy bindings)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  lastModified:                                                       # k8s.io/kubernetes/pkg/util.Time (last time that any part of the object was created, updated, or deleted)
  policyRef:                                                          # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to the policy that contains all the Roles that this object's roleBindings may reference)
    kind:                                                             # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    namespace:                                                        # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    name:                                                             # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  roleBindings:                                                       # []github.com/openshift/origin/pkg/authorization/api/v1.NamedRoleBinding (all roleBindings held by this policyBinding)
  - name:                                                             # string (name of the roleBinding)
    roleBinding:                                                      # github.com/openshift/origin/pkg/authorization/api/v1.RoleBinding (the roleBinding)
      kind:                                                           # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      apiVersion:                                                     # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
      metadata:                                                       # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
        name:                                                         # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        generateName:                                                 # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
        namespace:                                                    # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        selfLink:                                                     # string (URL for the object; populated by the system, read-only)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        resourceVersion:                                              # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        generation:                                                   # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
        creationTimestamp:                                            # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
        deletionTimestamp:                                            # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
        labels:                                                       # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
          [string]:                                                   # string
        annotations:                                                  # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
          [string]:                                                   # string
      userNames:                                                      # []string (all the usernames directly bound to the role)
      - [string]                                                      #
      groupNames:                                                     # []string (all the groups directly bound to the role)
      - [string]                                                      #
      subjects:                                                       # []k8s.io/kubernetes/pkg/api/v1.ObjectReference (references to subjects bound to the role.  Only User, Group, SystemUser, SystemGroup, and ServiceAccount are allowed.)
      - kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
      roleRef:                                                        # k8s.io/kubernetes/pkg/api/v1.ObjectReference (a reference to a role)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


PolicyList
==========

PolicyList is a collection of Policies

kind: PolicyList                                                      # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/authorization/api/v1.Policy (list of policies)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  lastModified:                                                       # k8s.io/kubernetes/pkg/util.Time (last time that any part of the policy was created, updated, or deleted)
  roles:                                                              # []github.com/openshift/origin/pkg/authorization/api/v1.NamedRole (roles held by this policy)
  - name:                                                             # string (name of the role)
    role:                                                             # github.com/openshift/origin/pkg/authorization/api/v1.Role (the role)
      kind:                                                           # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      apiVersion:                                                     # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
      metadata:                                                       # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
        name:                                                         # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        generateName:                                                 # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
        namespace:                                                    # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        selfLink:                                                     # string (URL for the object; populated by the system, read-only)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        resourceVersion:                                              # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        generation:                                                   # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
        creationTimestamp:                                            # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
        deletionTimestamp:                                            # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
        labels:                                                       # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
          [string]:                                                   # string
        annotations:                                                  # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
          [string]:                                                   # string
      rules:                                                          # []github.com/openshift/origin/pkg/authorization/api/v1.PolicyRule (all the rules for this role)
      - verbs:                                                        # []string (list of verbs that apply to ALL the resourceKinds and attributeRestrictions contained in this rule.  The verb * represents all kinds.)
        - [string]                                                    #
        attributeRestrictions:                                        # k8s.io/kubernetes/pkg/runtime.RawExtension (vary depending on what the authorizer supports.  If the authorizer does not recognize how to handle the specified value, it should report an error.)
        resources:                                                    # []string (list of resources this rule applies to.  * represents all resources.)
        - [string]                                                    #
        resourceNames:                                                # []string (optional white list of names that the rule applies to.  An empty set means that everything is allowed.)
        - [string]                                                    #
        nonResourceURLs:                                              # []string (set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path.)
        - [string]                                                    #


ResourceAccessReview
====================

ResourceAccessReview is a means to request a list of which users and groups are authorized to perform the
action specified by spec

kind: ResourceAccessReview                                            # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
namespace:                                                            # string (namespace of the action being requested)
verb:                                                                 # string (one of get, list, watch, create, update, delete)
resource:                                                             # string (one of the existing resource types)
resourceName:                                                         # string (name of the resource being requested for a get or delete)
content:                                                              # k8s.io/kubernetes/pkg/runtime.RawExtension (actual content of the request for create and update)


ResourceAccessReviewResponse
============================

ResourceAccessReviewResponse describes who can perform the action

kind: ResourceAccessReviewResponse                                    # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
namespace:                                                            # string (namespace used for the access review)
users:                                                                # []string (list of users who can perform the action)
- [string]                                                            #
groups:                                                               # []string (list of groups who can perform the action)
- [string]                                                            #


Role
====

Role is a logical grouping of PolicyRules that can be referenced as a unit by RoleBindings.

kind: Role                                                            # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
rules:                                                                # []github.com/openshift/origin/pkg/authorization/api/v1.PolicyRule (all the rules for this role)
- verbs:                                                              # []string (list of verbs that apply to ALL the resourceKinds and attributeRestrictions contained in this rule.  The verb * represents all kinds.)
  - [string]                                                          #
  attributeRestrictions:                                              # k8s.io/kubernetes/pkg/runtime.RawExtension (vary depending on what the authorizer supports.  If the authorizer does not recognize how to handle the specified value, it should report an error.)
  resources:                                                          # []string (list of resources this rule applies to.  * represents all resources.)
  - [string]                                                          #
  resourceNames:                                                      # []string (optional white list of names that the rule applies to.  An empty set means that everything is allowed.)
  - [string]                                                          #
  nonResourceURLs:                                                    # []string (set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path.)
  - [string]                                                          #


RoleBinding
===========

RoleBinding references a Role, but not contain it.  It can reference any Role in the same namespace or in the global namespace.
It adds who information via Users and Groups and namespace information by which namespace it exists in.  RoleBindings in a given
namespace only have effect in that namespace (excepting the master namespace which has power in all namespaces).

kind: RoleBinding                                                     # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
userNames:                                                            # []string (all the usernames directly bound to the role)
- [string]                                                            #
groupNames:                                                           # []string (all the groups directly bound to the role)
- [string]                                                            #
subjects:                                                             # []k8s.io/kubernetes/pkg/api/v1.ObjectReference (references to subjects bound to the role.  Only User, Group, SystemUser, SystemGroup, and ServiceAccount are allowed.)
- kind:                                                               # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  namespace:                                                          # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  name:                                                               # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
roleRef:                                                              # k8s.io/kubernetes/pkg/api/v1.ObjectReference (a reference to a role)
  kind:                                                               # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  namespace:                                                          # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  name:                                                               # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


RoleBindingList
===============

RoleBindingList is a collection of RoleBindings

kind: RoleBindingList                                                 # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/authorization/api/v1.RoleBinding (list of role bindings)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  userNames:                                                          # []string (all the usernames directly bound to the role)
  - [string]                                                          #
  groupNames:                                                         # []string (all the groups directly bound to the role)
  - [string]                                                          #
  subjects:                                                           # []k8s.io/kubernetes/pkg/api/v1.ObjectReference (references to subjects bound to the role.  Only User, Group, SystemUser, SystemGroup, and ServiceAccount are allowed.)
  - kind:                                                             # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    namespace:                                                        # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    name:                                                             # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  roleRef:                                                            # k8s.io/kubernetes/pkg/api/v1.ObjectReference (a reference to a role)
    kind:                                                             # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    namespace:                                                        # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    name:                                                             # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


RoleList
========

RoleList is a collection of Roles

kind: RoleList                                                        # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/authorization/api/v1.Role (list of roles)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  rules:                                                              # []github.com/openshift/origin/pkg/authorization/api/v1.PolicyRule (all the rules for this role)
  - verbs:                                                            # []string (list of verbs that apply to ALL the resourceKinds and attributeRestrictions contained in this rule.  The verb * represents all kinds.)
    - [string]                                                        #
    attributeRestrictions:                                            # k8s.io/kubernetes/pkg/runtime.RawExtension (vary depending on what the authorizer supports.  If the authorizer does not recognize how to handle the specified value, it should report an error.)
    resources:                                                        # []string (list of resources this rule applies to.  * represents all resources.)
    - [string]                                                        #
    resourceNames:                                                    # []string (optional white list of names that the rule applies to.  An empty set means that everything is allowed.)
    - [string]                                                        #
    nonResourceURLs:                                                  # []string (set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path.)
    - [string]                                                        #


SubjectAccessReview
===================

SubjectAccessReview is an object for requesting information about whether a user or group can perform an action

kind: SubjectAccessReview                                             # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
namespace:                                                            # string (namespace of the action being requested)
verb:                                                                 # string (one of get, list, watch, create, update, delete)
resource:                                                             # string (one of the existing resource types)
resourceName:                                                         # string (name of the resource being requested for a get or delete)
content:                                                              # k8s.io/kubernetes/pkg/runtime.RawExtension (actual content of the request for create and update)
user:                                                                 # string (optional, if both user and groups are empty, the current authenticated user is used)
groups:                                                               # []string (optional, list of groups to which the user belongs)
- [string]                                                            #


SubjectAccessReviewResponse
===========================

SubjectAccessReviewResponse describes whether or not a user or group can perform an action

kind: SubjectAccessReviewResponse                                     # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
namespace:                                                            # string (the namespace used for the access review)
allowed:                                                              # bool (true if the action would be allowed, false otherwise)
reason:                                                               # string (reason is optional, it indicates why a request was allowed or denied)


Build
=====

Build encapsulates the inputs needed to produce a new deployable image, as well as
the status of the execution and a reference to the Pod which executed the build.

kind: Build                                                           # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
spec:                                                                 # github.com/openshift/origin/pkg/build/api/v1.BuildSpec (specification of the desired behavior for a build)
  serviceAccount:                                                     # string (the name of the service account to use to run pods created by the build, pod will be allowed to use secrets referenced by the service account)
  source:                                                             # github.com/openshift/origin/pkg/build/api/v1.BuildSource (describes the source control management system in use)
    type: Git                                                         # github.com/openshift/origin/pkg/build/api/v1.BuildSourceType (type of source control management system)
    git:                                                              # github.com/openshift/origin/pkg/build/api/v1.GitBuildSource (optional information about git build source)
      uri:                                                            # string (points to the source that will be built, structure of the source will depend on the type of build to run)
      ref:                                                            # string (identifies the branch/tag/ref to build)
      httpProxy:                                                      # string (specifies a http proxy to be used during git clone operations)
      httpsProxy:                                                     # string (specifies a https proxy to be used during git clone operations)
    contextDir:                                                       # string (specifies sub-directory where the source code for the application exists, allows for sources to be built from a directory other than the root of a repository)
    sourceSecret:                                                     # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported auth methods are: ssh-privatekey)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  revision:                                                           # github.com/openshift/origin/pkg/build/api/v1.SourceRevision (specific revision in the source repository)
    type: Git                                                         # github.com/openshift/origin/pkg/build/api/v1.BuildSourceType (type of the build source)
    git:                                                              # github.com/openshift/origin/pkg/build/api/v1.GitSourceRevision (information about git-based build source)
      commit:                                                         # string (hash identifying a specific commit)
      author:                                                         # github.com/openshift/origin/pkg/build/api/v1.SourceControlUser (author of a specific commit)
        name:                                                         # string (name of the source control user)
        email:                                                        # string (e-mail of the source control user)
      committer:                                                      # github.com/openshift/origin/pkg/build/api/v1.SourceControlUser (committer of a specific commit)
        name:                                                         # string (name of the source control user)
        email:                                                        # string (e-mail of the source control user)
      message:                                                        # string (description of a specific commit)
  strategy:                                                           # github.com/openshift/origin/pkg/build/api/v1.BuildStrategy (defines how to perform a build)
    type: Custom|Docker|Source                                        # github.com/openshift/origin/pkg/build/api/v1.BuildStrategyType (identifies the type of build strategy)
    dockerStrategy:                                                   # github.com/openshift/origin/pkg/build/api/v1.DockerBuildStrategy (holds parameters for the Docker build strategy)
      from:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to image stream, image stream tag, or image stream image from which docker image should be pulled, resulting image will be used in the FROM line for the Dockerfile for this build)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
      pullSecret:                                                     # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      noCache:                                                        # bool (if true, indicates that the Docker build must be executed with the --no-cache=true flag)
      env:                                                            # []k8s.io/kubernetes/pkg/api/v1.EnvVar (additional environment variables you want to pass into a builder container)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        valueFrom:                                                    # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
          fieldRef:                                                   # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
            apiVersion:                                               # string (version of the schema that fieldPath is written in terms of; defaults to v1)
            fieldPath:                                                # string (path of the field to select in the specified API version)
      forcePull:                                                      # bool (forces the source build to pull the image if true)
    sourceStrategy:                                                   # github.com/openshift/origin/pkg/build/api/v1.SourceBuildStrategy (holds parameters to the Source build strategy)
      from:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to an image stream, image stream tag, or image stream image from which the Docker image should be pulled)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
      pullSecret:                                                     # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      env:                                                            # []k8s.io/kubernetes/pkg/api/v1.EnvVar (additional environment variables you want to pass into a builder container)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        valueFrom:                                                    # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
          fieldRef:                                                   # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
            apiVersion:                                               # string (version of the schema that fieldPath is written in terms of; defaults to v1)
            fieldPath:                                                # string (path of the field to select in the specified API version)
      scripts:                                                        # string (location of the source scripts)
      incremental:                                                    # bool (forces the source build to do incremental builds if true)
      forcePull:                                                      # bool (forces the source build to pull the image if true)
    customStrategy:                                                   # github.com/openshift/origin/pkg/build/api/v1.CustomBuildStrategy (holds parameters to the Custom build strategy)
      from:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to an image stream, image stream tag, or image stream image from which the Docker image should be pulled)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
      pullSecret:                                                     # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      env:                                                            # []k8s.io/kubernetes/pkg/api/v1.EnvVar (additional environment variables you want to pass into a builder container)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        valueFrom:                                                    # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
          fieldRef:                                                   # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
            apiVersion:                                               # string (version of the schema that fieldPath is written in terms of; defaults to v1)
            fieldPath:                                                # string (path of the field to select in the specified API version)
      exposeDockerSocket:                                             # bool (allow running Docker commands (and build Docker images) from inside the container)
      forcePull:                                                      # bool (forces pulling of builder image from remote registry if true)
      secrets:                                                        # []github.com/openshift/origin/pkg/build/api/v1.SecretSpec (a list of secrets to include in the build pod in addition to pull, push and source secrets)
      - secretSource:                                                 # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (a reference to a secret)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        mountPath:                                                    # string (path within the container at which the secret should be mounted)
  output:                                                             # github.com/openshift/origin/pkg/build/api/v1.BuildOutput (describes the output of a build that a strategy should produce)
    to:                                                               # k8s.io/kubernetes/pkg/api/v1.ObjectReference (The optional image stream to push the output of this build.  The namespace may be empty, in which case, the image stream will be looked up based on the namespace of the build.)
      kind:                                                           # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      namespace:                                                      # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      apiVersion:                                                     # string (API version of the referent)
      resourceVersion:                                                # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      fieldPath:                                                      # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
    pushSecret:                                                       # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  resources:                                                          # k8s.io/kubernetes/pkg/api/v1.ResourceRequirements (the desired compute resources the build should have)
    limits:                                                           # k8s.io/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
      [k8s.io/kubernetes/pkg/api/v1.ResourceName]:                    # k8s.io/kubernetes/pkg/api/resource.Quantity
    requests:                                                         # k8s.io/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; if Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
      [k8s.io/kubernetes/pkg/api/v1.ResourceName]:                    # k8s.io/kubernetes/pkg/api/resource.Quantity
status:                                                               # github.com/openshift/origin/pkg/build/api/v1.BuildStatus (most recently observed status of a build as populated by the system)
  phase: Cancelled|Complete|Error|Failed|New|Pending|Running          # github.com/openshift/origin/pkg/build/api/v1.BuildPhase (observed point in the build lifecycle)
  cancelled:                                                          # bool (describes if a canceling event was triggered for the build)
  message:                                                            # string (human-readable message indicating details about why the build has this status)
  startTimestamp:                                                     # k8s.io/kubernetes/pkg/util.Time (server time when this build started running in a pod)
  completionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (server time when the pod running this build stopped running)
  duration: 3600000000000|1000|1000000|60000000000|1|1000000000       # time.Duration (amount of time the build has been running)
  config:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to build config from which this build was derived)
    kind:                                                             # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    namespace:                                                        # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    name:                                                             # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


BuildConfig
===========

BuildConfig is a template which can be used to create new builds.

kind: BuildConfig                                                     # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
spec:                                                                 # github.com/openshift/origin/pkg/build/api/v1.BuildConfigSpec (holds all the input necessary to produce a new build, and the conditions when to trigger them)
  triggers:                                                           # []github.com/openshift/origin/pkg/build/api/v1.BuildTriggerPolicy (determines how new builds can be launched from a build config.  if no triggers are defined, a new build can only occur as a result of an explicit client build creation.)
  - type: ConfigChange|Generic|generic|GitHub|github|ImageChange|imageChange # github.com/openshift/origin/pkg/build/api/v1.BuildTriggerType (type of build trigger)
    github:                                                           # github.com/openshift/origin/pkg/build/api/v1.WebHookTrigger (parameters for a GitHub webhook type of trigger)
      secret:                                                         # string (secret used to validate requests)
    generic:                                                          # github.com/openshift/origin/pkg/build/api/v1.WebHookTrigger (parameters for a Generic webhook type of trigger)
      secret:                                                         # string (secret used to validate requests)
    imageChange:                                                      # github.com/openshift/origin/pkg/build/api/v1.ImageChangeTrigger (parameters for an ImageChange type of trigger)
      lastTriggeredImageID:                                           # string (used internally to save last used image ID for build)
      from:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to an ImageStreamTag that will trigger the build)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  serviceAccount:                                                     # string (the name of the service account to use to run pods created by the build, pod will be allowed to use secrets referenced by the service account)
  source:                                                             # github.com/openshift/origin/pkg/build/api/v1.BuildSource (describes the source control management system in use)
    type: Git                                                         # github.com/openshift/origin/pkg/build/api/v1.BuildSourceType (type of source control management system)
    git:                                                              # github.com/openshift/origin/pkg/build/api/v1.GitBuildSource (optional information about git build source)
      uri:                                                            # string (points to the source that will be built, structure of the source will depend on the type of build to run)
      ref:                                                            # string (identifies the branch/tag/ref to build)
      httpProxy:                                                      # string (specifies a http proxy to be used during git clone operations)
      httpsProxy:                                                     # string (specifies a https proxy to be used during git clone operations)
    contextDir:                                                       # string (specifies sub-directory where the source code for the application exists, allows for sources to be built from a directory other than the root of a repository)
    sourceSecret:                                                     # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported auth methods are: ssh-privatekey)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  revision:                                                           # github.com/openshift/origin/pkg/build/api/v1.SourceRevision (specific revision in the source repository)
    type: Git                                                         # github.com/openshift/origin/pkg/build/api/v1.BuildSourceType (type of the build source)
    git:                                                              # github.com/openshift/origin/pkg/build/api/v1.GitSourceRevision (information about git-based build source)
      commit:                                                         # string (hash identifying a specific commit)
      author:                                                         # github.com/openshift/origin/pkg/build/api/v1.SourceControlUser (author of a specific commit)
        name:                                                         # string (name of the source control user)
        email:                                                        # string (e-mail of the source control user)
      committer:                                                      # github.com/openshift/origin/pkg/build/api/v1.SourceControlUser (committer of a specific commit)
        name:                                                         # string (name of the source control user)
        email:                                                        # string (e-mail of the source control user)
      message:                                                        # string (description of a specific commit)
  strategy:                                                           # github.com/openshift/origin/pkg/build/api/v1.BuildStrategy (defines how to perform a build)
    type: Custom|Docker|Source                                        # github.com/openshift/origin/pkg/build/api/v1.BuildStrategyType (identifies the type of build strategy)
    dockerStrategy:                                                   # github.com/openshift/origin/pkg/build/api/v1.DockerBuildStrategy (holds parameters for the Docker build strategy)
      from:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to image stream, image stream tag, or image stream image from which docker image should be pulled, resulting image will be used in the FROM line for the Dockerfile for this build)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
      pullSecret:                                                     # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      noCache:                                                        # bool (if true, indicates that the Docker build must be executed with the --no-cache=true flag)
      env:                                                            # []k8s.io/kubernetes/pkg/api/v1.EnvVar (additional environment variables you want to pass into a builder container)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        valueFrom:                                                    # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
          fieldRef:                                                   # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
            apiVersion:                                               # string (version of the schema that fieldPath is written in terms of; defaults to v1)
            fieldPath:                                                # string (path of the field to select in the specified API version)
      forcePull:                                                      # bool (forces the source build to pull the image if true)
    sourceStrategy:                                                   # github.com/openshift/origin/pkg/build/api/v1.SourceBuildStrategy (holds parameters to the Source build strategy)
      from:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to an image stream, image stream tag, or image stream image from which the Docker image should be pulled)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
      pullSecret:                                                     # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      env:                                                            # []k8s.io/kubernetes/pkg/api/v1.EnvVar (additional environment variables you want to pass into a builder container)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        valueFrom:                                                    # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
          fieldRef:                                                   # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
            apiVersion:                                               # string (version of the schema that fieldPath is written in terms of; defaults to v1)
            fieldPath:                                                # string (path of the field to select in the specified API version)
      scripts:                                                        # string (location of the source scripts)
      incremental:                                                    # bool (forces the source build to do incremental builds if true)
      forcePull:                                                      # bool (forces the source build to pull the image if true)
    customStrategy:                                                   # github.com/openshift/origin/pkg/build/api/v1.CustomBuildStrategy (holds parameters to the Custom build strategy)
      from:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to an image stream, image stream tag, or image stream image from which the Docker image should be pulled)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
      pullSecret:                                                     # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      env:                                                            # []k8s.io/kubernetes/pkg/api/v1.EnvVar (additional environment variables you want to pass into a builder container)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        valueFrom:                                                    # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
          fieldRef:                                                   # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
            apiVersion:                                               # string (version of the schema that fieldPath is written in terms of; defaults to v1)
            fieldPath:                                                # string (path of the field to select in the specified API version)
      exposeDockerSocket:                                             # bool (allow running Docker commands (and build Docker images) from inside the container)
      forcePull:                                                      # bool (forces pulling of builder image from remote registry if true)
      secrets:                                                        # []github.com/openshift/origin/pkg/build/api/v1.SecretSpec (a list of secrets to include in the build pod in addition to pull, push and source secrets)
      - secretSource:                                                 # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (a reference to a secret)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        mountPath:                                                    # string (path within the container at which the secret should be mounted)
  output:                                                             # github.com/openshift/origin/pkg/build/api/v1.BuildOutput (describes the output of a build that a strategy should produce)
    to:                                                               # k8s.io/kubernetes/pkg/api/v1.ObjectReference (The optional image stream to push the output of this build.  The namespace may be empty, in which case, the image stream will be looked up based on the namespace of the build.)
      kind:                                                           # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      namespace:                                                      # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      apiVersion:                                                     # string (API version of the referent)
      resourceVersion:                                                # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      fieldPath:                                                      # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
    pushSecret:                                                       # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  resources:                                                          # k8s.io/kubernetes/pkg/api/v1.ResourceRequirements (the desired compute resources the build should have)
    limits:                                                           # k8s.io/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
      [k8s.io/kubernetes/pkg/api/v1.ResourceName]:                    # k8s.io/kubernetes/pkg/api/resource.Quantity
    requests:                                                         # k8s.io/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; if Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
      [k8s.io/kubernetes/pkg/api/v1.ResourceName]:                    # k8s.io/kubernetes/pkg/api/resource.Quantity
status:                                                               # github.com/openshift/origin/pkg/build/api/v1.BuildConfigStatus (holds any relevant information about a build config derived by the system)
  lastVersion:                                                        # int (used to inform about number of last triggered build)


BuildConfigList
===============

BuildConfigList is a collection of BuildConfigs.

kind: BuildConfigList                                                 # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/build/api/v1.BuildConfig (list of build configs)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  spec:                                                               # github.com/openshift/origin/pkg/build/api/v1.BuildConfigSpec (holds all the input necessary to produce a new build, and the conditions when to trigger them)
    triggers:                                                         # []github.com/openshift/origin/pkg/build/api/v1.BuildTriggerPolicy (determines how new builds can be launched from a build config.  if no triggers are defined, a new build can only occur as a result of an explicit client build creation.)
    - type: ConfigChange|Generic|generic|GitHub|github|ImageChange|imageChange # github.com/openshift/origin/pkg/build/api/v1.BuildTriggerType (type of build trigger)
      github:                                                         # github.com/openshift/origin/pkg/build/api/v1.WebHookTrigger (parameters for a GitHub webhook type of trigger)
        secret:                                                       # string (secret used to validate requests)
      generic:                                                        # github.com/openshift/origin/pkg/build/api/v1.WebHookTrigger (parameters for a Generic webhook type of trigger)
        secret:                                                       # string (secret used to validate requests)
      imageChange:                                                    # github.com/openshift/origin/pkg/build/api/v1.ImageChangeTrigger (parameters for an ImageChange type of trigger)
        lastTriggeredImageID:                                         # string (used internally to save last used image ID for build)
        from:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to an ImageStreamTag that will trigger the build)
          kind:                                                       # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
          namespace:                                                  # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          uid:                                                        # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
          apiVersion:                                                 # string (API version of the referent)
          resourceVersion:                                            # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
          fieldPath:                                                  # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
    serviceAccount:                                                   # string (the name of the service account to use to run pods created by the build, pod will be allowed to use secrets referenced by the service account)
    source:                                                           # github.com/openshift/origin/pkg/build/api/v1.BuildSource (describes the source control management system in use)
      type: Git                                                       # github.com/openshift/origin/pkg/build/api/v1.BuildSourceType (type of source control management system)
      git:                                                            # github.com/openshift/origin/pkg/build/api/v1.GitBuildSource (optional information about git build source)
        uri:                                                          # string (points to the source that will be built, structure of the source will depend on the type of build to run)
        ref:                                                          # string (identifies the branch/tag/ref to build)
        httpProxy:                                                    # string (specifies a http proxy to be used during git clone operations)
        httpsProxy:                                                   # string (specifies a https proxy to be used during git clone operations)
      contextDir:                                                     # string (specifies sub-directory where the source code for the application exists, allows for sources to be built from a directory other than the root of a repository)
      sourceSecret:                                                   # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported auth methods are: ssh-privatekey)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    revision:                                                         # github.com/openshift/origin/pkg/build/api/v1.SourceRevision (specific revision in the source repository)
      type: Git                                                       # github.com/openshift/origin/pkg/build/api/v1.BuildSourceType (type of the build source)
      git:                                                            # github.com/openshift/origin/pkg/build/api/v1.GitSourceRevision (information about git-based build source)
        commit:                                                       # string (hash identifying a specific commit)
        author:                                                       # github.com/openshift/origin/pkg/build/api/v1.SourceControlUser (author of a specific commit)
          name:                                                       # string (name of the source control user)
          email:                                                      # string (e-mail of the source control user)
        committer:                                                    # github.com/openshift/origin/pkg/build/api/v1.SourceControlUser (committer of a specific commit)
          name:                                                       # string (name of the source control user)
          email:                                                      # string (e-mail of the source control user)
        message:                                                      # string (description of a specific commit)
    strategy:                                                         # github.com/openshift/origin/pkg/build/api/v1.BuildStrategy (defines how to perform a build)
      type: Custom|Docker|Source                                      # github.com/openshift/origin/pkg/build/api/v1.BuildStrategyType (identifies the type of build strategy)
      dockerStrategy:                                                 # github.com/openshift/origin/pkg/build/api/v1.DockerBuildStrategy (holds parameters for the Docker build strategy)
        from:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to image stream, image stream tag, or image stream image from which docker image should be pulled, resulting image will be used in the FROM line for the Dockerfile for this build)
          kind:                                                       # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
          namespace:                                                  # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          uid:                                                        # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
          apiVersion:                                                 # string (API version of the referent)
          resourceVersion:                                            # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
          fieldPath:                                                  # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
        pullSecret:                                                   # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        noCache:                                                      # bool (if true, indicates that the Docker build must be executed with the --no-cache=true flag)
        env:                                                          # []k8s.io/kubernetes/pkg/api/v1.EnvVar (additional environment variables you want to pass into a builder container)
        - name:                                                       # string (name of the environment variable; must be a C_IDENTIFIER)
          value:                                                      # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
          valueFrom:                                                  # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
            fieldRef:                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
        forcePull:                                                    # bool (forces the source build to pull the image if true)
      sourceStrategy:                                                 # github.com/openshift/origin/pkg/build/api/v1.SourceBuildStrategy (holds parameters to the Source build strategy)
        from:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to an image stream, image stream tag, or image stream image from which the Docker image should be pulled)
          kind:                                                       # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
          namespace:                                                  # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          uid:                                                        # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
          apiVersion:                                                 # string (API version of the referent)
          resourceVersion:                                            # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
          fieldPath:                                                  # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
        pullSecret:                                                   # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        env:                                                          # []k8s.io/kubernetes/pkg/api/v1.EnvVar (additional environment variables you want to pass into a builder container)
        - name:                                                       # string (name of the environment variable; must be a C_IDENTIFIER)
          value:                                                      # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
          valueFrom:                                                  # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
            fieldRef:                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
        scripts:                                                      # string (location of the source scripts)
        incremental:                                                  # bool (forces the source build to do incremental builds if true)
        forcePull:                                                    # bool (forces the source build to pull the image if true)
      customStrategy:                                                 # github.com/openshift/origin/pkg/build/api/v1.CustomBuildStrategy (holds parameters to the Custom build strategy)
        from:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to an image stream, image stream tag, or image stream image from which the Docker image should be pulled)
          kind:                                                       # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
          namespace:                                                  # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          uid:                                                        # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
          apiVersion:                                                 # string (API version of the referent)
          resourceVersion:                                            # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
          fieldPath:                                                  # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
        pullSecret:                                                   # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        env:                                                          # []k8s.io/kubernetes/pkg/api/v1.EnvVar (additional environment variables you want to pass into a builder container)
        - name:                                                       # string (name of the environment variable; must be a C_IDENTIFIER)
          value:                                                      # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
          valueFrom:                                                  # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
            fieldRef:                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
        exposeDockerSocket:                                           # bool (allow running Docker commands (and build Docker images) from inside the container)
        forcePull:                                                    # bool (forces pulling of builder image from remote registry if true)
        secrets:                                                      # []github.com/openshift/origin/pkg/build/api/v1.SecretSpec (a list of secrets to include in the build pod in addition to pull, push and source secrets)
        - secretSource:                                               # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (a reference to a secret)
            name:                                                     # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          mountPath:                                                  # string (path within the container at which the secret should be mounted)
    output:                                                           # github.com/openshift/origin/pkg/build/api/v1.BuildOutput (describes the output of a build that a strategy should produce)
      to:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectReference (The optional image stream to push the output of this build.  The namespace may be empty, in which case, the image stream will be looked up based on the namespace of the build.)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
      pushSecret:                                                     # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    resources:                                                        # k8s.io/kubernetes/pkg/api/v1.ResourceRequirements (the desired compute resources the build should have)
      limits:                                                         # k8s.io/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
        [k8s.io/kubernetes/pkg/api/v1.ResourceName]:                  # k8s.io/kubernetes/pkg/api/resource.Quantity
      requests:                                                       # k8s.io/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; if Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
        [k8s.io/kubernetes/pkg/api/v1.ResourceName]:                  # k8s.io/kubernetes/pkg/api/resource.Quantity
  status:                                                             # github.com/openshift/origin/pkg/build/api/v1.BuildConfigStatus (holds any relevant information about a build config derived by the system)
    lastVersion:                                                      # int (used to inform about number of last triggered build)


BuildList
=========

BuildList is a collection of Builds.

kind: BuildList                                                       # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/build/api/v1.Build (list of builds)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  spec:                                                               # github.com/openshift/origin/pkg/build/api/v1.BuildSpec (specification of the desired behavior for a build)
    serviceAccount:                                                   # string (the name of the service account to use to run pods created by the build, pod will be allowed to use secrets referenced by the service account)
    source:                                                           # github.com/openshift/origin/pkg/build/api/v1.BuildSource (describes the source control management system in use)
      type: Git                                                       # github.com/openshift/origin/pkg/build/api/v1.BuildSourceType (type of source control management system)
      git:                                                            # github.com/openshift/origin/pkg/build/api/v1.GitBuildSource (optional information about git build source)
        uri:                                                          # string (points to the source that will be built, structure of the source will depend on the type of build to run)
        ref:                                                          # string (identifies the branch/tag/ref to build)
        httpProxy:                                                    # string (specifies a http proxy to be used during git clone operations)
        httpsProxy:                                                   # string (specifies a https proxy to be used during git clone operations)
      contextDir:                                                     # string (specifies sub-directory where the source code for the application exists, allows for sources to be built from a directory other than the root of a repository)
      sourceSecret:                                                   # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported auth methods are: ssh-privatekey)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    revision:                                                         # github.com/openshift/origin/pkg/build/api/v1.SourceRevision (specific revision in the source repository)
      type: Git                                                       # github.com/openshift/origin/pkg/build/api/v1.BuildSourceType (type of the build source)
      git:                                                            # github.com/openshift/origin/pkg/build/api/v1.GitSourceRevision (information about git-based build source)
        commit:                                                       # string (hash identifying a specific commit)
        author:                                                       # github.com/openshift/origin/pkg/build/api/v1.SourceControlUser (author of a specific commit)
          name:                                                       # string (name of the source control user)
          email:                                                      # string (e-mail of the source control user)
        committer:                                                    # github.com/openshift/origin/pkg/build/api/v1.SourceControlUser (committer of a specific commit)
          name:                                                       # string (name of the source control user)
          email:                                                      # string (e-mail of the source control user)
        message:                                                      # string (description of a specific commit)
    strategy:                                                         # github.com/openshift/origin/pkg/build/api/v1.BuildStrategy (defines how to perform a build)
      type: Custom|Docker|Source                                      # github.com/openshift/origin/pkg/build/api/v1.BuildStrategyType (identifies the type of build strategy)
      dockerStrategy:                                                 # github.com/openshift/origin/pkg/build/api/v1.DockerBuildStrategy (holds parameters for the Docker build strategy)
        from:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to image stream, image stream tag, or image stream image from which docker image should be pulled, resulting image will be used in the FROM line for the Dockerfile for this build)
          kind:                                                       # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
          namespace:                                                  # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          uid:                                                        # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
          apiVersion:                                                 # string (API version of the referent)
          resourceVersion:                                            # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
          fieldPath:                                                  # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
        pullSecret:                                                   # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        noCache:                                                      # bool (if true, indicates that the Docker build must be executed with the --no-cache=true flag)
        env:                                                          # []k8s.io/kubernetes/pkg/api/v1.EnvVar (additional environment variables you want to pass into a builder container)
        - name:                                                       # string (name of the environment variable; must be a C_IDENTIFIER)
          value:                                                      # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
          valueFrom:                                                  # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
            fieldRef:                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
        forcePull:                                                    # bool (forces the source build to pull the image if true)
      sourceStrategy:                                                 # github.com/openshift/origin/pkg/build/api/v1.SourceBuildStrategy (holds parameters to the Source build strategy)
        from:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to an image stream, image stream tag, or image stream image from which the Docker image should be pulled)
          kind:                                                       # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
          namespace:                                                  # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          uid:                                                        # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
          apiVersion:                                                 # string (API version of the referent)
          resourceVersion:                                            # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
          fieldPath:                                                  # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
        pullSecret:                                                   # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        env:                                                          # []k8s.io/kubernetes/pkg/api/v1.EnvVar (additional environment variables you want to pass into a builder container)
        - name:                                                       # string (name of the environment variable; must be a C_IDENTIFIER)
          value:                                                      # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
          valueFrom:                                                  # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
            fieldRef:                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
        scripts:                                                      # string (location of the source scripts)
        incremental:                                                  # bool (forces the source build to do incremental builds if true)
        forcePull:                                                    # bool (forces the source build to pull the image if true)
      customStrategy:                                                 # github.com/openshift/origin/pkg/build/api/v1.CustomBuildStrategy (holds parameters to the Custom build strategy)
        from:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to an image stream, image stream tag, or image stream image from which the Docker image should be pulled)
          kind:                                                       # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
          namespace:                                                  # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          uid:                                                        # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
          apiVersion:                                                 # string (API version of the referent)
          resourceVersion:                                            # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
          fieldPath:                                                  # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
        pullSecret:                                                   # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        env:                                                          # []k8s.io/kubernetes/pkg/api/v1.EnvVar (additional environment variables you want to pass into a builder container)
        - name:                                                       # string (name of the environment variable; must be a C_IDENTIFIER)
          value:                                                      # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
          valueFrom:                                                  # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
            fieldRef:                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
        exposeDockerSocket:                                           # bool (allow running Docker commands (and build Docker images) from inside the container)
        forcePull:                                                    # bool (forces pulling of builder image from remote registry if true)
        secrets:                                                      # []github.com/openshift/origin/pkg/build/api/v1.SecretSpec (a list of secrets to include in the build pod in addition to pull, push and source secrets)
        - secretSource:                                               # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (a reference to a secret)
            name:                                                     # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          mountPath:                                                  # string (path within the container at which the secret should be mounted)
    output:                                                           # github.com/openshift/origin/pkg/build/api/v1.BuildOutput (describes the output of a build that a strategy should produce)
      to:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectReference (The optional image stream to push the output of this build.  The namespace may be empty, in which case, the image stream will be looked up based on the namespace of the build.)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
      pushSecret:                                                     # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (supported type: dockercfg)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    resources:                                                        # k8s.io/kubernetes/pkg/api/v1.ResourceRequirements (the desired compute resources the build should have)
      limits:                                                         # k8s.io/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
        [k8s.io/kubernetes/pkg/api/v1.ResourceName]:                  # k8s.io/kubernetes/pkg/api/resource.Quantity
      requests:                                                       # k8s.io/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; if Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
        [k8s.io/kubernetes/pkg/api/v1.ResourceName]:                  # k8s.io/kubernetes/pkg/api/resource.Quantity
  status:                                                             # github.com/openshift/origin/pkg/build/api/v1.BuildStatus (most recently observed status of a build as populated by the system)
    phase: Cancelled|Complete|Error|Failed|New|Pending|Running        # github.com/openshift/origin/pkg/build/api/v1.BuildPhase (observed point in the build lifecycle)
    cancelled:                                                        # bool (describes if a canceling event was triggered for the build)
    message:                                                          # string (human-readable message indicating details about why the build has this status)
    startTimestamp:                                                   # k8s.io/kubernetes/pkg/util.Time (server time when this build started running in a pod)
    completionTimestamp:                                              # k8s.io/kubernetes/pkg/util.Time (server time when the pod running this build stopped running)
    duration: 3600000000000|1000|1000000|60000000000|1|1000000000     # time.Duration (amount of time the build has been running)
    config:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to build config from which this build was derived)
      kind:                                                           # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      namespace:                                                      # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      apiVersion:                                                     # string (API version of the referent)
      resourceVersion:                                                # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      fieldPath:                                                      # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


BuildLog
========

BuildLog is the (unused) resource associated with the build log redirector

kind: BuildLog                                                        # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)


BuildLogOptions
===============

BuildLogOptions is the REST options for a build log

kind: BuildLogOptions                                                 # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
follow:                                                               # bool (if true indicates that the log should be streamed; defaults to false)
nowait:                                                               # bool (if true indicates that the server should not wait for a log to be available before returning; defaults to false)


BuildRequest
============

BuildRequest is the resource used to pass parameters to build generator

kind: BuildRequest                                                    # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
revision:                                                             # github.com/openshift/origin/pkg/build/api/v1.SourceRevision (information from the source for a specific repo snapshot)
  type: Git                                                           # github.com/openshift/origin/pkg/build/api/v1.BuildSourceType (type of the build source)
  git:                                                                # github.com/openshift/origin/pkg/build/api/v1.GitSourceRevision (information about git-based build source)
    commit:                                                           # string (hash identifying a specific commit)
    author:                                                           # github.com/openshift/origin/pkg/build/api/v1.SourceControlUser (author of a specific commit)
      name:                                                           # string (name of the source control user)
      email:                                                          # string (e-mail of the source control user)
    committer:                                                        # github.com/openshift/origin/pkg/build/api/v1.SourceControlUser (committer of a specific commit)
      name:                                                           # string (name of the source control user)
      email:                                                          # string (e-mail of the source control user)
    message:                                                          # string (description of a specific commit)
triggeredByImage:                                                     # k8s.io/kubernetes/pkg/api/v1.ObjectReference (image that triggered this build)
  kind:                                                               # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  namespace:                                                          # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  name:                                                               # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
from:                                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectReference (ImageStreamTag that triggered this build)
  kind:                                                               # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  namespace:                                                          # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  name:                                                               # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
lastVersion:                                                          # int (LastVersion of the BuildConfig that triggered this build)


DeploymentConfig
================

DeploymentConfig represents a configuration for a single deployment (represented as a
ReplicationController). It also contains details about changes which resulted in the current
state of the DeploymentConfig. Each change to the DeploymentConfig which should result in
a new deployment results in an increment of LatestVersion.

kind: DeploymentConfig                                                # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
spec:                                                                 # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentConfigSpec (a desired deployment state and how to deploy it)
  strategy:                                                           # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentStrategy (how a deployment is executed)
    type: Custom|Recreate|Rolling                                     # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentStrategyType (the name of a deployment strategy)
    customParams:                                                     # github.com/openshift/origin/pkg/deploy/api/v1.CustomDeploymentStrategyParams (input to the Custom deployment strategy)
      image:                                                          # string (a Docker image which can carry out a deployment)
      environment:                                                    # []k8s.io/kubernetes/pkg/api/v1.EnvVar (environment variables provided to the deployment process container)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
        valueFrom:                                                    # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
          fieldRef:                                                   # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
            apiVersion:                                               # string (version of the schema that fieldPath is written in terms of; defaults to v1)
            fieldPath:                                                # string (path of the field to select in the specified API version)
      command:                                                        # []string (optionally overrides the container command (default is specified by the image))
      - [string]                                                      #
    recreateParams:                                                   # github.com/openshift/origin/pkg/deploy/api/v1.RecreateDeploymentStrategyParams (input to the Recreate deployment strategy)
      pre:                                                            # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHook (a hook executed before the strategy starts the deployment)
        failurePolicy: Abort|Ignore|Retry                             # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHookFailurePolicy (what action to take if the hook fails)
        execNewPod:                                                   # github.com/openshift/origin/pkg/deploy/api/v1.ExecNewPodHook (options for an ExecNewPodHook)
          command:                                                    # []string (the hook command and its arguments)
          - [string]                                                  #
          env:                                                        # []k8s.io/kubernetes/pkg/api/v1.EnvVar (environment variables provided to the hook container)
          - name:                                                     # string (name of the environment variable; must be a C_IDENTIFIER)
            value:                                                    # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
            valueFrom:                                                # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
              fieldRef:                                               # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
                apiVersion:                                           # string (version of the schema that fieldPath is written in terms of; defaults to v1)
                fieldPath:                                            # string (path of the field to select in the specified API version)
          containerName:                                              # string (the name of a container from the pod template whose image will be used for the hook container)
      post:                                                           # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHook (a hook executed after the strategy finishes the deployment)
        failurePolicy: Abort|Ignore|Retry                             # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHookFailurePolicy (what action to take if the hook fails)
        execNewPod:                                                   # github.com/openshift/origin/pkg/deploy/api/v1.ExecNewPodHook (options for an ExecNewPodHook)
          command:                                                    # []string (the hook command and its arguments)
          - [string]                                                  #
          env:                                                        # []k8s.io/kubernetes/pkg/api/v1.EnvVar (environment variables provided to the hook container)
          - name:                                                     # string (name of the environment variable; must be a C_IDENTIFIER)
            value:                                                    # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
            valueFrom:                                                # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
              fieldRef:                                               # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
                apiVersion:                                           # string (version of the schema that fieldPath is written in terms of; defaults to v1)
                fieldPath:                                            # string (path of the field to select in the specified API version)
          containerName:                                              # string (the name of a container from the pod template whose image will be used for the hook container)
    rollingParams:                                                    # github.com/openshift/origin/pkg/deploy/api/v1.RollingDeploymentStrategyParams (input to the Rolling deployment strategy)
      updatePeriodSeconds:                                            # int64 (the time to wait between individual pod updates)
      intervalSeconds:                                                # int64 (the time to wait between polling deployment status after update)
      timeoutSeconds:                                                 # int64 (the time to wait for updates before giving up)
      maxUnavailable:                                                 # k8s.io/kubernetes/pkg/util.IntOrString (max number of pods that can be unavailable during the update; value can be an absolute number or a percentage of total pods at start of update)
      maxSurge:                                                       # k8s.io/kubernetes/pkg/util.IntOrString (max number of pods that can be scheduled above the original number of pods; value can be an absolute number or a percentage of total pods at start of update)
      updatePercent:                                                  # int (the percentage of replicas to scale up or down each interval (negative value switches scale order to down/up instead of up/down))
      pre:                                                            # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHook (a hook executed before the strategy starts the deployment)
        failurePolicy: Abort|Ignore|Retry                             # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHookFailurePolicy (what action to take if the hook fails)
        execNewPod:                                                   # github.com/openshift/origin/pkg/deploy/api/v1.ExecNewPodHook (options for an ExecNewPodHook)
          command:                                                    # []string (the hook command and its arguments)
          - [string]                                                  #
          env:                                                        # []k8s.io/kubernetes/pkg/api/v1.EnvVar (environment variables provided to the hook container)
          - name:                                                     # string (name of the environment variable; must be a C_IDENTIFIER)
            value:                                                    # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
            valueFrom:                                                # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
              fieldRef:                                               # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
                apiVersion:                                           # string (version of the schema that fieldPath is written in terms of; defaults to v1)
                fieldPath:                                            # string (path of the field to select in the specified API version)
          containerName:                                              # string (the name of a container from the pod template whose image will be used for the hook container)
      post:                                                           # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHook (a hook executed after the strategy finishes the deployment)
        failurePolicy: Abort|Ignore|Retry                             # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHookFailurePolicy (what action to take if the hook fails)
        execNewPod:                                                   # github.com/openshift/origin/pkg/deploy/api/v1.ExecNewPodHook (options for an ExecNewPodHook)
          command:                                                    # []string (the hook command and its arguments)
          - [string]                                                  #
          env:                                                        # []k8s.io/kubernetes/pkg/api/v1.EnvVar (environment variables provided to the hook container)
          - name:                                                     # string (name of the environment variable; must be a C_IDENTIFIER)
            value:                                                    # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
            valueFrom:                                                # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
              fieldRef:                                               # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
                apiVersion:                                           # string (version of the schema that fieldPath is written in terms of; defaults to v1)
                fieldPath:                                            # string (path of the field to select in the specified API version)
          containerName:                                              # string (the name of a container from the pod template whose image will be used for the hook container)
    resources:                                                        # k8s.io/kubernetes/pkg/api/v1.ResourceRequirements (resource requirements to execute the deployment)
      limits:                                                         # k8s.io/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
        [k8s.io/kubernetes/pkg/api/v1.ResourceName]:                  # k8s.io/kubernetes/pkg/api/resource.Quantity
      requests:                                                       # k8s.io/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; if Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
        [k8s.io/kubernetes/pkg/api/v1.ResourceName]:                  # k8s.io/kubernetes/pkg/api/resource.Quantity
  triggers:                                                           # []github.com/openshift/origin/pkg/deploy/api/v1.DeploymentTriggerPolicy (how new deployments are triggered)
  - type: ConfigChange|ImageChange                                    # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentTriggerType (the type of the trigger)
    imageChangeParams:                                                # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentTriggerImageChangeParams (input to the ImageChange trigger)
      automatic:                                                      # bool (whether detection of a new tag value should trigger a deployment)
      containerNames:                                                 # []string (restricts tag updates to a set of container names in the pod)
      - [string]                                                      #
      from:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectReference (a reference to an ImageRepository, ImageStream, or ImageStreamTag to watch for changes)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
      lastTriggeredImage:                                             # string (the last image to be triggered)
  replicas:                                                           # int (the desired number of replicas)
  selector:                                                           # map[string]string (a label query over pods that should match the replicas count)
    [string]:                                                         # string
  template:                                                           # k8s.io/kubernetes/pkg/api/v1.PodTemplateSpec (describes the pod that will be created if insufficient replicas are detected; takes precedence over a template reference)
    metadata:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
      name:                                                           # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      generateName:                                                   # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
      namespace:                                                      # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      selfLink:                                                       # string (URL for the object; populated by the system, read-only)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      resourceVersion:                                                # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      generation:                                                     # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
      creationTimestamp:                                              # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
      deletionTimestamp:                                              # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
      labels:                                                         # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
        [string]:                                                     # string
      annotations:                                                    # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
        [string]:                                                     # string
    spec:                                                             # k8s.io/kubernetes/pkg/api/v1.PodSpec (specification of the desired behavior of the pod; http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status)
      volumes:                                                        # []k8s.io/kubernetes/pkg/api/v1.Volume (list of volumes that can be mounted by containers belonging to the pod; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md)
      - name:                                                         # string (volume name; must be a DNS_LABEL and unique within the pod; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        hostPath:                                                     # k8s.io/kubernetes/pkg/api/v1.HostPathVolumeSource (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath)
          path:                                                       # string (path of the directory on the host; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath)
        emptyDir:                                                     # k8s.io/kubernetes/pkg/api/v1.EmptyDirVolumeSource (temporary directory that shares a pod's lifetime; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#emptydir)
          medium: |Memory                                             # k8s.io/kubernetes/pkg/api/v1.StorageMedium (type of storage used to back the volume; must be an empty string (default) or Memory; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#emptydir)
        gcePersistentDisk:                                            # k8s.io/kubernetes/pkg/api/v1.GCEPersistentDiskVolumeSource (GCE disk resource attached to the host machine on demand; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk)
          pdName:                                                     # string (unique name of the PD resource in GCE; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk)
          partition:                                                  # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified); see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk)
        awsElasticBlockStore:                                         # k8s.io/kubernetes/pkg/api/v1.AWSElasticBlockStoreVolumeSource (AWS disk resource attached to the host machine on demand; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore)
          volumeID:                                                   # string (unique id of the PD resource in AWS; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore)
          partition:                                                  # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified); see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore)
        gitRepo:                                                      # k8s.io/kubernetes/pkg/api/v1.GitRepoVolumeSource (git repository at a particular revision)
          repository:                                                 # string (repository URL)
          revision:                                                   # string (commit hash for the specified revision)
        secret:                                                       # k8s.io/kubernetes/pkg/api/v1.SecretVolumeSource (secret to populate volume; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#secrets)
          secretName:                                                 # string (secretName is the name of a secret in the pod's namespace; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#secrets)
        nfs:                                                          # k8s.io/kubernetes/pkg/api/v1.NFSVolumeSource (NFS volume that will be mounted in the host machine; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs)
          server:                                                     # string (the hostname or IP address of the NFS server; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs)
          path:                                                       # string (the path that is exported by the NFS server; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs)
          readOnly:                                                   # bool (forces the NFS export to be mounted with read-only permissions; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs)
        iscsi:                                                        # k8s.io/kubernetes/pkg/api/v1.ISCSIVolumeSource (iSCSI disk attached to host machine on demand; see http://releases.k8s.io/HEAD/examples/iscsi/README.md)
          targetPortal:                                               # string (iSCSI target portal)
          iqn:                                                        # string (iSCSI Qualified Name)
          lun:                                                        # int (iscsi target lun number)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified))
        glusterfs:                                                    # k8s.io/kubernetes/pkg/api/v1.GlusterfsVolumeSource (Glusterfs volume that will be mounted on the host machine; see http://releases.k8s.io/HEAD/examples/glusterfs/README.md)
          endpoints:                                                  # string (gluster hosts endpoints name; see http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod)
          path:                                                       # string (path to gluster volume; see http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod)
          readOnly:                                                   # bool (glusterfs volume to be mounted with read-only permissions; see http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod)
        persistentVolumeClaim:                                        # k8s.io/kubernetes/pkg/api/v1.PersistentVolumeClaimVolumeSource (a reference to a PersistentVolumeClaim in the same namespace; see http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims)
          claimName:                                                  # string (the name of the claim in the same namespace to be mounted as a volume; see http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims)
          readOnly:                                                   # bool (mount volume as read-only when true; default false)
        rbd:                                                          # k8s.io/kubernetes/pkg/api/v1.RBDVolumeSource (rados block volume that will be mounted on the host machine; see http://releases.k8s.io/HEAD/examples/rbd/README.md)
          monitors:                                                   # []string (a collection of Ceph monitors; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
          - [string]                                                  #
          image:                                                      # string (rados image name; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
          pool:                                                       # string (rados pool name; default is rbd; optional; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
          user:                                                       # string (rados user name; default is admin; optional; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
          keyring:                                                    # string (keyring is the path to key ring for rados user; default is /etc/ceph/keyring; optional; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
          secretRef:                                                  # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the RBD user; if provided overrides keyring; optional; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
            name:                                                     # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          readOnly:                                                   # bool (rbd volume to be mounted with read-only permissions; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
        cephfs:                                                       # k8s.io/kubernetes/pkg/api/v1.CephFSVolumeSource (Ceph filesystem that will be mounted on the host machine)
          monitors:                                                   # []string (a collection of Ceph monitors)
          - [string]                                                  #
          user:                                                       # string (rados user name; default is admin; optional)
          secretFile:                                                 # string (path to secret for rados user; default is /etc/ceph/user.secret; optional)
          secretRef:                                                  # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the user; if provided overrides keyring; optional)
            name:                                                     # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          readOnly:                                                   # bool (Ceph fs to be mounted with read-only permissions)
        metadata:                                                     # k8s.io/kubernetes/pkg/api/v1.MetadataVolumeSource (Metadata volume containing information about the pod)
          items:                                                      # []k8s.io/kubernetes/pkg/api/v1.MetadataFile (list of metadata files)
          - name:                                                     # string (the name of the file to be created)
            fieldRef:                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod. Supported fields: metadata.annotations, metadata.labels, metadata.name, metadata.namespace)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
      containers:                                                     # []k8s.io/kubernetes/pkg/api/v1.Container (list of containers belonging to the pod; cannot be updated; containers cannot currently be added or removed; there must be at least one container in a Pod; see http://releases.k8s.io/HEAD/docs/user-guide/containers.md)
      - name:                                                         # string (name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated)
        image:                                                        # string (Docker image name; see http://releases.k8s.io/HEAD/docs/user-guide/images.md)
        command:                                                      # []string (entrypoint array; not executed within a shell; the docker image's entrypoint is used if this is not provided; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not; see http://releases.k8s.io/HEAD/docs/user-guide/containers.md#containers-and-commands)
        - [string]                                                    #
        args:                                                         # []string (command array; the docker image's cmd is used if this is not provided; arguments to the entrypoint; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not; see http://releases.k8s.io/HEAD/docs/user-guide/containers.md#containers-and-commands)
        - [string]                                                    #
        workingDir:                                                   # string (container's working directory; defaults to image's default; cannot be updated)
        ports:                                                        # []k8s.io/kubernetes/pkg/api/v1.ContainerPort (list of ports to expose from the container; cannot be updated)
        - name:                                                       # string (name for the port that can be referred to by services; must be an IANA_SVC_NAME and unique within the pod)
          hostPort:                                                   # int (number of port to expose on the host; most containers do not need this)
          containerPort:                                              # int (number of port to expose on the pod's IP address)
          protocol: TCP|UDP                                           # k8s.io/kubernetes/pkg/api/v1.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
          hostIP:                                                     # string (host IP to bind the port to)
        env:                                                          # []k8s.io/kubernetes/pkg/api/v1.EnvVar (list of environment variables to set in the container; cannot be updated)
        - name:                                                       # string (name of the environment variable; must be a C_IDENTIFIER)
          value:                                                      # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
          valueFrom:                                                  # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
            fieldRef:                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
        resources:                                                    # k8s.io/kubernetes/pkg/api/v1.ResourceRequirements (Compute Resources required by this container; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/compute-resources.md)
          limits:                                                     # k8s.io/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
            [k8s.io/kubernetes/pkg/api/v1.ResourceName]:              # k8s.io/kubernetes/pkg/api/resource.Quantity
          requests:                                                   # k8s.io/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; if Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
            [k8s.io/kubernetes/pkg/api/v1.ResourceName]:              # k8s.io/kubernetes/pkg/api/resource.Quantity
        volumeMounts:                                                 # []k8s.io/kubernetes/pkg/api/v1.VolumeMount (pod volumes to mount into the container's filesyste; cannot be updated)
        - name:                                                       # string (name of the volume to mount)
          readOnly:                                                   # bool (mounted read-only if true, read-write otherwise (false or unspecified))
          mountPath:                                                  # string (path within the container at which the volume should be mounted)
        livenessProbe:                                                # k8s.io/kubernetes/pkg/api/v1.Probe (periodic probe of container liveness; container will be restarted if the probe fails; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes)
          exec:                                                       # k8s.io/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                #
          httpGet:                                                    # k8s.io/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
            scheme: HTTP|HTTPS                                        # k8s.io/kubernetes/pkg/api/v1.URIScheme (scheme to connect with, must be HTTP or HTTPS, defaults to HTTP)
          tcpSocket:                                                  # k8s.io/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
          initialDelaySeconds:                                        # int64 (number of seconds after the container has started before liveness probes are initiated; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes)
          timeoutSeconds:                                             # int64 (number of seconds after which liveness probes timeout; defaults to 1 second; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes)
        readinessProbe:                                               # k8s.io/kubernetes/pkg/api/v1.Probe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes)
          exec:                                                       # k8s.io/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                #
          httpGet:                                                    # k8s.io/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
            scheme: HTTP|HTTPS                                        # k8s.io/kubernetes/pkg/api/v1.URIScheme (scheme to connect with, must be HTTP or HTTPS, defaults to HTTP)
          tcpSocket:                                                  # k8s.io/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
          initialDelaySeconds:                                        # int64 (number of seconds after the container has started before liveness probes are initiated; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes)
          timeoutSeconds:                                             # int64 (number of seconds after which liveness probes timeout; defaults to 1 second; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes)
        lifecycle:                                                    # k8s.io/kubernetes/pkg/api/v1.Lifecycle (actions that the management system should take in response to container lifecycle events; cannot be updated)
          postStart:                                                  # k8s.io/kubernetes/pkg/api/v1.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes; see http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#hook-details)
            exec:                                                     # k8s.io/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              #
            httpGet:                                                  # k8s.io/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
              scheme: HTTP|HTTPS                                      # k8s.io/kubernetes/pkg/api/v1.URIScheme (scheme to connect with, must be HTTP or HTTPS, defaults to HTTP)
            tcpSocket:                                                # k8s.io/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
          preStop:                                                    # k8s.io/kubernetes/pkg/api/v1.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes; see http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#hook-details)
            exec:                                                     # k8s.io/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              #
            httpGet:                                                  # k8s.io/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
              scheme: HTTP|HTTPS                                      # k8s.io/kubernetes/pkg/api/v1.URIScheme (scheme to connect with, must be HTTP or HTTPS, defaults to HTTP)
            tcpSocket:                                                # k8s.io/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
        terminationMessagePath:                                       # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log; cannot be updated)
        imagePullPolicy: Always|IfNotPresent|Never                    # k8s.io/kubernetes/pkg/api/v1.PullPolicy (image pull policy; one of Always, Never, IfNotPresent; defaults to Always if :latest tag is specified, or IfNotPresent otherwise; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/images.md#updating-images)
        securityContext:                                              # k8s.io/kubernetes/pkg/api/v1.SecurityContext (security options the pod should run with; see http://releases.k8s.io/HEAD/docs/design/security_context.md)
          capabilities:                                               # k8s.io/kubernetes/pkg/api/v1.Capabilities (the linux capabilites that should be added or removed; see http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context)
            add:                                                      # []k8s.io/kubernetes/pkg/api/v1.Capability (added capabilities)
            - [k8s.io/kubernetes/pkg/api/v1.Capability]               #
            drop:                                                     # []k8s.io/kubernetes/pkg/api/v1.Capability (droped capabilities)
            - [k8s.io/kubernetes/pkg/api/v1.Capability]               #
          privileged:                                                 # bool (run the container in privileged mode; see http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context)
          seLinuxOptions:                                             # k8s.io/kubernetes/pkg/api/v1.SELinuxOptions (options that control the SELinux labels applied; see http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context)
            user:                                                     # string (the user label to apply to the container; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
            role:                                                     # string (the role label to apply to the container; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
            type:                                                     # string (the type label to apply to the container; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
            level:                                                    # string (the level label to apply to the container; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
          runAsUser:                                                  # int64 (the user id that runs the first process in the container; see http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context)
          runAsNonRoot:                                               # bool (indicates the container must be run as a non-root user either by specifying the runAsUser or in the image specification)
        stdin:                                                        # bool (Whether this container should allocate a buffer for stdin in the container runtime; default is false)
        tty:                                                          # bool (Whether this container should allocate a TTY for itself, also requires 'stdin' to be true; default is false)
      restartPolicy: Always|Never|OnFailure                           # k8s.io/kubernetes/pkg/api/v1.RestartPolicy (restart policy for all containers within the pod; one of Always, OnFailure, Never; defaults to Always; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#restartpolicy)
      terminationGracePeriodSeconds:                                  # int64 (optional duration in seconds the pod needs to terminate gracefully; may be decreased in delete request; value must be non-negative integer; the value zero indicates delete immediately; if this value is not set, the default grace period will be used instead; the grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal; set this value longer than the expected cleanup time for your process)
      activeDeadlineSeconds:                                          # int64
      dnsPolicy: ClusterFirst|Default                                 # k8s.io/kubernetes/pkg/api/v1.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
      nodeSelector:                                                   # map[string]string (selector which must match a node's labels for the pod to be scheduled on that node; see http://releases.k8s.io/HEAD/docs/user-guide/node-selection/README.md)
        [string]:                                                     # string
      host:                                                           # string (deprecated, use nodeName instead)
      serviceAccountName:                                             # string (name of the ServiceAccount to use to run this pod; see http://releases.k8s.io/HEAD/docs/design/service_accounts.md)
      serviceAccount:                                                 # string (deprecated; use serviceAccountName instead)
      nodeName:                                                       # string (node requested for this pod)
      hostNetwork:                                                    # bool (host networking requested for this pod)
      imagePullSecrets:                                               # []k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (list of references to secrets in the same namespace available for pulling the container images; see http://releases.k8s.io/HEAD/docs/user-guide/images.md#specifying-imagepullsecrets-on-a-pod)
      - name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
status:                                                               # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentConfigStatus (the current state of the latest deployment)
  latestVersion:                                                      # int (used to determine whether the current deployment is out of sync)
  details:                                                            # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentDetails (reasons for the last update to the config)
    message:                                                          # string (a user specified change message)
    causes:                                                           # []github.com/openshift/origin/pkg/deploy/api/v1.DeploymentCause (extended data associated with all the causes for creating a new deployment)
    - type: ConfigChange|ImageChange                                  # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentTriggerType (the type of trigger that resulted in a new deployment)
      imageTrigger:                                                   # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentCauseImageTrigger (image trigger details (if applicable))
        from:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectReference (a reference the changed object which triggered a deployment)
          kind:                                                       # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
          namespace:                                                  # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          uid:                                                        # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
          apiVersion:                                                 # string (API version of the referent)
          resourceVersion:                                            # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
          fieldPath:                                                  # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


DeploymentConfigList
====================

DeploymentConfigList is a collection of deployment configs.

kind: DeploymentConfigList                                            # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/deploy/api/v1.DeploymentConfig (a list of deployment configs)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  spec:                                                               # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentConfigSpec (a desired deployment state and how to deploy it)
    strategy:                                                         # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentStrategy (how a deployment is executed)
      type: Custom|Recreate|Rolling                                   # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentStrategyType (the name of a deployment strategy)
      customParams:                                                   # github.com/openshift/origin/pkg/deploy/api/v1.CustomDeploymentStrategyParams (input to the Custom deployment strategy)
        image:                                                        # string (a Docker image which can carry out a deployment)
        environment:                                                  # []k8s.io/kubernetes/pkg/api/v1.EnvVar (environment variables provided to the deployment process container)
        - name:                                                       # string (name of the environment variable; must be a C_IDENTIFIER)
          value:                                                      # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
          valueFrom:                                                  # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
            fieldRef:                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
              apiVersion:                                             # string (version of the schema that fieldPath is written in terms of; defaults to v1)
              fieldPath:                                              # string (path of the field to select in the specified API version)
        command:                                                      # []string (optionally overrides the container command (default is specified by the image))
        - [string]                                                    #
      recreateParams:                                                 # github.com/openshift/origin/pkg/deploy/api/v1.RecreateDeploymentStrategyParams (input to the Recreate deployment strategy)
        pre:                                                          # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHook (a hook executed before the strategy starts the deployment)
          failurePolicy: Abort|Ignore|Retry                           # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHookFailurePolicy (what action to take if the hook fails)
          execNewPod:                                                 # github.com/openshift/origin/pkg/deploy/api/v1.ExecNewPodHook (options for an ExecNewPodHook)
            command:                                                  # []string (the hook command and its arguments)
            - [string]                                                #
            env:                                                      # []k8s.io/kubernetes/pkg/api/v1.EnvVar (environment variables provided to the hook container)
            - name:                                                   # string (name of the environment variable; must be a C_IDENTIFIER)
              value:                                                  # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
              valueFrom:                                              # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
                fieldRef:                                             # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
                  apiVersion:                                         # string (version of the schema that fieldPath is written in terms of; defaults to v1)
                  fieldPath:                                          # string (path of the field to select in the specified API version)
            containerName:                                            # string (the name of a container from the pod template whose image will be used for the hook container)
        post:                                                         # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHook (a hook executed after the strategy finishes the deployment)
          failurePolicy: Abort|Ignore|Retry                           # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHookFailurePolicy (what action to take if the hook fails)
          execNewPod:                                                 # github.com/openshift/origin/pkg/deploy/api/v1.ExecNewPodHook (options for an ExecNewPodHook)
            command:                                                  # []string (the hook command and its arguments)
            - [string]                                                #
            env:                                                      # []k8s.io/kubernetes/pkg/api/v1.EnvVar (environment variables provided to the hook container)
            - name:                                                   # string (name of the environment variable; must be a C_IDENTIFIER)
              value:                                                  # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
              valueFrom:                                              # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
                fieldRef:                                             # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
                  apiVersion:                                         # string (version of the schema that fieldPath is written in terms of; defaults to v1)
                  fieldPath:                                          # string (path of the field to select in the specified API version)
            containerName:                                            # string (the name of a container from the pod template whose image will be used for the hook container)
      rollingParams:                                                  # github.com/openshift/origin/pkg/deploy/api/v1.RollingDeploymentStrategyParams (input to the Rolling deployment strategy)
        updatePeriodSeconds:                                          # int64 (the time to wait between individual pod updates)
        intervalSeconds:                                              # int64 (the time to wait between polling deployment status after update)
        timeoutSeconds:                                               # int64 (the time to wait for updates before giving up)
        maxUnavailable:                                               # k8s.io/kubernetes/pkg/util.IntOrString (max number of pods that can be unavailable during the update; value can be an absolute number or a percentage of total pods at start of update)
        maxSurge:                                                     # k8s.io/kubernetes/pkg/util.IntOrString (max number of pods that can be scheduled above the original number of pods; value can be an absolute number or a percentage of total pods at start of update)
        updatePercent:                                                # int (the percentage of replicas to scale up or down each interval (negative value switches scale order to down/up instead of up/down))
        pre:                                                          # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHook (a hook executed before the strategy starts the deployment)
          failurePolicy: Abort|Ignore|Retry                           # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHookFailurePolicy (what action to take if the hook fails)
          execNewPod:                                                 # github.com/openshift/origin/pkg/deploy/api/v1.ExecNewPodHook (options for an ExecNewPodHook)
            command:                                                  # []string (the hook command and its arguments)
            - [string]                                                #
            env:                                                      # []k8s.io/kubernetes/pkg/api/v1.EnvVar (environment variables provided to the hook container)
            - name:                                                   # string (name of the environment variable; must be a C_IDENTIFIER)
              value:                                                  # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
              valueFrom:                                              # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
                fieldRef:                                             # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
                  apiVersion:                                         # string (version of the schema that fieldPath is written in terms of; defaults to v1)
                  fieldPath:                                          # string (path of the field to select in the specified API version)
            containerName:                                            # string (the name of a container from the pod template whose image will be used for the hook container)
        post:                                                         # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHook (a hook executed after the strategy finishes the deployment)
          failurePolicy: Abort|Ignore|Retry                           # github.com/openshift/origin/pkg/deploy/api/v1.LifecycleHookFailurePolicy (what action to take if the hook fails)
          execNewPod:                                                 # github.com/openshift/origin/pkg/deploy/api/v1.ExecNewPodHook (options for an ExecNewPodHook)
            command:                                                  # []string (the hook command and its arguments)
            - [string]                                                #
            env:                                                      # []k8s.io/kubernetes/pkg/api/v1.EnvVar (environment variables provided to the hook container)
            - name:                                                   # string (name of the environment variable; must be a C_IDENTIFIER)
              value:                                                  # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
              valueFrom:                                              # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
                fieldRef:                                             # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
                  apiVersion:                                         # string (version of the schema that fieldPath is written in terms of; defaults to v1)
                  fieldPath:                                          # string (path of the field to select in the specified API version)
            containerName:                                            # string (the name of a container from the pod template whose image will be used for the hook container)
      resources:                                                      # k8s.io/kubernetes/pkg/api/v1.ResourceRequirements (resource requirements to execute the deployment)
        limits:                                                       # k8s.io/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
          [k8s.io/kubernetes/pkg/api/v1.ResourceName]:                # k8s.io/kubernetes/pkg/api/resource.Quantity
        requests:                                                     # k8s.io/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; if Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
          [k8s.io/kubernetes/pkg/api/v1.ResourceName]:                # k8s.io/kubernetes/pkg/api/resource.Quantity
    triggers:                                                         # []github.com/openshift/origin/pkg/deploy/api/v1.DeploymentTriggerPolicy (how new deployments are triggered)
    - type: ConfigChange|ImageChange                                  # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentTriggerType (the type of the trigger)
      imageChangeParams:                                              # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentTriggerImageChangeParams (input to the ImageChange trigger)
        automatic:                                                    # bool (whether detection of a new tag value should trigger a deployment)
        containerNames:                                               # []string (restricts tag updates to a set of container names in the pod)
        - [string]                                                    #
        from:                                                         # k8s.io/kubernetes/pkg/api/v1.ObjectReference (a reference to an ImageRepository, ImageStream, or ImageStreamTag to watch for changes)
          kind:                                                       # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
          namespace:                                                  # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
          name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          uid:                                                        # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
          apiVersion:                                                 # string (API version of the referent)
          resourceVersion:                                            # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
          fieldPath:                                                  # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
        lastTriggeredImage:                                           # string (the last image to be triggered)
    replicas:                                                         # int (the desired number of replicas)
    selector:                                                         # map[string]string (a label query over pods that should match the replicas count)
      [string]:                                                       # string
    template:                                                         # k8s.io/kubernetes/pkg/api/v1.PodTemplateSpec (describes the pod that will be created if insufficient replicas are detected; takes precedence over a template reference)
      metadata:                                                       # k8s.io/kubernetes/pkg/api/v1.ObjectMeta (standard object metadata; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
        name:                                                         # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        generateName:                                                 # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
        namespace:                                                    # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        selfLink:                                                     # string (URL for the object; populated by the system, read-only)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        resourceVersion:                                              # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        generation:                                                   # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
        creationTimestamp:                                            # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
        deletionTimestamp:                                            # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
        labels:                                                       # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
          [string]:                                                   # string
        annotations:                                                  # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
          [string]:                                                   # string
      spec:                                                           # k8s.io/kubernetes/pkg/api/v1.PodSpec (specification of the desired behavior of the pod; http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status)
        volumes:                                                      # []k8s.io/kubernetes/pkg/api/v1.Volume (list of volumes that can be mounted by containers belonging to the pod; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md)
        - name:                                                       # string (volume name; must be a DNS_LABEL and unique within the pod; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
          hostPath:                                                   # k8s.io/kubernetes/pkg/api/v1.HostPathVolumeSource (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath)
            path:                                                     # string (path of the directory on the host; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath)
          emptyDir:                                                   # k8s.io/kubernetes/pkg/api/v1.EmptyDirVolumeSource (temporary directory that shares a pod's lifetime; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#emptydir)
            medium: |Memory                                           # k8s.io/kubernetes/pkg/api/v1.StorageMedium (type of storage used to back the volume; must be an empty string (default) or Memory; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#emptydir)
          gcePersistentDisk:                                          # k8s.io/kubernetes/pkg/api/v1.GCEPersistentDiskVolumeSource (GCE disk resource attached to the host machine on demand; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk)
            pdName:                                                   # string (unique name of the PD resource in GCE; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk)
            fsType:                                                   # string (file system type to mount, such as ext4, xfs, ntfs; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk)
            partition:                                                # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk)
            readOnly:                                                 # bool (read-only if true, read-write otherwise (false or unspecified); see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk)
          awsElasticBlockStore:                                       # k8s.io/kubernetes/pkg/api/v1.AWSElasticBlockStoreVolumeSource (AWS disk resource attached to the host machine on demand; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore)
            volumeID:                                                 # string (unique id of the PD resource in AWS; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore)
            fsType:                                                   # string (file system type to mount, such as ext4, xfs, ntfs; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore)
            partition:                                                # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore)
            readOnly:                                                 # bool (read-only if true, read-write otherwise (false or unspecified); see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore)
          gitRepo:                                                    # k8s.io/kubernetes/pkg/api/v1.GitRepoVolumeSource (git repository at a particular revision)
            repository:                                               # string (repository URL)
            revision:                                                 # string (commit hash for the specified revision)
          secret:                                                     # k8s.io/kubernetes/pkg/api/v1.SecretVolumeSource (secret to populate volume; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#secrets)
            secretName:                                               # string (secretName is the name of a secret in the pod's namespace; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#secrets)
          nfs:                                                        # k8s.io/kubernetes/pkg/api/v1.NFSVolumeSource (NFS volume that will be mounted in the host machine; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs)
            server:                                                   # string (the hostname or IP address of the NFS server; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs)
            path:                                                     # string (the path that is exported by the NFS server; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs)
            readOnly:                                                 # bool (forces the NFS export to be mounted with read-only permissions; see http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs)
          iscsi:                                                      # k8s.io/kubernetes/pkg/api/v1.ISCSIVolumeSource (iSCSI disk attached to host machine on demand; see http://releases.k8s.io/HEAD/examples/iscsi/README.md)
            targetPortal:                                             # string (iSCSI target portal)
            iqn:                                                      # string (iSCSI Qualified Name)
            lun:                                                      # int (iscsi target lun number)
            fsType:                                                   # string (file system type to mount, such as ext4, xfs, ntfs)
            readOnly:                                                 # bool (read-only if true, read-write otherwise (false or unspecified))
          glusterfs:                                                  # k8s.io/kubernetes/pkg/api/v1.GlusterfsVolumeSource (Glusterfs volume that will be mounted on the host machine; see http://releases.k8s.io/HEAD/examples/glusterfs/README.md)
            endpoints:                                                # string (gluster hosts endpoints name; see http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod)
            path:                                                     # string (path to gluster volume; see http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod)
            readOnly:                                                 # bool (glusterfs volume to be mounted with read-only permissions; see http://releases.k8s.io/HEAD/examples/glusterfs/README.md#create-a-pod)
          persistentVolumeClaim:                                      # k8s.io/kubernetes/pkg/api/v1.PersistentVolumeClaimVolumeSource (a reference to a PersistentVolumeClaim in the same namespace; see http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims)
            claimName:                                                # string (the name of the claim in the same namespace to be mounted as a volume; see http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims)
            readOnly:                                                 # bool (mount volume as read-only when true; default false)
          rbd:                                                        # k8s.io/kubernetes/pkg/api/v1.RBDVolumeSource (rados block volume that will be mounted on the host machine; see http://releases.k8s.io/HEAD/examples/rbd/README.md)
            monitors:                                                 # []string (a collection of Ceph monitors; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
            - [string]                                                #
            image:                                                    # string (rados image name; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
            fsType:                                                   # string (file system type to mount, such as ext4, xfs, ntfs; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
            pool:                                                     # string (rados pool name; default is rbd; optional; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
            user:                                                     # string (rados user name; default is admin; optional; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
            keyring:                                                  # string (keyring is the path to key ring for rados user; default is /etc/ceph/keyring; optional; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
            secretRef:                                                # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the RBD user; if provided overrides keyring; optional; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
              name:                                                   # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
            readOnly:                                                 # bool (rbd volume to be mounted with read-only permissions; see http://releases.k8s.io/HEAD/examples/rbd/README.md#how-to-use-it)
          cephfs:                                                     # k8s.io/kubernetes/pkg/api/v1.CephFSVolumeSource (Ceph filesystem that will be mounted on the host machine)
            monitors:                                                 # []string (a collection of Ceph monitors)
            - [string]                                                #
            user:                                                     # string (rados user name; default is admin; optional)
            secretFile:                                               # string (path to secret for rados user; default is /etc/ceph/user.secret; optional)
            secretRef:                                                # k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (name of a secret to authenticate the user; if provided overrides keyring; optional)
              name:                                                   # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
            readOnly:                                                 # bool (Ceph fs to be mounted with read-only permissions)
          metadata:                                                   # k8s.io/kubernetes/pkg/api/v1.MetadataVolumeSource (Metadata volume containing information about the pod)
            items:                                                    # []k8s.io/kubernetes/pkg/api/v1.MetadataFile (list of metadata files)
            - name:                                                   # string (the name of the file to be created)
              fieldRef:                                               # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod. Supported fields: metadata.annotations, metadata.labels, metadata.name, metadata.namespace)
                apiVersion:                                           # string (version of the schema that fieldPath is written in terms of; defaults to v1)
                fieldPath:                                            # string (path of the field to select in the specified API version)
        containers:                                                   # []k8s.io/kubernetes/pkg/api/v1.Container (list of containers belonging to the pod; cannot be updated; containers cannot currently be added or removed; there must be at least one container in a Pod; see http://releases.k8s.io/HEAD/docs/user-guide/containers.md)
        - name:                                                       # string (name of the container; must be a DNS_LABEL and unique within the pod; cannot be updated)
          image:                                                      # string (Docker image name; see http://releases.k8s.io/HEAD/docs/user-guide/images.md)
          command:                                                    # []string (entrypoint array; not executed within a shell; the docker image's entrypoint is used if this is not provided; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not; see http://releases.k8s.io/HEAD/docs/user-guide/containers.md#containers-and-commands)
          - [string]                                                  #
          args:                                                       # []string (command array; the docker image's cmd is used if this is not provided; arguments to the entrypoint; cannot be updated; variable references $(VAR_NAME) are expanded using the container's environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not; see http://releases.k8s.io/HEAD/docs/user-guide/containers.md#containers-and-commands)
          - [string]                                                  #
          workingDir:                                                 # string (container's working directory; defaults to image's default; cannot be updated)
          ports:                                                      # []k8s.io/kubernetes/pkg/api/v1.ContainerPort (list of ports to expose from the container; cannot be updated)
          - name:                                                     # string (name for the port that can be referred to by services; must be an IANA_SVC_NAME and unique within the pod)
            hostPort:                                                 # int (number of port to expose on the host; most containers do not need this)
            containerPort:                                            # int (number of port to expose on the pod's IP address)
            protocol: TCP|UDP                                         # k8s.io/kubernetes/pkg/api/v1.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
            hostIP:                                                   # string (host IP to bind the port to)
          env:                                                        # []k8s.io/kubernetes/pkg/api/v1.EnvVar (list of environment variables to set in the container; cannot be updated)
          - name:                                                     # string (name of the environment variable; must be a C_IDENTIFIER)
            value:                                                    # string (value of the environment variable; defaults to empty string; variable references $(VAR_NAME) are expanded using the previously defined environment varibles in the container and any service environment variables; if a variable cannot be resolved, the reference in the input string will be unchanged; the $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME) ; escaped references will never be expanded, regardless of whether the variable exists or not)
            valueFrom:                                                # k8s.io/kubernetes/pkg/api/v1.EnvVarSource (source for the environment variable's value; cannot be used if value is not empty)
              fieldRef:                                               # k8s.io/kubernetes/pkg/api/v1.ObjectFieldSelector (selects a field of the pod; only name and namespace are supported)
                apiVersion:                                           # string (version of the schema that fieldPath is written in terms of; defaults to v1)
                fieldPath:                                            # string (path of the field to select in the specified API version)
          resources:                                                  # k8s.io/kubernetes/pkg/api/v1.ResourceRequirements (Compute Resources required by this container; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/compute-resources.md)
            limits:                                                   # k8s.io/kubernetes/pkg/api/v1.ResourceList (Maximum amount of compute resources allowed; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
              [k8s.io/kubernetes/pkg/api/v1.ResourceName]:            # k8s.io/kubernetes/pkg/api/resource.Quantity
            requests:                                                 # k8s.io/kubernetes/pkg/api/v1.ResourceList (Minimum amount of resources requested; if Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value; see http://releases.k8s.io/HEAD/docs/design/resources.md#resource-specifications)
              [k8s.io/kubernetes/pkg/api/v1.ResourceName]:            # k8s.io/kubernetes/pkg/api/resource.Quantity
          volumeMounts:                                               # []k8s.io/kubernetes/pkg/api/v1.VolumeMount (pod volumes to mount into the container's filesyste; cannot be updated)
          - name:                                                     # string (name of the volume to mount)
            readOnly:                                                 # bool (mounted read-only if true, read-write otherwise (false or unspecified))
            mountPath:                                                # string (path within the container at which the volume should be mounted)
          livenessProbe:                                              # k8s.io/kubernetes/pkg/api/v1.Probe (periodic probe of container liveness; container will be restarted if the probe fails; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes)
            exec:                                                     # k8s.io/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              #
            httpGet:                                                  # k8s.io/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
              scheme: HTTP|HTTPS                                      # k8s.io/kubernetes/pkg/api/v1.URIScheme (scheme to connect with, must be HTTP or HTTPS, defaults to HTTP)
            tcpSocket:                                                # k8s.io/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
            initialDelaySeconds:                                      # int64 (number of seconds after the container has started before liveness probes are initiated; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes)
            timeoutSeconds:                                           # int64 (number of seconds after which liveness probes timeout; defaults to 1 second; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes)
          readinessProbe:                                             # k8s.io/kubernetes/pkg/api/v1.Probe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes)
            exec:                                                     # k8s.io/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              #
            httpGet:                                                  # k8s.io/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
              scheme: HTTP|HTTPS                                      # k8s.io/kubernetes/pkg/api/v1.URIScheme (scheme to connect with, must be HTTP or HTTPS, defaults to HTTP)
            tcpSocket:                                                # k8s.io/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
            initialDelaySeconds:                                      # int64 (number of seconds after the container has started before liveness probes are initiated; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes)
            timeoutSeconds:                                           # int64 (number of seconds after which liveness probes timeout; defaults to 1 second; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes)
          lifecycle:                                                  # k8s.io/kubernetes/pkg/api/v1.Lifecycle (actions that the management system should take in response to container lifecycle events; cannot be updated)
            postStart:                                                # k8s.io/kubernetes/pkg/api/v1.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes; see http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#hook-details)
              exec:                                                   # k8s.io/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
                command:                                              # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                - [string]                                            #
              httpGet:                                                # k8s.io/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
                path:                                                 # string (path to access on the HTTP server)
                port:                                                 # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
                host:                                                 # string (hostname to connect to; defaults to pod IP)
                scheme: HTTP|HTTPS                                    # k8s.io/kubernetes/pkg/api/v1.URIScheme (scheme to connect with, must be HTTP or HTTPS, defaults to HTTP)
              tcpSocket:                                              # k8s.io/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
                port:                                                 # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
            preStop:                                                  # k8s.io/kubernetes/pkg/api/v1.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes; see http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#hook-details)
              exec:                                                   # k8s.io/kubernetes/pkg/api/v1.ExecAction (exec-based handler)
                command:                                              # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                - [string]                                            #
              httpGet:                                                # k8s.io/kubernetes/pkg/api/v1.HTTPGetAction (HTTP-based handler)
                path:                                                 # string (path to access on the HTTP server)
                port:                                                 # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
                host:                                                 # string (hostname to connect to; defaults to pod IP)
                scheme: HTTP|HTTPS                                    # k8s.io/kubernetes/pkg/api/v1.URIScheme (scheme to connect with, must be HTTP or HTTPS, defaults to HTTP)
              tcpSocket:                                              # k8s.io/kubernetes/pkg/api/v1.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
                port:                                                 # k8s.io/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container; number must be in the range 1 to 65535; name must be an IANA_SVC_NAME)
          terminationMessagePath:                                     # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log; cannot be updated)
          imagePullPolicy: Always|IfNotPresent|Never                  # k8s.io/kubernetes/pkg/api/v1.PullPolicy (image pull policy; one of Always, Never, IfNotPresent; defaults to Always if :latest tag is specified, or IfNotPresent otherwise; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/images.md#updating-images)
          securityContext:                                            # k8s.io/kubernetes/pkg/api/v1.SecurityContext (security options the pod should run with; see http://releases.k8s.io/HEAD/docs/design/security_context.md)
            capabilities:                                             # k8s.io/kubernetes/pkg/api/v1.Capabilities (the linux capabilites that should be added or removed; see http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context)
              add:                                                    # []k8s.io/kubernetes/pkg/api/v1.Capability (added capabilities)
              - [k8s.io/kubernetes/pkg/api/v1.Capability]             #
              drop:                                                   # []k8s.io/kubernetes/pkg/api/v1.Capability (droped capabilities)
              - [k8s.io/kubernetes/pkg/api/v1.Capability]             #
            privileged:                                               # bool (run the container in privileged mode; see http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context)
            seLinuxOptions:                                           # k8s.io/kubernetes/pkg/api/v1.SELinuxOptions (options that control the SELinux labels applied; see http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context)
              user:                                                   # string (the user label to apply to the container; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
              role:                                                   # string (the role label to apply to the container; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
              type:                                                   # string (the type label to apply to the container; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
              level:                                                  # string (the level label to apply to the container; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
            runAsUser:                                                # int64 (the user id that runs the first process in the container; see http://releases.k8s.io/HEAD/docs/design/security_context.md#security-context)
            runAsNonRoot:                                             # bool (indicates the container must be run as a non-root user either by specifying the runAsUser or in the image specification)
          stdin:                                                      # bool (Whether this container should allocate a buffer for stdin in the container runtime; default is false)
          tty:                                                        # bool (Whether this container should allocate a TTY for itself, also requires 'stdin' to be true; default is false)
        restartPolicy: Always|Never|OnFailure                         # k8s.io/kubernetes/pkg/api/v1.RestartPolicy (restart policy for all containers within the pod; one of Always, OnFailure, Never; defaults to Always; see http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#restartpolicy)
        terminationGracePeriodSeconds:                                # int64 (optional duration in seconds the pod needs to terminate gracefully; may be decreased in delete request; value must be non-negative integer; the value zero indicates delete immediately; if this value is not set, the default grace period will be used instead; the grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal; set this value longer than the expected cleanup time for your process)
        activeDeadlineSeconds:                                        # int64
        dnsPolicy: ClusterFirst|Default                               # k8s.io/kubernetes/pkg/api/v1.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
        nodeSelector:                                                 # map[string]string (selector which must match a node's labels for the pod to be scheduled on that node; see http://releases.k8s.io/HEAD/docs/user-guide/node-selection/README.md)
          [string]:                                                   # string
        host:                                                         # string (deprecated, use nodeName instead)
        serviceAccountName:                                           # string (name of the ServiceAccount to use to run this pod; see http://releases.k8s.io/HEAD/docs/design/service_accounts.md)
        serviceAccount:                                               # string (deprecated; use serviceAccountName instead)
        nodeName:                                                     # string (node requested for this pod)
        hostNetwork:                                                  # bool (host networking requested for this pod)
        imagePullSecrets:                                             # []k8s.io/kubernetes/pkg/api/v1.LocalObjectReference (list of references to secrets in the same namespace available for pulling the container images; see http://releases.k8s.io/HEAD/docs/user-guide/images.md#specifying-imagepullsecrets-on-a-pod)
        - name:                                                       # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  status:                                                             # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentConfigStatus (the current state of the latest deployment)
    latestVersion:                                                    # int (used to determine whether the current deployment is out of sync)
    details:                                                          # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentDetails (reasons for the last update to the config)
      message:                                                        # string (a user specified change message)
      causes:                                                         # []github.com/openshift/origin/pkg/deploy/api/v1.DeploymentCause (extended data associated with all the causes for creating a new deployment)
      - type: ConfigChange|ImageChange                                # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentTriggerType (the type of trigger that resulted in a new deployment)
        imageTrigger:                                                 # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentCauseImageTrigger (image trigger details (if applicable))
          from:                                                       # k8s.io/kubernetes/pkg/api/v1.ObjectReference (a reference the changed object which triggered a deployment)
            kind:                                                     # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
            namespace:                                                # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
            name:                                                     # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
            uid:                                                      # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
            apiVersion:                                               # string (API version of the referent)
            resourceVersion:                                          # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
            fieldPath:                                                # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


DeploymentConfigRollback
========================

DeploymentConfigRollback provides the input to rollback generation.

kind: DeploymentConfigRollback                                        # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
spec:                                                                 # github.com/openshift/origin/pkg/deploy/api/v1.DeploymentConfigRollbackSpec (options for rollback generation)
  from:                                                               # k8s.io/kubernetes/pkg/api/v1.ObjectReference (a reference to a deployment, which is a ReplicationController)
    kind:                                                             # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    namespace:                                                        # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    name:                                                             # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  includeTriggers:                                                    # bool (whether to include old config triggers in the rollback)
  includeTemplate:                                                    # bool (whether to include the old pod template spec in the rollback)
  includeReplicationMeta:                                             # bool (whether to include the replica count and replica selector in the rollback)
  includeStrategy:                                                    # bool (whether to include the deployment strategy in the rollback)


Image
=====

Image is an immutable representation of a Docker image and metadata at a point in time.

kind: Image                                                           # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
dockerImageReference:                                                 # string (string that can be used to pull this image)
dockerImageMetadata:                                                  # k8s.io/kubernetes/pkg/runtime.RawExtension (metadata about this image)
dockerImageMetadataVersion:                                           # string (conveys version of the object, if empty defaults to '1.0')
dockerImageManifest:                                                  # string (raw JSON of the manifest)


ImageList
=========

ImageList is a list of Image objects.

kind: ImageList                                                       # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/image/api/v1.Image (list of image objects)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  dockerImageReference:                                               # string (string that can be used to pull this image)
  dockerImageMetadata:                                                # k8s.io/kubernetes/pkg/runtime.RawExtension (metadata about this image)
  dockerImageMetadataVersion:                                         # string (conveys version of the object, if empty defaults to '1.0')
  dockerImageManifest:                                                # string (raw JSON of the manifest)


ImageStream
===========

ImageStream stores a mapping of tags to images, metadata overrides that are applied
when images are tagged in a stream, and an optional reference to a Docker image
repository on a registry.

kind: ImageStream                                                     # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
spec:                                                                 # github.com/openshift/origin/pkg/image/api/v1.ImageStreamSpec (desired state of the stream)
  dockerImageRepository:                                              # string (optional field if specified this stream is backed by a Docker repository on this server)
  tags:                                                               # []github.com/openshift/origin/pkg/image/api/v1.NamedTagReference (map arbitrary string values to specific image locators)
  - name:                                                             # string (name of tag)
    annotations:                                                      # map[string]string (annotations associated with images using this tag)
      [string]:                                                       # string
    from:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectReference (a reference to an image stream tag or image stream this tag should track)
      kind:                                                           # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      namespace:                                                      # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      apiVersion:                                                     # string (API version of the referent)
      resourceVersion:                                                # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      fieldPath:                                                      # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
status:                                                               # github.com/openshift/origin/pkg/image/api/v1.ImageStreamStatus (current state of the stream as observed by the system)
  dockerImageRepository:                                              # string (represents the effective location this stream may be accessed at, may be empty until the server determines where the repository is located)
  tags:                                                               # []github.com/openshift/origin/pkg/image/api/v1.NamedTagEventList (historical record of images associated with each tag, the first entry is the currently tagged image)
  - tag:                                                              # string (the tag)
    items:                                                            # []github.com/openshift/origin/pkg/image/api/v1.TagEvent (list of tag events related to the tag)
    - created:                                                        # k8s.io/kubernetes/pkg/util.Time (when the event was created)
      dockerImageReference:                                           # string (the string that can be used to pull this image)
      image:                                                          # string (the image)


ImageStreamImage
================

ImageStreamImage represents an Image that is retrieved by image name from an ImageStream.

kind: ImageStreamImage                                                # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
image:                                                                # github.com/openshift/origin/pkg/image/api/v1.Image (the image associated with the ImageStream and image name)
  kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  dockerImageReference:                                               # string (string that can be used to pull this image)
  dockerImageMetadata:                                                # k8s.io/kubernetes/pkg/runtime.RawExtension (metadata about this image)
  dockerImageMetadataVersion:                                         # string (conveys version of the object, if empty defaults to '1.0')
  dockerImageManifest:                                                # string (raw JSON of the manifest)


ImageStreamList
===============

ImageStreamList is a list of ImageStream objects.

kind: ImageStreamList                                                 # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/image/api/v1.ImageStream (list of image stream objects)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  spec:                                                               # github.com/openshift/origin/pkg/image/api/v1.ImageStreamSpec (desired state of the stream)
    dockerImageRepository:                                            # string (optional field if specified this stream is backed by a Docker repository on this server)
    tags:                                                             # []github.com/openshift/origin/pkg/image/api/v1.NamedTagReference (map arbitrary string values to specific image locators)
    - name:                                                           # string (name of tag)
      annotations:                                                    # map[string]string (annotations associated with images using this tag)
        [string]:                                                     # string
      from:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectReference (a reference to an image stream tag or image stream this tag should track)
        kind:                                                         # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
        namespace:                                                    # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
        name:                                                         # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
        uid:                                                          # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
        apiVersion:                                                   # string (API version of the referent)
        resourceVersion:                                              # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
        fieldPath:                                                    # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  status:                                                             # github.com/openshift/origin/pkg/image/api/v1.ImageStreamStatus (current state of the stream as observed by the system)
    dockerImageRepository:                                            # string (represents the effective location this stream may be accessed at, may be empty until the server determines where the repository is located)
    tags:                                                             # []github.com/openshift/origin/pkg/image/api/v1.NamedTagEventList (historical record of images associated with each tag, the first entry is the currently tagged image)
    - tag:                                                            # string (the tag)
      items:                                                          # []github.com/openshift/origin/pkg/image/api/v1.TagEvent (list of tag events related to the tag)
      - created:                                                      # k8s.io/kubernetes/pkg/util.Time (when the event was created)
        dockerImageReference:                                         # string (the string that can be used to pull this image)
        image:                                                        # string (the image)


ImageStreamMapping
==================

ImageStreamMapping represents a mapping from a single tag to a Docker image as
well as the reference to the Docker image stream the image came from.

kind: ImageStreamMapping                                              # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
image:                                                                # github.com/openshift/origin/pkg/image/api/v1.Image (a Docker image)
  kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  dockerImageReference:                                               # string (string that can be used to pull this image)
  dockerImageMetadata:                                                # k8s.io/kubernetes/pkg/runtime.RawExtension (metadata about this image)
  dockerImageMetadataVersion:                                         # string (conveys version of the object, if empty defaults to '1.0')
  dockerImageManifest:                                                # string (raw JSON of the manifest)
tag:                                                                  # string (string value this image can be located with inside the stream)


ImageStreamTag
==============

ImageStreamTag represents an Image that is retrieved by tag name from an ImageStream.

kind: ImageStreamTag                                                  # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
image:                                                                # github.com/openshift/origin/pkg/image/api/v1.Image (the image associated with the ImageStream and tag)
  kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  dockerImageReference:                                               # string (string that can be used to pull this image)
  dockerImageMetadata:                                                # k8s.io/kubernetes/pkg/runtime.RawExtension (metadata about this image)
  dockerImageMetadataVersion:                                         # string (conveys version of the object, if empty defaults to '1.0')
  dockerImageManifest:                                                # string (raw JSON of the manifest)


OAuthAccessToken
================


kind: OAuthAccessToken                                                # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
clientName:                                                           # string (references the client that created this token)
expiresIn:                                                            # int64 (is the seconds from creation time before this token expires)
scopes:                                                               # []string (list of requested scopes)
- [string]                                                            #
redirectURI:                                                          # string (redirection URI associated with the token)
userName:                                                             # string (user name associated with this token)
userUID:                                                              # string (unique UID associated with this token)
authorizeToken:                                                       # string (contains the token that authorized this token)
refreshToken:                                                         # string (optional value by which this token can be renewed)


OAuthAccessTokenList
====================


kind: OAuthAccessTokenList                                            # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/oauth/api/v1.OAuthAccessToken (list of oauth access tokens)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  clientName:                                                         # string (references the client that created this token)
  expiresIn:                                                          # int64 (is the seconds from creation time before this token expires)
  scopes:                                                             # []string (list of requested scopes)
  - [string]                                                          #
  redirectURI:                                                        # string (redirection URI associated with the token)
  userName:                                                           # string (user name associated with this token)
  userUID:                                                            # string (unique UID associated with this token)
  authorizeToken:                                                     # string (contains the token that authorized this token)
  refreshToken:                                                       # string (optional value by which this token can be renewed)


OAuthAuthorizeToken
===================


kind: OAuthAuthorizeToken                                             # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
clientName:                                                           # string (references the client that created this token)
expiresIn:                                                            # int64 (seconds from creation time before this token expires)
scopes:                                                               # []string (list of requested scopes)
- [string]                                                            #
redirectURI:                                                          # string (redirection URI associated with the token)
state:                                                                # string (state data from request)
userName:                                                             # string (user name associated with this token)
userUID:                                                              # string (unique UID associated with this token.  userUID and userName must both match for this token to be valid)


OAuthAuthorizeTokenList
=======================


kind: OAuthAuthorizeTokenList                                         # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/oauth/api/v1.OAuthAuthorizeToken (list of oauth authorization tokens)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  clientName:                                                         # string (references the client that created this token)
  expiresIn:                                                          # int64 (seconds from creation time before this token expires)
  scopes:                                                             # []string (list of requested scopes)
  - [string]                                                          #
  redirectURI:                                                        # string (redirection URI associated with the token)
  state:                                                              # string (state data from request)
  userName:                                                           # string (user name associated with this token)
  userUID:                                                            # string (unique UID associated with this token.  userUID and userName must both match for this token to be valid)


OAuthClient
===========


kind: OAuthClient                                                     # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
secret:                                                               # string (unique secret associated with a client)
respondWithChallenges:                                                # bool (indicates whether the client wants authentication needed responses made in the form of challenges instead of redirects)
redirectURIs:                                                         # []string (valid redirection URIs associated with a client)
- [string]                                                            #


OAuthClientAuthorization
========================


kind: OAuthClientAuthorization                                        # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
clientName:                                                           # string (references the client that created this authorization)
userName:                                                             # string (user name that authorized this client)
userUID:                                                              # string (unique UID associated with this authorization. userUID and userName must both match for this authorization to be valid)
scopes:                                                               # []string (list of granted scopes)
- [string]                                                            #


OAuthClientAuthorizationList
============================


kind: OAuthClientAuthorizationList                                    # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/oauth/api/v1.OAuthClientAuthorization (list of oauth client authorizations)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  clientName:                                                         # string (references the client that created this authorization)
  userName:                                                           # string (user name that authorized this client)
  userUID:                                                            # string (unique UID associated with this authorization. userUID and userName must both match for this authorization to be valid)
  scopes:                                                             # []string (list of granted scopes)
  - [string]                                                          #


OAuthClientList
===============


kind: OAuthClientList                                                 # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/oauth/api/v1.OAuthClient (list of oauth clients)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  secret:                                                             # string (unique secret associated with a client)
  respondWithChallenges:                                              # bool (indicates whether the client wants authentication needed responses made in the form of challenges instead of redirects)
  redirectURIs:                                                       # []string (valid redirection URIs associated with a client)
  - [string]                                                          #


Project
=======

Project is a logical top-level container for a set of origin resources

kind: Project                                                         # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
spec:                                                                 # github.com/openshift/origin/pkg/project/api/v1.ProjectSpec (spec defines the behavior of the Project)
  finalizers:                                                         # []k8s.io/kubernetes/pkg/api/v1.FinalizerName (an opaque list of values that must be empty to permanently remove object from storage)
  - [k8s.io/kubernetes/pkg/api/v1.FinalizerName]                      #
status:                                                               # github.com/openshift/origin/pkg/project/api/v1.ProjectStatus (status describes the current status of a Project; read-only)
  phase: Active|Terminating                                           # k8s.io/kubernetes/pkg/api/v1.NamespacePhase (phase is the current lifecycle phase of the project)


ProjectList
===========

ProjectList is a list of Project objects.

kind: ProjectList                                                     # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/project/api/v1.Project (list of projects)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  spec:                                                               # github.com/openshift/origin/pkg/project/api/v1.ProjectSpec (spec defines the behavior of the Project)
    finalizers:                                                       # []k8s.io/kubernetes/pkg/api/v1.FinalizerName (an opaque list of values that must be empty to permanently remove object from storage)
    - [k8s.io/kubernetes/pkg/api/v1.FinalizerName]                    #
  status:                                                             # github.com/openshift/origin/pkg/project/api/v1.ProjectStatus (status describes the current status of a Project; read-only)
    phase: Active|Terminating                                         # k8s.io/kubernetes/pkg/api/v1.NamespacePhase (phase is the current lifecycle phase of the project)


ProjectRequest
==============


kind: ProjectRequest                                                  # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
displayName:                                                          # string (display name to apply to a project)
description:                                                          # string (description to apply to a project)


Route
=====

Route encapsulates the inputs needed to connect an alias to endpoints.

kind: Route                                                           # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
spec:                                                                 # github.com/openshift/origin/pkg/route/api/v1.RouteSpec (desired state of the route)
  host:                                                               # string (optional: alias/dns that points to the service, must follow DNS 952 subdomain conventions)
  path:                                                               # string (optional: path that the router watches to route traffic to the service)
  to:                                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectReference (an object the route points to.  only the service kind is allowed, and it will be defaulted to a service.)
    kind:                                                             # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    namespace:                                                        # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    name:                                                             # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  tls:                                                                # github.com/openshift/origin/pkg/route/api/v1.TLSConfig (provides the ability to configure certificates and termination for the route)
    termination: edge|passthrough|reencrypt                           # github.com/openshift/origin/pkg/route/api/v1.TLSTerminationType (indicates termination type.  if not set, any termination config will be ignored)
    certificate:                                                      # string (provides certificate contents)
    key:                                                              # string (provides key file contents)
    caCertificate:                                                    # string (provides the cert authority certificate contents)
    destinationCACertificate:                                         # string (provides the contents of the ca certificate of the final destination.  When using re-encrypt termination this file should be provided in order to have routers use it for health checks on the secure connection)
status:                                                               # github.com/openshift/origin/pkg/route/api/v1.RouteStatus (current state of the route)


RouteList
=========

RouteList is a collection of Routes.

kind: RouteList                                                       # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/route/api/v1.Route (list of routes)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  spec:                                                               # github.com/openshift/origin/pkg/route/api/v1.RouteSpec (desired state of the route)
    host:                                                             # string (optional: alias/dns that points to the service, must follow DNS 952 subdomain conventions)
    path:                                                             # string (optional: path that the router watches to route traffic to the service)
    to:                                                               # k8s.io/kubernetes/pkg/api/v1.ObjectReference (an object the route points to.  only the service kind is allowed, and it will be defaulted to a service.)
      kind:                                                           # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
      namespace:                                                      # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
      name:                                                           # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
      uid:                                                            # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
      apiVersion:                                                     # string (API version of the referent)
      resourceVersion:                                                # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
      fieldPath:                                                      # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
    tls:                                                              # github.com/openshift/origin/pkg/route/api/v1.TLSConfig (provides the ability to configure certificates and termination for the route)
      termination: edge|passthrough|reencrypt                         # github.com/openshift/origin/pkg/route/api/v1.TLSTerminationType (indicates termination type.  if not set, any termination config will be ignored)
      certificate:                                                    # string (provides certificate contents)
      key:                                                            # string (provides key file contents)
      caCertificate:                                                  # string (provides the cert authority certificate contents)
      destinationCACertificate:                                       # string (provides the contents of the ca certificate of the final destination.  When using re-encrypt termination this file should be provided in order to have routers use it for health checks on the secure connection)
  status:                                                             # github.com/openshift/origin/pkg/route/api/v1.RouteStatus (current state of the route)


ClusterNetwork
==============


kind: ClusterNetwork                                                  # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
network:                                                              # string (CIDR string to specify the global overlay network's L3 space)
hostsubnetlength:                                                     # int (number of bits to allocate to each host's subnet e.g. 8 would mean a /24 network on the host)
serviceNetwork:                                                       # string (CIDR string to specify the service network)


ClusterNetworkList
==================


kind: ClusterNetworkList                                              # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/sdn/api/v1.ClusterNetwork (list of cluster networks)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  network:                                                            # string (CIDR string to specify the global overlay network's L3 space)
  hostsubnetlength:                                                   # int (number of bits to allocate to each host's subnet e.g. 8 would mean a /24 network on the host)
  serviceNetwork:                                                     # string (CIDR string to specify the service network)


HostSubnet
==========

HostSubnet encapsulates the inputs needed to define the container subnet network on a node

kind: HostSubnet                                                      # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
host:                                                                 # string (Name of the host that is registered at the master. A lease will be sought after this name.)
hostIP:                                                               # string (IP address to be used as vtep by other hosts in the overlay network)
subnet:                                                               # string (Actual subnet CIDR lease assigned to the host)


HostSubnetList
==============

HostSubnetList is a collection of HostSubnets

kind: HostSubnetList                                                  # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/sdn/api/v1.HostSubnet (list of host subnets)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  host:                                                               # string (Name of the host that is registered at the master. A lease will be sought after this name.)
  hostIP:                                                             # string (IP address to be used as vtep by other hosts in the overlay network)
  subnet:                                                             # string (Actual subnet CIDR lease assigned to the host)


NetNamespace
============

NetNamespace encapsulates the inputs needed to define a unique network namespace on the cluster

kind: NetNamespace                                                    # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
netname:                                                              # string (Name of the network namespace.)
netid:                                                                # uint (NetID of the network namespace assigned to each overlay network packet.)


NetNamespaceList
================

NetNamespaceList is a collection of NetNamespaces

kind: NetNamespaceList                                                # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/sdn/api/v1.NetNamespace (list of net namespaces)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  netname:                                                            # string (Name of the network namespace.)
  netid:                                                              # uint (NetID of the network namespace assigned to each overlay network packet.)


Template
========

Template contains the inputs needed to produce a Config.

kind: Template                                                        # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
objects:                                                              # []k8s.io/kubernetes/pkg/runtime.RawExtension (list of objects to include in the template)
parameters:                                                           # []github.com/openshift/origin/pkg/template/api/v1.Parameter (optional: list of parameters used during template to config transformation)
- name:                                                               # string (name of the parameter)
  displayName:                                                        # string (optional: provides human readable name for the parameter)
  description:                                                        # string (optional: describes the parameter)
  value:                                                              # string (optional: holds the parameter data.  if specified, the generator is ignored.  the value replaces all occurrences of the parameter ${Name} expression during template to config transformation)
  generate:                                                           # string (optional: generate specifies the generator to be used to generate random string from an input value specified by the from field.  the result string is stored in the value field. if not specified, the value field is untouched)
  from:                                                               # string (input value for the generator)
  required:                                                           # bool (indicates the parameter must have a non-empty value or be generated)
labels:                                                               # map[string]string (optional: list of lables that are applied to every object during the template to config transformation)
  [string]:                                                           # string


TemplateList
============

TemplateList is a list of Template objects.

kind: TemplateList                                                    # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/template/api/v1.Template (list of templates)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  objects:                                                            # []k8s.io/kubernetes/pkg/runtime.RawExtension (list of objects to include in the template)
  parameters:                                                         # []github.com/openshift/origin/pkg/template/api/v1.Parameter (optional: list of parameters used during template to config transformation)
  - name:                                                             # string (name of the parameter)
    displayName:                                                      # string (optional: provides human readable name for the parameter)
    description:                                                      # string (optional: describes the parameter)
    value:                                                            # string (optional: holds the parameter data.  if specified, the generator is ignored.  the value replaces all occurrences of the parameter ${Name} expression during template to config transformation)
    generate:                                                         # string (optional: generate specifies the generator to be used to generate random string from an input value specified by the from field.  the result string is stored in the value field. if not specified, the value field is untouched)
    from:                                                             # string (input value for the generator)
    required:                                                         # bool (indicates the parameter must have a non-empty value or be generated)
  labels:                                                             # map[string]string (optional: list of lables that are applied to every object during the template to config transformation)
    [string]:                                                         # string


Group
=====

Group represents a referenceable set of Users

kind: Group                                                           # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
users:                                                                # []string (list of users in this group)
- [string]                                                            #


GroupList
=========


kind: GroupList                                                       # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/user/api/v1.Group (list of groups)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  users:                                                              # []string (list of users in this group)
  - [string]                                                          #


Identity
========


kind: Identity                                                        # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
providerName:                                                         # string (source of identity information)
providerUserName:                                                     # string (uniquely represents this identity in the scope of the provider)
user:                                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to the user this identity is associated with.  both name and uid must be set)
  kind:                                                               # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  namespace:                                                          # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  name:                                                               # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
extra:                                                                # map[string]string (extra information for this identity)
  [string]:                                                           # string


IdentityList
============


kind: IdentityList                                                    # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/user/api/v1.Identity (list of identities)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  providerName:                                                       # string (source of identity information)
  providerUserName:                                                   # string (uniquely represents this identity in the scope of the provider)
  user:                                                               # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to the user this identity is associated with.  both name and uid must be set)
    kind:                                                             # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
    namespace:                                                        # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    name:                                                             # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  extra:                                                              # map[string]string (extra information for this identity)
    [string]:                                                         # string


User
====


kind: User                                                            # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
fullName:                                                             # string (full name of user)
identities:                                                           # []string (list of identities)
- [string]                                                            #
groups:                                                               # []string (list of groups)
- [string]                                                            #


UserIdentityMapping
===================


kind: UserIdentityMapping                                             # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
  name:                                                               # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
  namespace:                                                          # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  generation:                                                         # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
  creationTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  deletionTimestamp:                                                  # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
    [string]:                                                         # string
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
    [string]:                                                         # string
identity:                                                             # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to an identity)
  kind:                                                               # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  namespace:                                                          # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  name:                                                               # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
user:                                                                 # k8s.io/kubernetes/pkg/api/v1.ObjectReference (reference to a user)
  kind:                                                               # string (kind of the referent; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  namespace:                                                          # string (namespace of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
  name:                                                               # string (name of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
  uid:                                                                # k8s.io/kubernetes/pkg/types.UID (uid of the referent; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])


UserList
========


kind: UserList                                                        # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
apiVersion: v1                                                        # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
metadata:                                                             # k8s.io/kubernetes/pkg/api/v1.ListMeta
  selfLink:                                                           # string (URL for the object; populated by the system, read-only)
  resourceVersion:                                                    # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
items:                                                                # []github.com/openshift/origin/pkg/user/api/v1.User (list of users)
- kind:                                                               # string (kind of object, in CamelCase; cannot be updated; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds)
  apiVersion:                                                         # string (version of the schema the object should have; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources)
  metadata:                                                           # k8s.io/kubernetes/pkg/api/v1.ObjectMeta
    name:                                                             # string (string that identifies an object. Must be unique within a namespace; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names)
    generateName:                                                     # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency)
    namespace:                                                        # string (namespace of the object; must be a DNS_LABEL; cannot be updated; see http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md)
    selfLink:                                                         # string (URL for the object; populated by the system, read-only)
    uid:                                                              # k8s.io/kubernetes/pkg/types.UID (unique UUID across space and time; populated by the system; read-only; see http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids)
    resourceVersion:                                                  # string (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; populated by the system, read-only; value must be treated as opaque by clients and passed unmodified back to the server: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency)
    generation:                                                       # int64 (a sequence number representing a specific generation of the desired state; populated by the system; read-only)
    creationTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; populated by the system, read-only; null for lists; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    deletionTimestamp:                                                # k8s.io/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object will be deleted; populated by the system when a graceful deletion is requested, read-only; if not set, graceful deletion of the object has not been requested; see http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata)
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize objects; may match selectors of replication controllers and services; see http://releases.k8s.io/HEAD/docs/user-guide/labels.md)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about objects; see http://releases.k8s.io/HEAD/docs/user-guide/annotations.md)
      [string]:                                                       # string
  fullName:                                                           # string (full name of user)
  identities:                                                         # []string (list of identities)
  - [string]                                                          #
  groups:                                                             # []string (list of groups)
  - [string]                                                          #



Binding
=======

kind: Binding                                                         # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
podID:                                                                # string (name of the pod to bind)
host:                                                                 # string (host to which to bind the specified pod)


BoundPod
========

kind: BoundPod                                                        # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodSpec (specification of the desired state of containers and volumes comprising the pod)
  volumes:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Volume (list of volumes that can be mounted by containers belonging to the pod)
  - name:                                                             # string (volume name; must be a DNS_LABEL and unique within the pod)
    source:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeSource (location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir)
      hostDir:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HostPath (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
        path:                                                         # string (path of the directory on the host)
      emptyDir:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EmptyDir (temporary directory that shares a pod's lifetime)
      persistentDisk:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GCEPersistentDisk (GCE disk resource attached to the host machine on demand)
        pdName:                                                       # string (unique name of the PD resource in GCE)
        fsType:                                                       # string (file system type to mount, such as ext4, xfs, ntfs)
        partition:                                                    # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
        readOnly:                                                     # bool (read-only if true, read-write otherwise (false or unspecified))
      gitRepo:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GitRepo (git repository at a particular revision)
        repository:                                                   # string (repository URL)
        revision:                                                     # string (commit hash for the specified revision)
  containers:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Container (list of containers belonging to the pod)
  - name:                                                             # string (name of the container; must be a DNS_LABEL and unique within the pod)
    image:                                                            # string (Docker image name)
    command:                                                          # []string (command argv array; not executed within a shell; defaults to entrypoint or command in the image)
    - [string]                                                        # 
    workingDir:                                                       # string (container's working directory; defaults to image's default)
    ports:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Port (list of ports to expose from the container)
    - name:                                                           # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
      hostPort:                                                       # int (number of port to expose on the host; most containers do not need this)
      containerPort:                                                  # int (number of port to expose on the pod's IP address)
      protocol: TCP|UDP                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
      hostIP:                                                         # string (host IP to bind the port to)
    env:                                                              # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EnvVar (list of environment variables to set in the container)
    - name:                                                           # string (name of the environment variable; must be a C_IDENTIFIER)
      value:                                                          # string (value of the environment variable; defaults to empty string)
    resources:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceRequirements (Compute Resources required by this container)
      limits:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (Maximum amount of compute resources allowed)
        [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
    cpu:                                                              # int (CPU share in thousandths of a core)
    memory:                                                           # int64 (memory limit in bytes; defaults to unlimited)
    volumeMounts:                                                     # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeMount (pod volumes to mount into the container's filesystem)
    - name:                                                           # string (name of the volume to mount)
      readOnly:                                                       # bool (mounted read-only if true, read-write otherwise (false or unspecified))
      mountPath:                                                      # string (path within the container at which the volume should be mounted)
    livenessProbe:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container liveness; container will be restarted if the probe fails)
      httpGet:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
        path:                                                         # string (path to access on the HTTP server)
        port:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
        host:                                                         # string (hostname to connect to; defaults to pod IP)
      tcpSocket:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
        port:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      exec:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
        command:                                                      # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
        - [string]                                                    # 
      initialDelaySeconds:                                            # int64 (number of seconds after the container has started before liveness probes are initiated)
      timeoutSeconds:                                                 # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
    readinessProbe:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails)
      httpGet:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
        path:                                                         # string (path to access on the HTTP server)
        port:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
        host:                                                         # string (hostname to connect to; defaults to pod IP)
      tcpSocket:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
        port:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      exec:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
        command:                                                      # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
        - [string]                                                    # 
      initialDelaySeconds:                                            # int64 (number of seconds after the container has started before liveness probes are initiated)
      timeoutSeconds:                                                 # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
    lifecycle:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Lifecycle (actions that the management system should take in response to container lifecycle events)
      postStart:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      preStop:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
    terminationMessagePath:                                           # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log)
    privileged:                                                       # bool (whether or not the container is granted privileged status; defaults to false)
    imagePullPolicy: PullAlways|PullIfNotPresent|PullNever            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PullPolicy (image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise)
    capabilities:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Capabilities (capabilities for container)
      add:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (added capabilities)
      - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
      drop:                                                           # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (droped capabilities)
      - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
  restartPolicy:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
    always:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyAlways (always restart the container after termination)
    onFailure:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyOnFailure (restart the container if it fails for any reason, but not if it succeeds (exit 0))
    never:                                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyNever (never restart the container)
  dnsPolicy: ClusterFirst|Default                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
  nodeSelector:                                                       # map[string]string (selector which must match a node's labels for the pod to be scheduled on that node)
    [string]:                                                         # string
  host:                                                               # string (host requested for this pod)


BoundPods
=========

kind: BoundPods                                                       # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
host:                                                                 # string (name of a node that these pods were bound to)
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.BoundPod (list of all pods bound to a given host)
- kind:                                                               # string (kind of object, in CamelCase)
  id:                                                                 # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
  selfLink:                                                           # string (URL for the object)
  resourceVersion:                                                    # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
  apiVersion:                                                         # string (version of the schema the object should have)
  namespace:                                                          # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
    [string]:                                                         # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodSpec (specification of the desired state of containers and volumes comprising the pod)
    volumes:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Volume (list of volumes that can be mounted by containers belonging to the pod)
    - name:                                                           # string (volume name; must be a DNS_LABEL and unique within the pod)
      source:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeSource (location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir)
        hostDir:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HostPath (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
          path:                                                       # string (path of the directory on the host)
        emptyDir:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EmptyDir (temporary directory that shares a pod's lifetime)
        persistentDisk:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GCEPersistentDisk (GCE disk resource attached to the host machine on demand)
          pdName:                                                     # string (unique name of the PD resource in GCE)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          partition:                                                  # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified))
        gitRepo:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GitRepo (git repository at a particular revision)
          repository:                                                 # string (repository URL)
          revision:                                                   # string (commit hash for the specified revision)
    containers:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Container (list of containers belonging to the pod)
    - name:                                                           # string (name of the container; must be a DNS_LABEL and unique within the pod)
      image:                                                          # string (Docker image name)
      command:                                                        # []string (command argv array; not executed within a shell; defaults to entrypoint or command in the image)
      - [string]                                                      # 
      workingDir:                                                     # string (container's working directory; defaults to image's default)
      ports:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Port (list of ports to expose from the container)
      - name:                                                         # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
        hostPort:                                                     # int (number of port to expose on the host; most containers do not need this)
        containerPort:                                                # int (number of port to expose on the pod's IP address)
        protocol: TCP|UDP                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
        hostIP:                                                       # string (host IP to bind the port to)
      env:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EnvVar (list of environment variables to set in the container)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string)
      resources:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceRequirements (Compute Resources required by this container)
        limits:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (Maximum amount of compute resources allowed)
          [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
      cpu:                                                            # int (CPU share in thousandths of a core)
      memory:                                                         # int64 (memory limit in bytes; defaults to unlimited)
      volumeMounts:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeMount (pod volumes to mount into the container's filesystem)
      - name:                                                         # string (name of the volume to mount)
        readOnly:                                                     # bool (mounted read-only if true, read-write otherwise (false or unspecified))
        mountPath:                                                    # string (path within the container at which the volume should be mounted)
      livenessProbe:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container liveness; container will be restarted if the probe fails)
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        initialDelaySeconds:                                          # int64 (number of seconds after the container has started before liveness probes are initiated)
        timeoutSeconds:                                               # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
      readinessProbe:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails)
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        initialDelaySeconds:                                          # int64 (number of seconds after the container has started before liveness probes are initiated)
        timeoutSeconds:                                               # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
      lifecycle:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Lifecycle (actions that the management system should take in response to container lifecycle events)
        postStart:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        preStop:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      terminationMessagePath:                                         # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log)
      privileged:                                                     # bool (whether or not the container is granted privileged status; defaults to false)
      imagePullPolicy: PullAlways|PullIfNotPresent|PullNever          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PullPolicy (image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise)
      capabilities:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Capabilities (capabilities for container)
        add:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (added capabilities)
        - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
        drop:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (droped capabilities)
        - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
    restartPolicy:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
      always:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyAlways (always restart the container after termination)
      onFailure:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyOnFailure (restart the container if it fails for any reason, but not if it succeeds (exit 0))
      never:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyNever (never restart the container)
    dnsPolicy: ClusterFirst|Default                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
    nodeSelector:                                                     # map[string]string (selector which must match a node's labels for the pod to be scheduled on that node)
      [string]:                                                       # string
    host:                                                             # string (host requested for this pod)


ContainerManifestList
=====================

kind: ContainerManifestList                                           # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerManifest (list of pod container manifests)
- version:                                                            # string (manifest version; must be v1beta1)
  id:                                                                 # string (manifest name; must be a DNS_SUBDOMAIN)
  uuid:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (manifest UUID)
  volumes:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Volume (list of volumes that can be mounted by containers belonging to the pod)
  - name:                                                             # string (volume name; must be a DNS_LABEL and unique within the pod)
    source:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeSource (location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir)
      hostDir:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HostPath (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
        path:                                                         # string (path of the directory on the host)
      emptyDir:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EmptyDir (temporary directory that shares a pod's lifetime)
      persistentDisk:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GCEPersistentDisk (GCE disk resource attached to the host machine on demand)
        pdName:                                                       # string (unique name of the PD resource in GCE)
        fsType:                                                       # string (file system type to mount, such as ext4, xfs, ntfs)
        partition:                                                    # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
        readOnly:                                                     # bool (read-only if true, read-write otherwise (false or unspecified))
      gitRepo:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GitRepo (git repository at a particular revision)
        repository:                                                   # string (repository URL)
        revision:                                                     # string (commit hash for the specified revision)
  containers:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Container (list of containers belonging to the pod)
  - name:                                                             # string (name of the container; must be a DNS_LABEL and unique within the pod)
    image:                                                            # string (Docker image name)
    command:                                                          # []string (command argv array; not executed within a shell; defaults to entrypoint or command in the image)
    - [string]                                                        # 
    workingDir:                                                       # string (container's working directory; defaults to image's default)
    ports:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Port (list of ports to expose from the container)
    - name:                                                           # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
      hostPort:                                                       # int (number of port to expose on the host; most containers do not need this)
      containerPort:                                                  # int (number of port to expose on the pod's IP address)
      protocol: TCP|UDP                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
      hostIP:                                                         # string (host IP to bind the port to)
    env:                                                              # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EnvVar (list of environment variables to set in the container)
    - name:                                                           # string (name of the environment variable; must be a C_IDENTIFIER)
      value:                                                          # string (value of the environment variable; defaults to empty string)
    resources:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceRequirements (Compute Resources required by this container)
      limits:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (Maximum amount of compute resources allowed)
        [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
    cpu:                                                              # int (CPU share in thousandths of a core)
    memory:                                                           # int64 (memory limit in bytes; defaults to unlimited)
    volumeMounts:                                                     # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeMount (pod volumes to mount into the container's filesystem)
    - name:                                                           # string (name of the volume to mount)
      readOnly:                                                       # bool (mounted read-only if true, read-write otherwise (false or unspecified))
      mountPath:                                                      # string (path within the container at which the volume should be mounted)
    livenessProbe:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container liveness; container will be restarted if the probe fails)
      httpGet:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
        path:                                                         # string (path to access on the HTTP server)
        port:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
        host:                                                         # string (hostname to connect to; defaults to pod IP)
      tcpSocket:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
        port:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      exec:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
        command:                                                      # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
        - [string]                                                    # 
      initialDelaySeconds:                                            # int64 (number of seconds after the container has started before liveness probes are initiated)
      timeoutSeconds:                                                 # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
    readinessProbe:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails)
      httpGet:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
        path:                                                         # string (path to access on the HTTP server)
        port:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
        host:                                                         # string (hostname to connect to; defaults to pod IP)
      tcpSocket:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
        port:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      exec:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
        command:                                                      # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
        - [string]                                                    # 
      initialDelaySeconds:                                            # int64 (number of seconds after the container has started before liveness probes are initiated)
      timeoutSeconds:                                                 # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
    lifecycle:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Lifecycle (actions that the management system should take in response to container lifecycle events)
      postStart:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      preStop:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
    terminationMessagePath:                                           # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log)
    privileged:                                                       # bool (whether or not the container is granted privileged status; defaults to false)
    imagePullPolicy: PullAlways|PullIfNotPresent|PullNever            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PullPolicy (image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise)
    capabilities:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Capabilities (capabilities for container)
      add:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (added capabilities)
      - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
      drop:                                                           # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (droped capabilities)
      - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
  restartPolicy:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
    always:                                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyAlways (always restart the container after termination)
    onFailure:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyOnFailure (restart the container if it fails for any reason, but not if it succeeds (exit 0))
    never:                                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyNever (never restart the container)
  dnsPolicy: ClusterFirst|Default                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')


Endpoints
=========

kind: Endpoints                                                       # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
endpoints:                                                            # []string (list of endpoints corresponding to a service, of the form address:port, such as 10.10.1.1:1909)
- [string]                                                            # 


EndpointsList
=============

kind: EndpointsList                                                   # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Endpoints (list of service endpoint lists)
- kind:                                                               # string (kind of object, in CamelCase)
  id:                                                                 # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
  selfLink:                                                           # string (URL for the object)
  resourceVersion:                                                    # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
  apiVersion:                                                         # string (version of the schema the object should have)
  namespace:                                                          # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
    [string]:                                                         # string
  endpoints:                                                          # []string (list of endpoints corresponding to a service, of the form address:port, such as 10.10.1.1:1909)
  - [string]                                                          # 


Event
=====

kind: Event                                                           # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
involvedObject:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ObjectReference (object that this event is about)
  kind:                                                               # string (kind of the referent)
  namespace:                                                          # string (namespace of the referent)
  name:                                                               # string (id of the referent)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
  apiVersion:                                                         # string (API version of the referent)
  resourceVersion:                                                    # string (specific resourceVersion to which this reference is made, if any)
  fieldPath:                                                          # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
status:                                                               # string (short, machine understandable string that describes the current status of the referred object)
reason:                                                               # string (short, machine understandable string that gives the reason for the transition into the object's current status)
message:                                                              # string (human-readable description of the status of this operation)
source:                                                               # string (component reporting this event; short machine understandable string)
host:                                                                 # string (host name on which this event was generated)
timestamp:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the client recorded the event)
firstTimestamp:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (the time at which the event was first recorded)
lastTimestamp:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (the time at which the most recent occurance of this event was recorded)
count:                                                                # int (the number of times this event has occurred)


EventList
=========

kind: EventList                                                       # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Event (list of events)
- kind:                                                               # string (kind of object, in CamelCase)
  id:                                                                 # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
  selfLink:                                                           # string (URL for the object)
  resourceVersion:                                                    # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
  apiVersion:                                                         # string (version of the schema the object should have)
  namespace:                                                          # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
    [string]:                                                         # string
  involvedObject:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ObjectReference (object that this event is about)
    kind:                                                             # string (kind of the referent)
    namespace:                                                        # string (namespace of the referent)
    name:                                                             # string (id of the referent)
    uid:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (uid of the referent)
    apiVersion:                                                       # string (API version of the referent)
    resourceVersion:                                                  # string (specific resourceVersion to which this reference is made, if any)
    fieldPath:                                                        # string (if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2])
  status:                                                             # string (short, machine understandable string that describes the current status of the referred object)
  reason:                                                             # string (short, machine understandable string that gives the reason for the transition into the object's current status)
  message:                                                            # string (human-readable description of the status of this operation)
  source:                                                             # string (component reporting this event; short machine understandable string)
  host:                                                               # string (host name on which this event was generated)
  timestamp:                                                          # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (time at which the client recorded the event)
  firstTimestamp:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (the time at which the event was first recorded)
  lastTimestamp:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (the time at which the most recent occurance of this event was recorded)
  count:                                                              # int (the number of times this event has occurred)


LimitRange
==========

kind: LimitRange                                                      # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LimitRangeSpec
  limits:                                                             # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LimitRangeItem
  - type: Container|Pod                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LimitType
    max:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
    min:                                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString


LimitRangeList
==============

kind: LimitRangeList                                                  # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LimitRange
- kind:                                                               # string (kind of object, in CamelCase)
  id:                                                                 # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
  selfLink:                                                           # string (URL for the object)
  resourceVersion:                                                    # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
  apiVersion:                                                         # string (version of the schema the object should have)
  namespace:                                                          # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
    [string]:                                                         # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LimitRangeSpec
    limits:                                                           # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LimitRangeItem
    - type: Container|Pod                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LimitType
      max:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList
        [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
      min:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList
        [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString


List
====

kind: List                                                            # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/runtime.RawExtension (list of objects)
- - [byte]                                                            # 


Minion
======

kind: Minion                                                          # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
hostIP:                                                               # string (IP address of the node)
resources:                                                            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NodeResources (characterization of node resources)
  capacity:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (resource capacity of a node represented as a map of resource name to quantity of resource)
    [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NodeStatus (current status of node)
  phase: Pending|Running|Terminated                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NodePhase (node phase is the current lifecycle phase of the node)
  conditions:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NodeCondition (conditions is an array of current node conditions)
  - kind: Reachable|Ready                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NodeConditionKind (kind of the condition, one of reachable, ready)
    status: Full|None|Unknown                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ConditionStatus (status of the condition, one of full, none, unknown)
    lastProbeTime:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (last time the condition was probed)
    lastTransitionTime:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (last time the condition transit from one status to another)
    reason:                                                           # string ((brief) reason for the condition's last transition)
    message:                                                          # string (human readable message indicating details about last transition)
labels:                                                               # map[string]string (map of string keys and values that can be used to organize and categorize minions; labels of a minion assigned by the scheduler must match the scheduled pod's nodeSelector)
  [string]:                                                           # string


MinionList
==========

kind: MinionList                                                      # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Minion (list of nodes)
- kind:                                                               # string (kind of object, in CamelCase)
  id:                                                                 # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
  selfLink:                                                           # string (URL for the object)
  resourceVersion:                                                    # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
  apiVersion:                                                         # string (version of the schema the object should have)
  namespace:                                                          # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
    [string]:                                                         # string
  hostIP:                                                             # string (IP address of the node)
  resources:                                                          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NodeResources (characterization of node resources)
    capacity:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (resource capacity of a node represented as a map of resource name to quantity of resource)
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
  status:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NodeStatus (current status of node)
    phase: Pending|Running|Terminated                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NodePhase (node phase is the current lifecycle phase of the node)
    conditions:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NodeCondition (conditions is an array of current node conditions)
    - kind: Reachable|Ready                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NodeConditionKind (kind of the condition, one of reachable, ready)
      status: Full|None|Unknown                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ConditionStatus (status of the condition, one of full, none, unknown)
      lastProbeTime:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (last time the condition was probed)
      lastTransitionTime:                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (last time the condition transit from one status to another)
      reason:                                                         # string ((brief) reason for the condition's last transition)
      message:                                                        # string (human readable message indicating details about last transition)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize minions; labels of a minion assigned by the scheduler must match the scheduled pod's nodeSelector)
    [string]:                                                         # string


Namespace
=========

kind: Namespace                                                       # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
labels:                                                               # map[string]string (map of string keys and values that can be used to organize and categorize namespaces)
  [string]:                                                           # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NamespaceSpec
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NamespaceStatus


NamespaceList
=============

kind: NamespaceList                                                   # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Namespace
- kind:                                                               # string (kind of object, in CamelCase)
  id:                                                                 # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
  selfLink:                                                           # string (URL for the object)
  resourceVersion:                                                    # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
  apiVersion:                                                         # string (version of the schema the object should have)
  namespace:                                                          # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
    [string]:                                                         # string
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize namespaces)
    [string]:                                                         # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NamespaceSpec
  status:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.NamespaceStatus


Pod
===

kind: Pod                                                             # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
labels:                                                               # map[string]string (map of string keys and values that can be used to organize and categorize pods; may match selectors of replication controllers and services)
  [string]:                                                           # string
desiredState:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodState (specification of the desired state of the pod)
  manifest:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerManifest (manifest of containers and volumes comprising the pod)
    version:                                                          # string (manifest version; must be v1beta1)
    id:                                                               # string (manifest name; must be a DNS_SUBDOMAIN)
    uuid:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (manifest UUID)
    volumes:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Volume (list of volumes that can be mounted by containers belonging to the pod)
    - name:                                                           # string (volume name; must be a DNS_LABEL and unique within the pod)
      source:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeSource (location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir)
        hostDir:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HostPath (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
          path:                                                       # string (path of the directory on the host)
        emptyDir:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EmptyDir (temporary directory that shares a pod's lifetime)
        persistentDisk:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GCEPersistentDisk (GCE disk resource attached to the host machine on demand)
          pdName:                                                     # string (unique name of the PD resource in GCE)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          partition:                                                  # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified))
        gitRepo:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GitRepo (git repository at a particular revision)
          repository:                                                 # string (repository URL)
          revision:                                                   # string (commit hash for the specified revision)
    containers:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Container (list of containers belonging to the pod)
    - name:                                                           # string (name of the container; must be a DNS_LABEL and unique within the pod)
      image:                                                          # string (Docker image name)
      command:                                                        # []string (command argv array; not executed within a shell; defaults to entrypoint or command in the image)
      - [string]                                                      # 
      workingDir:                                                     # string (container's working directory; defaults to image's default)
      ports:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Port (list of ports to expose from the container)
      - name:                                                         # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
        hostPort:                                                     # int (number of port to expose on the host; most containers do not need this)
        containerPort:                                                # int (number of port to expose on the pod's IP address)
        protocol: TCP|UDP                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
        hostIP:                                                       # string (host IP to bind the port to)
      env:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EnvVar (list of environment variables to set in the container)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string)
      resources:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceRequirements (Compute Resources required by this container)
        limits:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (Maximum amount of compute resources allowed)
          [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
      cpu:                                                            # int (CPU share in thousandths of a core)
      memory:                                                         # int64 (memory limit in bytes; defaults to unlimited)
      volumeMounts:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeMount (pod volumes to mount into the container's filesystem)
      - name:                                                         # string (name of the volume to mount)
        readOnly:                                                     # bool (mounted read-only if true, read-write otherwise (false or unspecified))
        mountPath:                                                    # string (path within the container at which the volume should be mounted)
      livenessProbe:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container liveness; container will be restarted if the probe fails)
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        initialDelaySeconds:                                          # int64 (number of seconds after the container has started before liveness probes are initiated)
        timeoutSeconds:                                               # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
      readinessProbe:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails)
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        initialDelaySeconds:                                          # int64 (number of seconds after the container has started before liveness probes are initiated)
        timeoutSeconds:                                               # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
      lifecycle:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Lifecycle (actions that the management system should take in response to container lifecycle events)
        postStart:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        preStop:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      terminationMessagePath:                                         # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log)
      privileged:                                                     # bool (whether or not the container is granted privileged status; defaults to false)
      imagePullPolicy: PullAlways|PullIfNotPresent|PullNever          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PullPolicy (image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise)
      capabilities:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Capabilities (capabilities for container)
        add:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (added capabilities)
        - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
        drop:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (droped capabilities)
        - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
    restartPolicy:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
      always:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyAlways (always restart the container after termination)
      onFailure:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyOnFailure (restart the container if it fails for any reason, but not if it succeeds (exit 0))
      never:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyNever (never restart the container)
    dnsPolicy: ClusterFirst|Default                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
  status: Running|Succeeded|Terminated|Unknown|Waiting                # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodStatus (current condition of the pod, Waiting, Running, or Terminated)
  Condition:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodCondition (current service state of pod)
  - kind: Ready                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodConditionKind
    status: Full|None|Unknown                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ConditionStatus
  message:                                                            # string (human readable message indicating details about why the pod is in this condition)
  host:                                                               # string (host to which the pod is assigned; empty if not yet scheduled)
  hostIP:                                                             # string (IP address of the host to which the pod is assigned; empty if not yet scheduled)
  podIP:                                                              # string (IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated)
  info:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodInfo (map of container name to container status)
    [string]:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerStatus
currentState:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodState (current state of the pod)
  manifest:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerManifest (manifest of containers and volumes comprising the pod)
    version:                                                          # string (manifest version; must be v1beta1)
    id:                                                               # string (manifest name; must be a DNS_SUBDOMAIN)
    uuid:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (manifest UUID)
    volumes:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Volume (list of volumes that can be mounted by containers belonging to the pod)
    - name:                                                           # string (volume name; must be a DNS_LABEL and unique within the pod)
      source:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeSource (location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir)
        hostDir:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HostPath (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
          path:                                                       # string (path of the directory on the host)
        emptyDir:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EmptyDir (temporary directory that shares a pod's lifetime)
        persistentDisk:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GCEPersistentDisk (GCE disk resource attached to the host machine on demand)
          pdName:                                                     # string (unique name of the PD resource in GCE)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          partition:                                                  # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified))
        gitRepo:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GitRepo (git repository at a particular revision)
          repository:                                                 # string (repository URL)
          revision:                                                   # string (commit hash for the specified revision)
    containers:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Container (list of containers belonging to the pod)
    - name:                                                           # string (name of the container; must be a DNS_LABEL and unique within the pod)
      image:                                                          # string (Docker image name)
      command:                                                        # []string (command argv array; not executed within a shell; defaults to entrypoint or command in the image)
      - [string]                                                      # 
      workingDir:                                                     # string (container's working directory; defaults to image's default)
      ports:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Port (list of ports to expose from the container)
      - name:                                                         # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
        hostPort:                                                     # int (number of port to expose on the host; most containers do not need this)
        containerPort:                                                # int (number of port to expose on the pod's IP address)
        protocol: TCP|UDP                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
        hostIP:                                                       # string (host IP to bind the port to)
      env:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EnvVar (list of environment variables to set in the container)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string)
      resources:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceRequirements (Compute Resources required by this container)
        limits:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (Maximum amount of compute resources allowed)
          [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
      cpu:                                                            # int (CPU share in thousandths of a core)
      memory:                                                         # int64 (memory limit in bytes; defaults to unlimited)
      volumeMounts:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeMount (pod volumes to mount into the container's filesystem)
      - name:                                                         # string (name of the volume to mount)
        readOnly:                                                     # bool (mounted read-only if true, read-write otherwise (false or unspecified))
        mountPath:                                                    # string (path within the container at which the volume should be mounted)
      livenessProbe:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container liveness; container will be restarted if the probe fails)
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        initialDelaySeconds:                                          # int64 (number of seconds after the container has started before liveness probes are initiated)
        timeoutSeconds:                                               # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
      readinessProbe:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails)
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        initialDelaySeconds:                                          # int64 (number of seconds after the container has started before liveness probes are initiated)
        timeoutSeconds:                                               # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
      lifecycle:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Lifecycle (actions that the management system should take in response to container lifecycle events)
        postStart:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        preStop:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      terminationMessagePath:                                         # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log)
      privileged:                                                     # bool (whether or not the container is granted privileged status; defaults to false)
      imagePullPolicy: PullAlways|PullIfNotPresent|PullNever          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PullPolicy (image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise)
      capabilities:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Capabilities (capabilities for container)
        add:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (added capabilities)
        - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
        drop:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (droped capabilities)
        - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
    restartPolicy:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
      always:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyAlways (always restart the container after termination)
      onFailure:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyOnFailure (restart the container if it fails for any reason, but not if it succeeds (exit 0))
      never:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyNever (never restart the container)
    dnsPolicy: ClusterFirst|Default                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
  status: Running|Succeeded|Terminated|Unknown|Waiting                # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodStatus (current condition of the pod, Waiting, Running, or Terminated)
  Condition:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodCondition (current service state of pod)
  - kind: Ready                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodConditionKind
    status: Full|None|Unknown                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ConditionStatus
  message:                                                            # string (human readable message indicating details about why the pod is in this condition)
  host:                                                               # string (host to which the pod is assigned; empty if not yet scheduled)
  hostIP:                                                             # string (IP address of the host to which the pod is assigned; empty if not yet scheduled)
  podIP:                                                              # string (IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated)
  info:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodInfo (map of container name to container status)
    [string]:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerStatus
nodeSelector:                                                         # map[string]string (selector which must match a node's labels for the pod to be scheduled on that node)
  [string]:                                                           # string


PodContainerInfo
================

kind: PodContainerInfo                                                # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
containerInfo:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodInfo (information about each container in this pod)
  [string]:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerStatus


PodList
=======

kind: PodList                                                         # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Pod (list of pods)
- kind:                                                               # string (kind of object, in CamelCase)
  id:                                                                 # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
  selfLink:                                                           # string (URL for the object)
  resourceVersion:                                                    # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
  apiVersion:                                                         # string (version of the schema the object should have)
  namespace:                                                          # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
    [string]:                                                         # string
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize pods; may match selectors of replication controllers and services)
    [string]:                                                         # string
  desiredState:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodState (specification of the desired state of the pod)
    manifest:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerManifest (manifest of containers and volumes comprising the pod)
      version:                                                        # string (manifest version; must be v1beta1)
      id:                                                             # string (manifest name; must be a DNS_SUBDOMAIN)
      uuid:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (manifest UUID)
      volumes:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Volume (list of volumes that can be mounted by containers belonging to the pod)
      - name:                                                         # string (volume name; must be a DNS_LABEL and unique within the pod)
        source:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeSource (location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir)
          hostDir:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HostPath (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
            path:                                                     # string (path of the directory on the host)
          emptyDir:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EmptyDir (temporary directory that shares a pod's lifetime)
          persistentDisk:                                             # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GCEPersistentDisk (GCE disk resource attached to the host machine on demand)
            pdName:                                                   # string (unique name of the PD resource in GCE)
            fsType:                                                   # string (file system type to mount, such as ext4, xfs, ntfs)
            partition:                                                # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
            readOnly:                                                 # bool (read-only if true, read-write otherwise (false or unspecified))
          gitRepo:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GitRepo (git repository at a particular revision)
            repository:                                               # string (repository URL)
            revision:                                                 # string (commit hash for the specified revision)
      containers:                                                     # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Container (list of containers belonging to the pod)
      - name:                                                         # string (name of the container; must be a DNS_LABEL and unique within the pod)
        image:                                                        # string (Docker image name)
        command:                                                      # []string (command argv array; not executed within a shell; defaults to entrypoint or command in the image)
        - [string]                                                    # 
        workingDir:                                                   # string (container's working directory; defaults to image's default)
        ports:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Port (list of ports to expose from the container)
        - name:                                                       # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
          hostPort:                                                   # int (number of port to expose on the host; most containers do not need this)
          containerPort:                                              # int (number of port to expose on the pod's IP address)
          protocol: TCP|UDP                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
          hostIP:                                                     # string (host IP to bind the port to)
        env:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EnvVar (list of environment variables to set in the container)
        - name:                                                       # string (name of the environment variable; must be a C_IDENTIFIER)
          value:                                                      # string (value of the environment variable; defaults to empty string)
        resources:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceRequirements (Compute Resources required by this container)
          limits:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (Maximum amount of compute resources allowed)
            [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
        cpu:                                                          # int (CPU share in thousandths of a core)
        memory:                                                       # int64 (memory limit in bytes; defaults to unlimited)
        volumeMounts:                                                 # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeMount (pod volumes to mount into the container's filesystem)
        - name:                                                       # string (name of the volume to mount)
          readOnly:                                                   # bool (mounted read-only if true, read-write otherwise (false or unspecified))
          mountPath:                                                  # string (path within the container at which the volume should be mounted)
        livenessProbe:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container liveness; container will be restarted if the probe fails)
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          initialDelaySeconds:                                        # int64 (number of seconds after the container has started before liveness probes are initiated)
          timeoutSeconds:                                             # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
        readinessProbe:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails)
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          initialDelaySeconds:                                        # int64 (number of seconds after the container has started before liveness probes are initiated)
          timeoutSeconds:                                             # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
        lifecycle:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Lifecycle (actions that the management system should take in response to container lifecycle events)
          postStart:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          preStop:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        terminationMessagePath:                                       # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log)
        privileged:                                                   # bool (whether or not the container is granted privileged status; defaults to false)
        imagePullPolicy: PullAlways|PullIfNotPresent|PullNever        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PullPolicy (image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise)
        capabilities:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Capabilities (capabilities for container)
          add:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (added capabilities)
          - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
          drop:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (droped capabilities)
          - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
      restartPolicy:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
        always:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyAlways (always restart the container after termination)
        onFailure:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyOnFailure (restart the container if it fails for any reason, but not if it succeeds (exit 0))
        never:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyNever (never restart the container)
      dnsPolicy: ClusterFirst|Default                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
    status: Running|Succeeded|Terminated|Unknown|Waiting              # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodStatus (current condition of the pod, Waiting, Running, or Terminated)
    Condition:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodCondition (current service state of pod)
    - kind: Ready                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodConditionKind
      status: Full|None|Unknown                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ConditionStatus
    message:                                                          # string (human readable message indicating details about why the pod is in this condition)
    host:                                                             # string (host to which the pod is assigned; empty if not yet scheduled)
    hostIP:                                                           # string (IP address of the host to which the pod is assigned; empty if not yet scheduled)
    podIP:                                                            # string (IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated)
    info:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodInfo (map of container name to container status)
      [string]:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerStatus
  currentState:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodState (current state of the pod)
    manifest:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerManifest (manifest of containers and volumes comprising the pod)
      version:                                                        # string (manifest version; must be v1beta1)
      id:                                                             # string (manifest name; must be a DNS_SUBDOMAIN)
      uuid:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (manifest UUID)
      volumes:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Volume (list of volumes that can be mounted by containers belonging to the pod)
      - name:                                                         # string (volume name; must be a DNS_LABEL and unique within the pod)
        source:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeSource (location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir)
          hostDir:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HostPath (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
            path:                                                     # string (path of the directory on the host)
          emptyDir:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EmptyDir (temporary directory that shares a pod's lifetime)
          persistentDisk:                                             # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GCEPersistentDisk (GCE disk resource attached to the host machine on demand)
            pdName:                                                   # string (unique name of the PD resource in GCE)
            fsType:                                                   # string (file system type to mount, such as ext4, xfs, ntfs)
            partition:                                                # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
            readOnly:                                                 # bool (read-only if true, read-write otherwise (false or unspecified))
          gitRepo:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GitRepo (git repository at a particular revision)
            repository:                                               # string (repository URL)
            revision:                                                 # string (commit hash for the specified revision)
      containers:                                                     # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Container (list of containers belonging to the pod)
      - name:                                                         # string (name of the container; must be a DNS_LABEL and unique within the pod)
        image:                                                        # string (Docker image name)
        command:                                                      # []string (command argv array; not executed within a shell; defaults to entrypoint or command in the image)
        - [string]                                                    # 
        workingDir:                                                   # string (container's working directory; defaults to image's default)
        ports:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Port (list of ports to expose from the container)
        - name:                                                       # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
          hostPort:                                                   # int (number of port to expose on the host; most containers do not need this)
          containerPort:                                              # int (number of port to expose on the pod's IP address)
          protocol: TCP|UDP                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
          hostIP:                                                     # string (host IP to bind the port to)
        env:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EnvVar (list of environment variables to set in the container)
        - name:                                                       # string (name of the environment variable; must be a C_IDENTIFIER)
          value:                                                      # string (value of the environment variable; defaults to empty string)
        resources:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceRequirements (Compute Resources required by this container)
          limits:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (Maximum amount of compute resources allowed)
            [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
        cpu:                                                          # int (CPU share in thousandths of a core)
        memory:                                                       # int64 (memory limit in bytes; defaults to unlimited)
        volumeMounts:                                                 # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeMount (pod volumes to mount into the container's filesystem)
        - name:                                                       # string (name of the volume to mount)
          readOnly:                                                   # bool (mounted read-only if true, read-write otherwise (false or unspecified))
          mountPath:                                                  # string (path within the container at which the volume should be mounted)
        livenessProbe:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container liveness; container will be restarted if the probe fails)
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          initialDelaySeconds:                                        # int64 (number of seconds after the container has started before liveness probes are initiated)
          timeoutSeconds:                                             # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
        readinessProbe:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails)
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          initialDelaySeconds:                                        # int64 (number of seconds after the container has started before liveness probes are initiated)
          timeoutSeconds:                                             # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
        lifecycle:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Lifecycle (actions that the management system should take in response to container lifecycle events)
          postStart:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          preStop:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        terminationMessagePath:                                       # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log)
        privileged:                                                   # bool (whether or not the container is granted privileged status; defaults to false)
        imagePullPolicy: PullAlways|PullIfNotPresent|PullNever        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PullPolicy (image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise)
        capabilities:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Capabilities (capabilities for container)
          add:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (added capabilities)
          - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
          drop:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (droped capabilities)
          - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
      restartPolicy:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
        always:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyAlways (always restart the container after termination)
        onFailure:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyOnFailure (restart the container if it fails for any reason, but not if it succeeds (exit 0))
        never:                                                        # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyNever (never restart the container)
      dnsPolicy: ClusterFirst|Default                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
    status: Running|Succeeded|Terminated|Unknown|Waiting              # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodStatus (current condition of the pod, Waiting, Running, or Terminated)
    Condition:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodCondition (current service state of pod)
    - kind: Ready                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodConditionKind
      status: Full|None|Unknown                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ConditionStatus
    message:                                                          # string (human readable message indicating details about why the pod is in this condition)
    host:                                                             # string (host to which the pod is assigned; empty if not yet scheduled)
    hostIP:                                                           # string (IP address of the host to which the pod is assigned; empty if not yet scheduled)
    podIP:                                                            # string (IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated)
    info:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodInfo (map of container name to container status)
      [string]:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerStatus
  nodeSelector:                                                       # map[string]string (selector which must match a node's labels for the pod to be scheduled on that node)
    [string]:                                                         # string


PodStatusResult
===============

kind: PodStatusResult                                                 # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
state:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodState (current state of the pod)
  manifest:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerManifest (manifest of containers and volumes comprising the pod)
    version:                                                          # string (manifest version; must be v1beta1)
    id:                                                               # string (manifest name; must be a DNS_SUBDOMAIN)
    uuid:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (manifest UUID)
    volumes:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Volume (list of volumes that can be mounted by containers belonging to the pod)
    - name:                                                           # string (volume name; must be a DNS_LABEL and unique within the pod)
      source:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeSource (location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir)
        hostDir:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HostPath (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
          path:                                                       # string (path of the directory on the host)
        emptyDir:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EmptyDir (temporary directory that shares a pod's lifetime)
        persistentDisk:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GCEPersistentDisk (GCE disk resource attached to the host machine on demand)
          pdName:                                                     # string (unique name of the PD resource in GCE)
          fsType:                                                     # string (file system type to mount, such as ext4, xfs, ntfs)
          partition:                                                  # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
          readOnly:                                                   # bool (read-only if true, read-write otherwise (false or unspecified))
        gitRepo:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GitRepo (git repository at a particular revision)
          repository:                                                 # string (repository URL)
          revision:                                                   # string (commit hash for the specified revision)
    containers:                                                       # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Container (list of containers belonging to the pod)
    - name:                                                           # string (name of the container; must be a DNS_LABEL and unique within the pod)
      image:                                                          # string (Docker image name)
      command:                                                        # []string (command argv array; not executed within a shell; defaults to entrypoint or command in the image)
      - [string]                                                      # 
      workingDir:                                                     # string (container's working directory; defaults to image's default)
      ports:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Port (list of ports to expose from the container)
      - name:                                                         # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
        hostPort:                                                     # int (number of port to expose on the host; most containers do not need this)
        containerPort:                                                # int (number of port to expose on the pod's IP address)
        protocol: TCP|UDP                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
        hostIP:                                                       # string (host IP to bind the port to)
      env:                                                            # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EnvVar (list of environment variables to set in the container)
      - name:                                                         # string (name of the environment variable; must be a C_IDENTIFIER)
        value:                                                        # string (value of the environment variable; defaults to empty string)
      resources:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceRequirements (Compute Resources required by this container)
        limits:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (Maximum amount of compute resources allowed)
          [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
      cpu:                                                            # int (CPU share in thousandths of a core)
      memory:                                                         # int64 (memory limit in bytes; defaults to unlimited)
      volumeMounts:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeMount (pod volumes to mount into the container's filesystem)
      - name:                                                         # string (name of the volume to mount)
        readOnly:                                                     # bool (mounted read-only if true, read-write otherwise (false or unspecified))
        mountPath:                                                    # string (path within the container at which the volume should be mounted)
      livenessProbe:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container liveness; container will be restarted if the probe fails)
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        initialDelaySeconds:                                          # int64 (number of seconds after the container has started before liveness probes are initiated)
        timeoutSeconds:                                               # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
      readinessProbe:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails)
        httpGet:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
          path:                                                       # string (path to access on the HTTP server)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
          host:                                                       # string (hostname to connect to; defaults to pod IP)
        tcpSocket:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
          port:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        exec:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
          command:                                                    # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
          - [string]                                                  # 
        initialDelaySeconds:                                          # int64 (number of seconds after the container has started before liveness probes are initiated)
        timeoutSeconds:                                               # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
      lifecycle:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Lifecycle (actions that the management system should take in response to container lifecycle events)
        postStart:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
        preStop:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
          exec:                                                       # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
            command:                                                  # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
            - [string]                                                # 
          httpGet:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
            path:                                                     # string (path to access on the HTTP server)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
            host:                                                     # string (hostname to connect to; defaults to pod IP)
          tcpSocket:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
            port:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
      terminationMessagePath:                                         # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log)
      privileged:                                                     # bool (whether or not the container is granted privileged status; defaults to false)
      imagePullPolicy: PullAlways|PullIfNotPresent|PullNever          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PullPolicy (image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise)
      capabilities:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Capabilities (capabilities for container)
        add:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (added capabilities)
        - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
        drop:                                                         # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (droped capabilities)
        - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
    restartPolicy:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
      always:                                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyAlways (always restart the container after termination)
      onFailure:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyOnFailure (restart the container if it fails for any reason, but not if it succeeds (exit 0))
      never:                                                          # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyNever (never restart the container)
    dnsPolicy: ClusterFirst|Default                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
  status: Running|Succeeded|Terminated|Unknown|Waiting                # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodStatus (current condition of the pod, Waiting, Running, or Terminated)
  Condition:                                                          # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodCondition (current service state of pod)
  - kind: Ready                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodConditionKind
    status: Full|None|Unknown                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ConditionStatus
  message:                                                            # string (human readable message indicating details about why the pod is in this condition)
  host:                                                               # string (host to which the pod is assigned; empty if not yet scheduled)
  hostIP:                                                             # string (IP address of the host to which the pod is assigned; empty if not yet scheduled)
  podIP:                                                              # string (IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated)
  info:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodInfo (map of container name to container status)
    [string]:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerStatus


ReplicationController
=====================

kind: ReplicationController                                           # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
desiredState:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ReplicationControllerState (specification of the desired state of the replication controller)
  replicas:                                                           # int (number of replicas (desired or observed, as appropriate))
  replicaSelector:                                                    # map[string]string (label keys and values that must match in order to be controlled by this replication controller)
    [string]:                                                         # string
  podTemplate:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodTemplate (template for pods to be created by this replication controller when the observed number of replicas is less than the desired number of replicas)
    desiredState:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodState (specification of the desired state of pods created from this template)
      manifest:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerManifest (manifest of containers and volumes comprising the pod)
        version:                                                      # string (manifest version; must be v1beta1)
        id:                                                           # string (manifest name; must be a DNS_SUBDOMAIN)
        uuid:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (manifest UUID)
        volumes:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Volume (list of volumes that can be mounted by containers belonging to the pod)
        - name:                                                       # string (volume name; must be a DNS_LABEL and unique within the pod)
          source:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeSource (location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir)
            hostDir:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HostPath (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
              path:                                                   # string (path of the directory on the host)
            emptyDir:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EmptyDir (temporary directory that shares a pod's lifetime)
            persistentDisk:                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GCEPersistentDisk (GCE disk resource attached to the host machine on demand)
              pdName:                                                 # string (unique name of the PD resource in GCE)
              fsType:                                                 # string (file system type to mount, such as ext4, xfs, ntfs)
              partition:                                              # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
              readOnly:                                               # bool (read-only if true, read-write otherwise (false or unspecified))
            gitRepo:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GitRepo (git repository at a particular revision)
              repository:                                             # string (repository URL)
              revision:                                               # string (commit hash for the specified revision)
        containers:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Container (list of containers belonging to the pod)
        - name:                                                       # string (name of the container; must be a DNS_LABEL and unique within the pod)
          image:                                                      # string (Docker image name)
          command:                                                    # []string (command argv array; not executed within a shell; defaults to entrypoint or command in the image)
          - [string]                                                  # 
          workingDir:                                                 # string (container's working directory; defaults to image's default)
          ports:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Port (list of ports to expose from the container)
          - name:                                                     # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
            hostPort:                                                 # int (number of port to expose on the host; most containers do not need this)
            containerPort:                                            # int (number of port to expose on the pod's IP address)
            protocol: TCP|UDP                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
            hostIP:                                                   # string (host IP to bind the port to)
          env:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EnvVar (list of environment variables to set in the container)
          - name:                                                     # string (name of the environment variable; must be a C_IDENTIFIER)
            value:                                                    # string (value of the environment variable; defaults to empty string)
          resources:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceRequirements (Compute Resources required by this container)
            limits:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (Maximum amount of compute resources allowed)
              [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
          cpu:                                                        # int (CPU share in thousandths of a core)
          memory:                                                     # int64 (memory limit in bytes; defaults to unlimited)
          volumeMounts:                                               # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeMount (pod volumes to mount into the container's filesystem)
          - name:                                                     # string (name of the volume to mount)
            readOnly:                                                 # bool (mounted read-only if true, read-write otherwise (false or unspecified))
            mountPath:                                                # string (path within the container at which the volume should be mounted)
          livenessProbe:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container liveness; container will be restarted if the probe fails)
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            initialDelaySeconds:                                      # int64 (number of seconds after the container has started before liveness probes are initiated)
            timeoutSeconds:                                           # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
          readinessProbe:                                             # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails)
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            initialDelaySeconds:                                      # int64 (number of seconds after the container has started before liveness probes are initiated)
            timeoutSeconds:                                           # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
          lifecycle:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Lifecycle (actions that the management system should take in response to container lifecycle events)
            postStart:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
              exec:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
                command:                                              # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                - [string]                                            # 
              httpGet:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
                path:                                                 # string (path to access on the HTTP server)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                host:                                                 # string (hostname to connect to; defaults to pod IP)
              tcpSocket:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
            preStop:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
              exec:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
                command:                                              # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                - [string]                                            # 
              httpGet:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
                path:                                                 # string (path to access on the HTTP server)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                host:                                                 # string (hostname to connect to; defaults to pod IP)
              tcpSocket:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          terminationMessagePath:                                     # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log)
          privileged:                                                 # bool (whether or not the container is granted privileged status; defaults to false)
          imagePullPolicy: PullAlways|PullIfNotPresent|PullNever      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PullPolicy (image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise)
          capabilities:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Capabilities (capabilities for container)
            add:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (added capabilities)
            - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
            drop:                                                     # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (droped capabilities)
            - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
        restartPolicy:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
          always:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyAlways (always restart the container after termination)
          onFailure:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyOnFailure (restart the container if it fails for any reason, but not if it succeeds (exit 0))
          never:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyNever (never restart the container)
        dnsPolicy: ClusterFirst|Default                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
      status: Running|Succeeded|Terminated|Unknown|Waiting            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodStatus (current condition of the pod, Waiting, Running, or Terminated)
      Condition:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodCondition (current service state of pod)
      - kind: Ready                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodConditionKind
        status: Full|None|Unknown                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ConditionStatus
      message:                                                        # string (human readable message indicating details about why the pod is in this condition)
      host:                                                           # string (host to which the pod is assigned; empty if not yet scheduled)
      hostIP:                                                         # string (IP address of the host to which the pod is assigned; empty if not yet scheduled)
      podIP:                                                          # string (IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated)
      info:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodInfo (map of container name to container status)
        [string]:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerStatus
    nodeSelector:                                                     # map[string]string (a selector which must be true for the pod to fit on a node)
      [string]:                                                       # string
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize the pods created from the template; must match the selector of the replication controller to which the template belongs; may match selectors of services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about pods created from the template)
      [string]:                                                       # string
currentState:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ReplicationControllerState (current state of the replication controller)
  replicas:                                                           # int (number of replicas (desired or observed, as appropriate))
  replicaSelector:                                                    # map[string]string (label keys and values that must match in order to be controlled by this replication controller)
    [string]:                                                         # string
  podTemplate:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodTemplate (template for pods to be created by this replication controller when the observed number of replicas is less than the desired number of replicas)
    desiredState:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodState (specification of the desired state of pods created from this template)
      manifest:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerManifest (manifest of containers and volumes comprising the pod)
        version:                                                      # string (manifest version; must be v1beta1)
        id:                                                           # string (manifest name; must be a DNS_SUBDOMAIN)
        uuid:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (manifest UUID)
        volumes:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Volume (list of volumes that can be mounted by containers belonging to the pod)
        - name:                                                       # string (volume name; must be a DNS_LABEL and unique within the pod)
          source:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeSource (location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir)
            hostDir:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HostPath (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
              path:                                                   # string (path of the directory on the host)
            emptyDir:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EmptyDir (temporary directory that shares a pod's lifetime)
            persistentDisk:                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GCEPersistentDisk (GCE disk resource attached to the host machine on demand)
              pdName:                                                 # string (unique name of the PD resource in GCE)
              fsType:                                                 # string (file system type to mount, such as ext4, xfs, ntfs)
              partition:                                              # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
              readOnly:                                               # bool (read-only if true, read-write otherwise (false or unspecified))
            gitRepo:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GitRepo (git repository at a particular revision)
              repository:                                             # string (repository URL)
              revision:                                               # string (commit hash for the specified revision)
        containers:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Container (list of containers belonging to the pod)
        - name:                                                       # string (name of the container; must be a DNS_LABEL and unique within the pod)
          image:                                                      # string (Docker image name)
          command:                                                    # []string (command argv array; not executed within a shell; defaults to entrypoint or command in the image)
          - [string]                                                  # 
          workingDir:                                                 # string (container's working directory; defaults to image's default)
          ports:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Port (list of ports to expose from the container)
          - name:                                                     # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
            hostPort:                                                 # int (number of port to expose on the host; most containers do not need this)
            containerPort:                                            # int (number of port to expose on the pod's IP address)
            protocol: TCP|UDP                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
            hostIP:                                                   # string (host IP to bind the port to)
          env:                                                        # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EnvVar (list of environment variables to set in the container)
          - name:                                                     # string (name of the environment variable; must be a C_IDENTIFIER)
            value:                                                    # string (value of the environment variable; defaults to empty string)
          resources:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceRequirements (Compute Resources required by this container)
            limits:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (Maximum amount of compute resources allowed)
              [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
          cpu:                                                        # int (CPU share in thousandths of a core)
          memory:                                                     # int64 (memory limit in bytes; defaults to unlimited)
          volumeMounts:                                               # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeMount (pod volumes to mount into the container's filesystem)
          - name:                                                     # string (name of the volume to mount)
            readOnly:                                                 # bool (mounted read-only if true, read-write otherwise (false or unspecified))
            mountPath:                                                # string (path within the container at which the volume should be mounted)
          livenessProbe:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container liveness; container will be restarted if the probe fails)
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            initialDelaySeconds:                                      # int64 (number of seconds after the container has started before liveness probes are initiated)
            timeoutSeconds:                                           # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
          readinessProbe:                                             # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails)
            httpGet:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
              path:                                                   # string (path to access on the HTTP server)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
              host:                                                   # string (hostname to connect to; defaults to pod IP)
            tcpSocket:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
              port:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
            exec:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
              command:                                                # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
              - [string]                                              # 
            initialDelaySeconds:                                      # int64 (number of seconds after the container has started before liveness probes are initiated)
            timeoutSeconds:                                           # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
          lifecycle:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Lifecycle (actions that the management system should take in response to container lifecycle events)
            postStart:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
              exec:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
                command:                                              # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                - [string]                                            # 
              httpGet:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
                path:                                                 # string (path to access on the HTTP server)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                host:                                                 # string (hostname to connect to; defaults to pod IP)
              tcpSocket:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
            preStop:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
              exec:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
                command:                                              # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                - [string]                                            # 
              httpGet:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
                path:                                                 # string (path to access on the HTTP server)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                host:                                                 # string (hostname to connect to; defaults to pod IP)
              tcpSocket:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
          terminationMessagePath:                                     # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log)
          privileged:                                                 # bool (whether or not the container is granted privileged status; defaults to false)
          imagePullPolicy: PullAlways|PullIfNotPresent|PullNever      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PullPolicy (image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise)
          capabilities:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Capabilities (capabilities for container)
            add:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (added capabilities)
            - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
            drop:                                                     # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (droped capabilities)
            - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
        restartPolicy:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
          always:                                                     # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyAlways (always restart the container after termination)
          onFailure:                                                  # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyOnFailure (restart the container if it fails for any reason, but not if it succeeds (exit 0))
          never:                                                      # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyNever (never restart the container)
        dnsPolicy: ClusterFirst|Default                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
      status: Running|Succeeded|Terminated|Unknown|Waiting            # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodStatus (current condition of the pod, Waiting, Running, or Terminated)
      Condition:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodCondition (current service state of pod)
      - kind: Ready                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodConditionKind
        status: Full|None|Unknown                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ConditionStatus
      message:                                                        # string (human readable message indicating details about why the pod is in this condition)
      host:                                                           # string (host to which the pod is assigned; empty if not yet scheduled)
      hostIP:                                                         # string (IP address of the host to which the pod is assigned; empty if not yet scheduled)
      podIP:                                                          # string (IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated)
      info:                                                           # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodInfo (map of container name to container status)
        [string]:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerStatus
    nodeSelector:                                                     # map[string]string (a selector which must be true for the pod to fit on a node)
      [string]:                                                       # string
    labels:                                                           # map[string]string (map of string keys and values that can be used to organize and categorize the pods created from the template; must match the selector of the replication controller to which the template belongs; may match selectors of services)
      [string]:                                                       # string
    annotations:                                                      # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about pods created from the template)
      [string]:                                                       # string
labels:                                                               # map[string]string (map of string keys and values that can be used to organize and categorize replication controllers)
  [string]:                                                           # string


ReplicationControllerList
=========================

kind: ReplicationControllerList                                       # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ReplicationController (list of replication controllers)
- kind:                                                               # string (kind of object, in CamelCase)
  id:                                                                 # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
  selfLink:                                                           # string (URL for the object)
  resourceVersion:                                                    # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
  apiVersion:                                                         # string (version of the schema the object should have)
  namespace:                                                          # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
    [string]:                                                         # string
  desiredState:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ReplicationControllerState (specification of the desired state of the replication controller)
    replicas:                                                         # int (number of replicas (desired or observed, as appropriate))
    replicaSelector:                                                  # map[string]string (label keys and values that must match in order to be controlled by this replication controller)
      [string]:                                                       # string
    podTemplate:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodTemplate (template for pods to be created by this replication controller when the observed number of replicas is less than the desired number of replicas)
      desiredState:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodState (specification of the desired state of pods created from this template)
        manifest:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerManifest (manifest of containers and volumes comprising the pod)
          version:                                                    # string (manifest version; must be v1beta1)
          id:                                                         # string (manifest name; must be a DNS_SUBDOMAIN)
          uuid:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (manifest UUID)
          volumes:                                                    # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Volume (list of volumes that can be mounted by containers belonging to the pod)
          - name:                                                     # string (volume name; must be a DNS_LABEL and unique within the pod)
            source:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeSource (location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir)
              hostDir:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HostPath (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
                path:                                                 # string (path of the directory on the host)
              emptyDir:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EmptyDir (temporary directory that shares a pod's lifetime)
              persistentDisk:                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GCEPersistentDisk (GCE disk resource attached to the host machine on demand)
                pdName:                                               # string (unique name of the PD resource in GCE)
                fsType:                                               # string (file system type to mount, such as ext4, xfs, ntfs)
                partition:                                            # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
                readOnly:                                             # bool (read-only if true, read-write otherwise (false or unspecified))
              gitRepo:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GitRepo (git repository at a particular revision)
                repository:                                           # string (repository URL)
                revision:                                             # string (commit hash for the specified revision)
          containers:                                                 # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Container (list of containers belonging to the pod)
          - name:                                                     # string (name of the container; must be a DNS_LABEL and unique within the pod)
            image:                                                    # string (Docker image name)
            command:                                                  # []string (command argv array; not executed within a shell; defaults to entrypoint or command in the image)
            - [string]                                                # 
            workingDir:                                               # string (container's working directory; defaults to image's default)
            ports:                                                    # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Port (list of ports to expose from the container)
            - name:                                                   # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
              hostPort:                                               # int (number of port to expose on the host; most containers do not need this)
              containerPort:                                          # int (number of port to expose on the pod's IP address)
              protocol: TCP|UDP                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
              hostIP:                                                 # string (host IP to bind the port to)
            env:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EnvVar (list of environment variables to set in the container)
            - name:                                                   # string (name of the environment variable; must be a C_IDENTIFIER)
              value:                                                  # string (value of the environment variable; defaults to empty string)
            resources:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceRequirements (Compute Resources required by this container)
              limits:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (Maximum amount of compute resources allowed)
                [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
            cpu:                                                      # int (CPU share in thousandths of a core)
            memory:                                                   # int64 (memory limit in bytes; defaults to unlimited)
            volumeMounts:                                             # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeMount (pod volumes to mount into the container's filesystem)
            - name:                                                   # string (name of the volume to mount)
              readOnly:                                               # bool (mounted read-only if true, read-write otherwise (false or unspecified))
              mountPath:                                              # string (path within the container at which the volume should be mounted)
            livenessProbe:                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container liveness; container will be restarted if the probe fails)
              httpGet:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
                path:                                                 # string (path to access on the HTTP server)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                host:                                                 # string (hostname to connect to; defaults to pod IP)
              tcpSocket:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
              exec:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
                command:                                              # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                - [string]                                            # 
              initialDelaySeconds:                                    # int64 (number of seconds after the container has started before liveness probes are initiated)
              timeoutSeconds:                                         # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
            readinessProbe:                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails)
              httpGet:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
                path:                                                 # string (path to access on the HTTP server)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                host:                                                 # string (hostname to connect to; defaults to pod IP)
              tcpSocket:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
              exec:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
                command:                                              # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                - [string]                                            # 
              initialDelaySeconds:                                    # int64 (number of seconds after the container has started before liveness probes are initiated)
              timeoutSeconds:                                         # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
            lifecycle:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Lifecycle (actions that the management system should take in response to container lifecycle events)
              postStart:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
                exec:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
                  command:                                            # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                  - [string]                                          # 
                httpGet:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
                  path:                                               # string (path to access on the HTTP server)
                  port:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                  host:                                               # string (hostname to connect to; defaults to pod IP)
                tcpSocket:                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
                  port:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
              preStop:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
                exec:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
                  command:                                            # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                  - [string]                                          # 
                httpGet:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
                  path:                                               # string (path to access on the HTTP server)
                  port:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                  host:                                               # string (hostname to connect to; defaults to pod IP)
                tcpSocket:                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
                  port:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
            terminationMessagePath:                                   # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log)
            privileged:                                               # bool (whether or not the container is granted privileged status; defaults to false)
            imagePullPolicy: PullAlways|PullIfNotPresent|PullNever    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PullPolicy (image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise)
            capabilities:                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Capabilities (capabilities for container)
              add:                                                    # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (added capabilities)
              - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
              drop:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (droped capabilities)
              - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
          restartPolicy:                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
            always:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyAlways (always restart the container after termination)
            onFailure:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyOnFailure (restart the container if it fails for any reason, but not if it succeeds (exit 0))
            never:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyNever (never restart the container)
          dnsPolicy: ClusterFirst|Default                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
        status: Running|Succeeded|Terminated|Unknown|Waiting          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodStatus (current condition of the pod, Waiting, Running, or Terminated)
        Condition:                                                    # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodCondition (current service state of pod)
        - kind: Ready                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodConditionKind
          status: Full|None|Unknown                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ConditionStatus
        message:                                                      # string (human readable message indicating details about why the pod is in this condition)
        host:                                                         # string (host to which the pod is assigned; empty if not yet scheduled)
        hostIP:                                                       # string (IP address of the host to which the pod is assigned; empty if not yet scheduled)
        podIP:                                                        # string (IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated)
        info:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodInfo (map of container name to container status)
          [string]:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerStatus
      nodeSelector:                                                   # map[string]string (a selector which must be true for the pod to fit on a node)
        [string]:                                                     # string
      labels:                                                         # map[string]string (map of string keys and values that can be used to organize and categorize the pods created from the template; must match the selector of the replication controller to which the template belongs; may match selectors of services)
        [string]:                                                     # string
      annotations:                                                    # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about pods created from the template)
        [string]:                                                     # string
  currentState:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ReplicationControllerState (current state of the replication controller)
    replicas:                                                         # int (number of replicas (desired or observed, as appropriate))
    replicaSelector:                                                  # map[string]string (label keys and values that must match in order to be controlled by this replication controller)
      [string]:                                                       # string
    podTemplate:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodTemplate (template for pods to be created by this replication controller when the observed number of replicas is less than the desired number of replicas)
      desiredState:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodState (specification of the desired state of pods created from this template)
        manifest:                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerManifest (manifest of containers and volumes comprising the pod)
          version:                                                    # string (manifest version; must be v1beta1)
          id:                                                         # string (manifest name; must be a DNS_SUBDOMAIN)
          uuid:                                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (manifest UUID)
          volumes:                                                    # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Volume (list of volumes that can be mounted by containers belonging to the pod)
          - name:                                                     # string (volume name; must be a DNS_LABEL and unique within the pod)
            source:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeSource (location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir)
              hostDir:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HostPath (pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host)
                path:                                                 # string (path of the directory on the host)
              emptyDir:                                               # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EmptyDir (temporary directory that shares a pod's lifetime)
              persistentDisk:                                         # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GCEPersistentDisk (GCE disk resource attached to the host machine on demand)
                pdName:                                               # string (unique name of the PD resource in GCE)
                fsType:                                               # string (file system type to mount, such as ext4, xfs, ntfs)
                partition:                                            # int (partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted)
                readOnly:                                             # bool (read-only if true, read-write otherwise (false or unspecified))
              gitRepo:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.GitRepo (git repository at a particular revision)
                repository:                                           # string (repository URL)
                revision:                                             # string (commit hash for the specified revision)
          containers:                                                 # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Container (list of containers belonging to the pod)
          - name:                                                     # string (name of the container; must be a DNS_LABEL and unique within the pod)
            image:                                                    # string (Docker image name)
            command:                                                  # []string (command argv array; not executed within a shell; defaults to entrypoint or command in the image)
            - [string]                                                # 
            workingDir:                                               # string (container's working directory; defaults to image's default)
            ports:                                                    # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Port (list of ports to expose from the container)
            - name:                                                   # string (name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod)
              hostPort:                                               # int (number of port to expose on the host; most containers do not need this)
              containerPort:                                          # int (number of port to expose on the pod's IP address)
              protocol: TCP|UDP                                       # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
              hostIP:                                                 # string (host IP to bind the port to)
            env:                                                      # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.EnvVar (list of environment variables to set in the container)
            - name:                                                   # string (name of the environment variable; must be a C_IDENTIFIER)
              value:                                                  # string (value of the environment variable; defaults to empty string)
            resources:                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceRequirements (Compute Resources required by this container)
              limits:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList (Maximum amount of compute resources allowed)
                [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
            cpu:                                                      # int (CPU share in thousandths of a core)
            memory:                                                   # int64 (memory limit in bytes; defaults to unlimited)
            volumeMounts:                                             # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.VolumeMount (pod volumes to mount into the container's filesystem)
            - name:                                                   # string (name of the volume to mount)
              readOnly:                                               # bool (mounted read-only if true, read-write otherwise (false or unspecified))
              mountPath:                                              # string (path within the container at which the volume should be mounted)
            livenessProbe:                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container liveness; container will be restarted if the probe fails)
              httpGet:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
                path:                                                 # string (path to access on the HTTP server)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                host:                                                 # string (hostname to connect to; defaults to pod IP)
              tcpSocket:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
              exec:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
                command:                                              # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                - [string]                                            # 
              initialDelaySeconds:                                    # int64 (number of seconds after the container has started before liveness probes are initiated)
              timeoutSeconds:                                         # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
            readinessProbe:                                           # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.LivenessProbe (periodic probe of container service readiness; container will be removed from service endpoints if the probe fails)
              httpGet:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (parameters for HTTP-based liveness probe)
                path:                                                 # string (path to access on the HTTP server)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                host:                                                 # string (hostname to connect to; defaults to pod IP)
              tcpSocket:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (parameters for TCP-based liveness probe)
                port:                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
              exec:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (parameters for exec-based liveness probe)
                command:                                              # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                - [string]                                            # 
              initialDelaySeconds:                                    # int64 (number of seconds after the container has started before liveness probes are initiated)
              timeoutSeconds:                                         # int64 (number of seconds after which liveness probes timeout; defaults to 1 second)
            lifecycle:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Lifecycle (actions that the management system should take in response to container lifecycle events)
              postStart:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes)
                exec:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
                  command:                                            # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                  - [string]                                          # 
                httpGet:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
                  path:                                               # string (path to access on the HTTP server)
                  port:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                  host:                                               # string (hostname to connect to; defaults to pod IP)
                tcpSocket:                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
                  port:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
              preStop:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Handler (called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes)
                exec:                                                 # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ExecAction (exec-based handler)
                  command:                                            # []string (command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy)
                  - [string]                                          # 
                httpGet:                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.HTTPGetAction (HTTP-based handler)
                  path:                                               # string (path to access on the HTTP server)
                  port:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the container)
                  host:                                               # string (hostname to connect to; defaults to pod IP)
                tcpSocket:                                            # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.TCPSocketAction (TCP-based handler; TCP hooks not yet supported)
                  port:                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number of name of the port to access on the container)
            terminationMessagePath:                                   # string (path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log)
            privileged:                                               # bool (whether or not the container is granted privileged status; defaults to false)
            imagePullPolicy: PullAlways|PullIfNotPresent|PullNever    # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PullPolicy (image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise)
            capabilities:                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Capabilities (capabilities for container)
              add:                                                    # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (added capabilities)
              - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
              drop:                                                   # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType (droped capabilities)
              - [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CapabilityType] # 
          restartPolicy:                                              # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicy (restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever)
            always:                                                   # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyAlways (always restart the container after termination)
            onFailure:                                                # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyOnFailure (restart the container if it fails for any reason, but not if it succeeds (exit 0))
            never:                                                    # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.RestartPolicyNever (never restart the container)
          dnsPolicy: ClusterFirst|Default                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.DNSPolicy (DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default')
        status: Running|Succeeded|Terminated|Unknown|Waiting          # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodStatus (current condition of the pod, Waiting, Running, or Terminated)
        Condition:                                                    # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodCondition (current service state of pod)
        - kind: Ready                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodConditionKind
          status: Full|None|Unknown                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ConditionStatus
        message:                                                      # string (human readable message indicating details about why the pod is in this condition)
        host:                                                         # string (host to which the pod is assigned; empty if not yet scheduled)
        hostIP:                                                       # string (IP address of the host to which the pod is assigned; empty if not yet scheduled)
        podIP:                                                        # string (IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated)
        info:                                                         # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.PodInfo (map of container name to container status)
          [string]:                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ContainerStatus
      nodeSelector:                                                   # map[string]string (a selector which must be true for the pod to fit on a node)
        [string]:                                                     # string
      labels:                                                         # map[string]string (map of string keys and values that can be used to organize and categorize the pods created from the template; must match the selector of the replication controller to which the template belongs; may match selectors of services)
        [string]:                                                     # string
      annotations:                                                    # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about pods created from the template)
        [string]:                                                     # string
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize replication controllers)
    [string]:                                                         # string


ResourceQuota
=============

kind: ResourceQuota                                                   # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
spec:                                                                 # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceQuotaSpec
  hard:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList
    [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceQuotaStatus
  hard:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList
    [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
  used:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList
    [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString


ResourceQuotaList
=================

kind: ResourceQuotaList                                               # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceQuota
- kind:                                                               # string (kind of object, in CamelCase)
  id:                                                                 # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
  selfLink:                                                           # string (URL for the object)
  resourceVersion:                                                    # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
  apiVersion:                                                         # string (version of the schema the object should have)
  namespace:                                                          # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
    [string]:                                                         # string
  spec:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceQuotaSpec
    hard:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
  status:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceQuotaStatus
    hard:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
    used:                                                             # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList
      [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString


ResourceQuotaUsage
==================

kind: ResourceQuotaUsage                                              # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
status:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceQuotaStatus
  hard:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList
    [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString
  used:                                                               # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceList
    [github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.ResourceName]: # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString


Service
=======

kind: Service                                                         # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
port:                                                                 # int (port exposed by the service)
protocol: TCP|UDP                                                     # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
labels:                                                               # map[string]string (map of string keys and values that can be used to organize and categorize services)
  [string]:                                                           # string
selector:                                                             # map[string]string (label keys and values that must match in order to receive traffic for this service; if empty, all pods are selected, if not specified, endpoints must be manually specified)
  [string]:                                                           # string
createExternalLoadBalancer:                                           # bool (set up a cloud-provider-specific load balancer on an external IP)
publicIPs:                                                            # []string (externally visible IPs from which to select the address for the external load balancer)
- [string]                                                            # 
containerPort:                                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the containers belonging to pods targeted by the service; defaults to the container's first open port)
portalIP:                                                             # string (IP address of the service; usually assigned by the system; if specified, it will be allocated to the service if unused, and creation of the service will fail otherwise; cannot be updated)
proxyPort:                                                            # int (if non-zero, a pre-allocated host port used for this service by the proxy on each node; assigned by the master and ignored on input)
sessionAffinity: ClientIP|None                                        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.AffinityType (enable client IP based session affinity; must be ClientIP or None; defaults to None)


ServiceList
===========

kind: ServiceList                                                     # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
items:                                                                # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Service (list of services)
- kind:                                                               # string (kind of object, in CamelCase)
  id:                                                                 # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
  uid:                                                                # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
  creationTimestamp:                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
  selfLink:                                                           # string (URL for the object)
  resourceVersion:                                                    # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
  apiVersion:                                                         # string (version of the schema the object should have)
  namespace:                                                          # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
  generateName:                                                       # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
  annotations:                                                        # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
    [string]:                                                         # string
  port:                                                               # int (port exposed by the service)
  protocol: TCP|UDP                                                   # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.Protocol (protocol for port; must be UDP or TCP; TCP if unspecified)
  labels:                                                             # map[string]string (map of string keys and values that can be used to organize and categorize services)
    [string]:                                                         # string
  selector:                                                           # map[string]string (label keys and values that must match in order to receive traffic for this service; if empty, all pods are selected, if not specified, endpoints must be manually specified)
    [string]:                                                         # string
  createExternalLoadBalancer:                                         # bool (set up a cloud-provider-specific load balancer on an external IP)
  publicIPs:                                                          # []string (externally visible IPs from which to select the address for the external load balancer)
  - [string]                                                          # 
  containerPort:                                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/util.IntOrString (number or name of the port to access on the containers belonging to pods targeted by the service; defaults to the container's first open port)
  portalIP:                                                           # string (IP address of the service; usually assigned by the system; if specified, it will be allocated to the service if unused, and creation of the service will fail otherwise; cannot be updated)
  proxyPort:                                                          # int (if non-zero, a pre-allocated host port used for this service by the proxy on each node; assigned by the master and ignored on input)
  sessionAffinity: ClientIP|None                                      # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.AffinityType (enable client IP based session affinity; must be ClientIP or None; defaults to None)


Status
======

kind: Status                                                          # string (kind of object, in CamelCase)
id:                                                                   # string (name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs)
uid:                                                                  # github.com/GoogleCloudPlatform/kubernetes/pkg/types.UID (UUID assigned by the system upon creation, unique across space and time)
creationTimestamp:                                                    # github.com/GoogleCloudPlatform/kubernetes/pkg/util.Time (RFC 3339 date and time at which the object was created; recorded by the system; null for lists)
selfLink:                                                             # string (URL for the object)
resourceVersion:                                                      # uint64 (string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server)
apiVersion: v1beta2                                                   # string (version of the schema the object should have)
namespace:                                                            # string (namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default)
generateName:                                                         # string (an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified)
annotations:                                                          # map[string]string (map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object)
  [string]:                                                           # string
status:                                                               # string (status of the operation; either Success or Failure)
message:                                                              # string (human-readable description of the status of this operation)
reason: AlreadyExists|Conflict|Invalid|NotFound|ServerTimeout|        # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.StatusReason (machine-readable description of why this operation is in the 'Failure' status; if this value is empty there is no information available; a reason clarifies an HTTP status code but does not override it)
details:                                                              # *github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.StatusDetails (extended data associated with the reason; each reason may define its own extended details; this field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type)
  id:                                                                 # string (the ID attribute of the resource associated with the status StatusReason (when there is a single ID which can be described))
  kind:                                                               # string (the kind attribute of the resource associated with the status StatusReason; on some operations may differ from the requested resource Kind)
  causes:                                                             # []github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.StatusCause (the Causes array includes more details associated with the StatusReason failure; not all StatusReasons may provide detailed causes)
  - reason: FieldValueDuplicate|FieldValueInvalid|FieldValueNotFound|FieldValueNotSupported|FieldValueRequired # github.com/GoogleCloudPlatform/kubernetes/pkg/api/v1beta2.CauseType (machine-readable description of the cause of the error; if this value is empty there is no information available)
    message:                                                          # string (human-readable description of the cause of the error; this field may be presented as-is to a reader)
    field:                                                            # string (field of the resource that has caused this error, as named by its JSON serialization; may include dot and postfix notation for nested attributes; arrays are zero-indexed; fields may appear more than once in an array of causes due to fields having multiple errors)
code:                                                                 # int (suggested HTTP return code for this status; 0 if not set)



AppliedClusterResourceQuota
===========================

AppliedClusterResourceQuota mirrors ClusterResourceQuota at a project scope, for projection into a project.  It allows a project-admin to know which ClusterResourceQuotas are applied to his project and their associated usage.

kind: AppliedClusterResourceQuota       # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.ClusterResourceQuotaSpec             Spec defines the desired quota
  selector:                             # v1.ClusterResourceQuotaSelector         Selector is the selector used to match projects. It should only select active projects on the scale of dozens (though it can select many more less active projects).  These projects will contend on object creation through this resource.
    labels:                             # unversioned.LabelSelector               LabelSelector is used to select projects by label.
      matchLabels:                      # map[string]string                       matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        [string]:                       # string
      matchExpressions:                 # []unversioned.LabelSelectorRequirement  matchExpressions is a list of label selector requirements. The requirements are ANDed.
      - key:                            # string                                  key is the label key that the selector applies to.
        operator:                       # string                                  operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist.
        values:                         # []string                                values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        - [string]                      # 
    annotations:                        # map[string]string                       AnnotationSelector is used to select projects by annotation.
      [string]:                         # string
  quota:                                # v1.ResourceQuotaSpec                    Quota defines the desired quota
    hard:                               # map[string]string                       Hard is the set of desired hard limits for each named resource. More info: http://releases.k8s.io/release-1.3/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota
      [string]:                         # string
    scopes:                             # []v1.ResourceQuotaScope                 A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
status:                                 # v1.ClusterResourceQuotaStatus           Status defines the actual enforced quota and its current usage
  total:                                # v1.ResourceQuotaStatus                  Total defines the actual enforced quota and its current usage across all projects
    hard:                               # map[string]string                       Hard is the set of enforced hard limits for each named resource. More info: http://releases.k8s.io/release-1.3/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota
      [string]:                         # string
    used:                               # map[string]string                       Used is the current observed total usage of the resource in the namespace.
      [string]:                         # string
  namespaces:                           # []v1.ResourceQuotaStatusByNamespace     Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconcilation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project.
  - namespace:                          # string                                  Namespace the project this status applies to
    status:                             # v1.ResourceQuotaStatus                  Status indicates how many resources have been consumed by this project
      hard:                             # map[string]string                       Hard is the set of enforced hard limits for each named resource. More info: http://releases.k8s.io/release-1.3/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota
        [string]:                       # string
      used:                             # map[string]string                       Used is the current observed total usage of the resource in the namespace.
        [string]:                       # string


Build
=====

Build encapsulates the inputs needed to produce a new deployable image, as well as the status of the execution and a reference to the Pod which executed the build.

kind: Build                             # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.BuildSpec                            spec is all the inputs used to execute the build.
  serviceAccount:                       # string                                  serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount
  source:                               # v1.BuildSource                          source describes the SCM in use.
    type:                               # string                                  type of build input to accept
    binary:                             # v1.BinaryBuildSource                    binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy. For Docker builds, this is the build context and an optional Dockerfile may be specified to override any Dockerfile in the build context. For Source builds, this is assumed to be an archive as described above. For Source and Docker builds, if binary.asFile is set the build will receive a directory with a single file. contextDir may be used when an archive is provided. Custom builds will receive this binary as input on STDIN.
      asFile:                           # string                                  asFile indicates that the provided binary input should be considered a single file within the build input. For example, specifying "webapp.war" would place the provided binary as `/webapp.war` for the builder. If left empty, the Docker and Source build strategies assume this file is a zip, tar, or tar.gz file and extract it as the source. The custom strategy receives this binary as standard input. This filename may not contain slashes or be '..' or '.'.
    dockerfile:                         # string                                  dockerfile is the raw contents of a Dockerfile which should be built. When this option is specified, the FROM may be modified based on your strategy base image and additional ENV stanzas from your strategy environment will be added after the FROM, but before the rest of your Dockerfile stanzas. The Dockerfile source type may be used with other options like git - in those cases the Git repo will have any innate Dockerfile replaced in the context dir.
    git:                                # v1.GitBuildSource                       git contains optional information about git build source
      uri:                              # string                                  uri points to the source that will be built. The structure of the source will depend on the type of build to run
      ref:                              # string                                  ref is the branch/tag/ref to build.
      httpProxy:                        # string                                  httpProxy is a proxy used to reach the git repository over http
      httpsProxy:                       # string                                  httpsProxy is a proxy used to reach the git repository over https
    images:                             # []v1.ImageSource                        images describes a set of images to be used to provide source for the build
    - from:                             # v1.ObjectReference                      from is a reference to an ImageStreamTag, ImageStreamImage, or DockerImage to copy source from.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        namespace:                      # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        apiVersion:                     # string                                  API version of the referent.
        resourceVersion:                # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        fieldPath:                      # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
      paths:                            # []v1.ImageSourcePath                    paths is a list of source and destination paths to copy from the image.
      - sourcePath:                     # string                                  sourcePath is the absolute path of the file or directory inside the image to copy to the build directory.
        destinationDir:                 # string                                  destinationDir is the relative directory within the build directory where files copied from the image are placed.
      pullSecret:                       # v1.LocalObjectReference                 pullSecret is a reference to a secret to be used to pull the image from a registry If the image is pulled from the OpenShift registry, this field does not need to be set.
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    contextDir:                         # string                                  contextDir specifies the sub-directory where the source code for the application exists. This allows to have buildable sources in directory other than root of repository.
    sourceSecret:                       # v1.LocalObjectReference                 sourceSecret is the name of a Secret that would be used for setting up the authentication for cloning private repository. The secret contains valid credentials for remote repository, where the data's key represent the authentication method to be used and value is the base64 encoded credentials. Supported auth methods are: ssh-privatekey.
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    secrets:                            # []v1.SecretBuildSource                  secrets represents a list of secrets and their destinations that will be used only for the build.
    - secret:                           # v1.LocalObjectReference                 secret is a reference to an existing secret that you want to use in your build.
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      destinationDir:                   # string                                  destinationDir is the directory where the files from the secret should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. Later, when the script finishes, all files injected will be truncated to zero length. For the Docker build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during docker build.
  revision:                             # v1.SourceRevision                       revision is the information from the source for a specific repo snapshot. This is optional.
    type:                               # string                                  type of the build source, may be one of 'Source', 'Dockerfile', 'Binary', or 'Images'
    git:                                # v1.GitSourceRevision                    Git contains information about git-based build source
      commit:                           # string                                  commit is the commit hash identifying a specific commit
      author:                           # v1.SourceControlUser                    author is the author of a specific commit
        name:                           # string                                  name of the source control user
        email:                          # string                                  email of the source control user
      committer:                        # v1.SourceControlUser                    committer is the committer of a specific commit
        name:                           # string                                  name of the source control user
        email:                          # string                                  email of the source control user
      message:                          # string                                  message is the description of a specific commit
  strategy:                             # v1.BuildStrategy                        strategy defines how to perform a build.
    type:                               # string                                  type is the kind of build strategy.
    dockerStrategy:                     # v1.DockerBuildStrategy                  dockerStrategy holds the parameters to the Docker build strategy.
      from:                             # v1.ObjectReference                      from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the docker image should be pulled the resulting image will be used in the FROM line of the Dockerfile for this build.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        namespace:                      # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        apiVersion:                     # string                                  API version of the referent.
        resourceVersion:                # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        fieldPath:                      # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
      pullSecret:                       # v1.LocalObjectReference                 pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the Docker images from the private Docker registries
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      noCache:                          # boolean                                 noCache if set to true indicates that the docker build must be executed with the --no-cache=true flag
      env:                              # []v1.EnvVar                             env contains additional environment variables you want to pass into a builder container
      - name:                           # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
        value:                          # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        valueFrom:                      # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
          fieldRef:                     # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
            apiVersion:                 # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
            fieldPath:                  # string                                  Path of the field to select in the specified API version.
          resourceFieldRef:             # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
            containerName:              # string                                  Container name: required for volumes, optional for env vars
            resource:                   # string                                  Required: resource to select
            divisor:                    # string                                  Specifies the output format of the exposed resources, defaults to "1"
          configMapKeyRef:              # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key to select.
          secretKeyRef:                 # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key of the secret to select from.  Must be a valid secret key.
      forcePull:                        # boolean                                 forcePull describes if the builder should pull the images from registry prior to building.
      dockerfilePath:                   # string                                  dockerfilePath is the path of the Dockerfile that will be used to build the Docker image, relative to the root of the context (contextDir).
    sourceStrategy:                     # v1.SourceBuildStrategy                  sourceStrategy holds the parameters to the Source build strategy.
      from:                             # v1.ObjectReference                      from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the docker image should be pulled
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        namespace:                      # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        apiVersion:                     # string                                  API version of the referent.
        resourceVersion:                # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        fieldPath:                      # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
      pullSecret:                       # v1.LocalObjectReference                 pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the Docker images from the private Docker registries
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      env:                              # []v1.EnvVar                             env contains additional environment variables you want to pass into a builder container
      - name:                           # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
        value:                          # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        valueFrom:                      # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
          fieldRef:                     # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
            apiVersion:                 # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
            fieldPath:                  # string                                  Path of the field to select in the specified API version.
          resourceFieldRef:             # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
            containerName:              # string                                  Container name: required for volumes, optional for env vars
            resource:                   # string                                  Required: resource to select
            divisor:                    # string                                  Specifies the output format of the exposed resources, defaults to "1"
          configMapKeyRef:              # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key to select.
          secretKeyRef:                 # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key of the secret to select from.  Must be a valid secret key.
      scripts:                          # string                                  scripts is the location of Source scripts
      incremental:                      # boolean                                 incremental flag forces the Source build to do incremental builds if true.
      forcePull:                        # boolean                                 forcePull describes if the builder should pull the images from registry prior to building.
    customStrategy:                     # v1.CustomBuildStrategy                  customStrategy holds the parameters to the Custom build strategy
      from:                             # v1.ObjectReference                      from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the docker image should be pulled
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        namespace:                      # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        apiVersion:                     # string                                  API version of the referent.
        resourceVersion:                # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        fieldPath:                      # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
      pullSecret:                       # v1.LocalObjectReference                 pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the Docker images from the private Docker registries
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      env:                              # []v1.EnvVar                             env contains additional environment variables you want to pass into a builder container
      - name:                           # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
        value:                          # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        valueFrom:                      # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
          fieldRef:                     # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
            apiVersion:                 # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
            fieldPath:                  # string                                  Path of the field to select in the specified API version.
          resourceFieldRef:             # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
            containerName:              # string                                  Container name: required for volumes, optional for env vars
            resource:                   # string                                  Required: resource to select
            divisor:                    # string                                  Specifies the output format of the exposed resources, defaults to "1"
          configMapKeyRef:              # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key to select.
          secretKeyRef:                 # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key of the secret to select from.  Must be a valid secret key.
      exposeDockerSocket:               # boolean                                 exposeDockerSocket will allow running Docker commands (and build Docker images) from inside the Docker container.
      forcePull:                        # boolean                                 forcePull describes if the controller should configure the build pod to always pull the images for the builder or only pull if it is not present locally
      secrets:                          # []v1.SecretSpec                         secrets is a list of additional secrets that will be included in the build pod
      - secretSource:                   # v1.LocalObjectReference                 secretSource is a reference to the secret
          name:                         # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        mountPath:                      # string                                  mountPath is the path at which to mount the secret
      buildAPIVersion:                  # string                                  buildAPIVersion is the requested API version for the Build object serialized and passed to the custom builder
    jenkinsPipelineStrategy:            # v1.JenkinsPipelineBuildStrategy         JenkinsPipelineStrategy holds the parameters to the Jenkins Pipeline build strategy. This strategy is experimental.
      jenkinsfilePath:                  # string                                  JenkinsfilePath is the optional path of the Jenkinsfile that will be used to configure the pipeline relative to the root of the context (contextDir). If both JenkinsfilePath & Jenkinsfile are both not specified, this defaults to Jenkinsfile in the root of the specified contextDir.
      jenkinsfile:                      # string                                  Jenkinsfile defines the optional raw contents of a Jenkinsfile which defines a Jenkins pipeline build.
  output:                               # v1.BuildOutput                          output describes the Docker image the Strategy should produce.
    to:                                 # v1.ObjectReference                      to defines an optional location to push the output of this build to. Kind must be one of 'ImageStreamTag' or 'DockerImage'. This value will be used to look up a Docker image repository to push to. In the case of an ImageStreamTag, the ImageStreamTag will be looked for in the namespace of the build unless Namespace is specified.
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      namespace:                        # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      apiVersion:                       # string                                  API version of the referent.
      resourceVersion:                  # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      fieldPath:                        # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    pushSecret:                         # v1.LocalObjectReference                 PushSecret is the name of a Secret that would be used for setting up the authentication for executing the Docker push to authentication enabled Docker Registry (or Docker Hub).
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  resources:                            # v1.ResourceRequirements                 resources computes resource requirements to execute the build.
    limits:                             # map[string]string                       Limits describes the maximum amount of compute resources allowed. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
      [string]:                         # string
    requests:                           # map[string]string                       Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
      [string]:                         # string
  postCommit:                           # v1.BuildPostCommitSpec                  postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry.
    command:                            # []string                                command is the command to run. It may not be specified with Script. This might be needed if the image doesn't have `/bin/sh`, or if you do not want to use a shell. In all other cases, using Script might be more convenient.
    - [string]                          # 
    args:                               # []string                                args is a list of arguments that are provided to either Command, Script or the Docker image's default entrypoint. The arguments are placed immediately after the command to be run.
    - [string]                          # 
    script:                             # string                                  script is a shell script to be run with `/bin/sh -ic`. It may not be specified with Command. Use Script when a shell script is appropriate to execute the post build hook, for example for running unit tests with `rake test`. If you need control over the image entrypoint, or if the image does not have `/bin/sh`, use Command and/or Args. The `-i` flag is needed to support CentOS and RHEL images that use Software Collections (SCL), in order to have the appropriate collections enabled in the shell. E.g., in the Ruby image, this is necessary to make `ruby`, `bundle` and other binaries available in the PATH.
  completionDeadlineSeconds:            # integer                                 completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer
  triggeredBy:                          # []v1.BuildTriggerCause                  triggeredBy describes which triggers started the most recent update to the build configuration and contains information about those triggers.
  - message:                            # string                                  message is used to store a human readable message for why the build was triggered. E.g.: "Manually triggered by user", "Configuration change",etc.
    genericWebHook:                     # v1.GenericWebHookCause                  genericWebHook holds data about a builds generic webhook trigger.
      revision:                         # v1.SourceRevision                       revision is an optional field that stores the git source revision information of the generic webhook trigger when it is available.
        type:                           # string                                  type of the build source, may be one of 'Source', 'Dockerfile', 'Binary', or 'Images'
        git:                            # v1.GitSourceRevision                    Git contains information about git-based build source
          commit:                       # string                                  commit is the commit hash identifying a specific commit
          author:                       # v1.SourceControlUser                    author is the author of a specific commit
            name:                       # string                                  name of the source control user
            email:                      # string                                  email of the source control user
          committer:                    # v1.SourceControlUser                    committer is the committer of a specific commit
            name:                       # string                                  name of the source control user
            email:                      # string                                  email of the source control user
          message:                      # string                                  message is the description of a specific commit
      secret:                           # string                                  secret is the obfuscated webhook secret that triggered a build.
    githubWebHook:                      # v1.GitHubWebHookCause                   gitHubWebHook represents data for a GitHub webhook that fired a specific build.
      revision:                         # v1.SourceRevision                       revision is the git revision information of the trigger.
        type:                           # string                                  type of the build source, may be one of 'Source', 'Dockerfile', 'Binary', or 'Images'
        git:                            # v1.GitSourceRevision                    Git contains information about git-based build source
          commit:                       # string                                  commit is the commit hash identifying a specific commit
          author:                       # v1.SourceControlUser                    author is the author of a specific commit
            name:                       # string                                  name of the source control user
            email:                      # string                                  email of the source control user
          committer:                    # v1.SourceControlUser                    committer is the committer of a specific commit
            name:                       # string                                  name of the source control user
            email:                      # string                                  email of the source control user
          message:                      # string                                  message is the description of a specific commit
      secret:                           # string                                  secret is the obfuscated webhook secret that triggered a build.
    imageChangeBuild:                   # v1.ImageChangeCause                     imageChangeBuild stores information about an imagechange event that triggered a new build.
      imageID:                          # string                                  imageID is the ID of the image that triggered a a new build.
      fromRef:                          # v1.ObjectReference                      fromRef contains detailed information about an image that triggered a build.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        namespace:                      # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        apiVersion:                     # string                                  API version of the referent.
        resourceVersion:                # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        fieldPath:                      # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
status:                                 # v1.BuildStatus                          status is the current status of the build.
  phase:                                # string                                  phase is the point in the build lifecycle.
  cancelled:                            # boolean                                 cancelled describes if a cancel event was triggered for the build.
  reason:                               # string                                  reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
  message:                              # string                                  message is a human-readable message indicating details about why the build has this status.
  startTimestamp:                       # string                                  startTimestamp is a timestamp representing the server time when this Build started running in a Pod. It is represented in RFC3339 form and is in UTC.
  completionTimestamp:                  # string                                  completionTimestamp is a timestamp representing the server time when this Build was finished, whether that build failed or succeeded.  It reflects the time at which the Pod running the Build terminated. It is represented in RFC3339 form and is in UTC.
  duration:                             # time.Duration                           duration contains time.Duration object describing build time.
  outputDockerImageReference:           # string                                  outputDockerImageReference contains a reference to the Docker image that will be built by this build. Its value is computed from Build.Spec.Output.To, and should include the registry address, so that it can be used to push and pull the image.
  config:                               # v1.ObjectReference                      config is an ObjectReference to the BuildConfig this Build is based on.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    namespace:                          # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    apiVersion:                         # string                                  API version of the referent.
    resourceVersion:                    # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
    fieldPath:                          # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.


BuildConfig
===========

BuildConfig is a template which can be used to create new builds.

kind: BuildConfig                       # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           metadata for BuildConfig.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.BuildConfigSpec                      spec holds all the input necessary to produce a new build, and the conditions when to trigger them.
  triggers:                             # []v1.BuildTriggerPolicy                 triggers determine how new Builds can be launched from a BuildConfig. If no triggers are defined, a new build can only occur as a result of an explicit client build creation.
  - type:                               # string                                  type is the type of build trigger
    github:                             # v1.WebHookTrigger                       github contains the parameters for a GitHub webhook type of trigger
      secret:                           # string                                  secret used to validate requests.
      allowEnv:                         # boolean                                 allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook.
    generic:                            # v1.WebHookTrigger                       generic contains the parameters for a Generic webhook type of trigger
      secret:                           # string                                  secret used to validate requests.
      allowEnv:                         # boolean                                 allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook.
    imageChange:                        # v1.ImageChangeTrigger                   imageChange contains parameters for an ImageChange type of trigger
      lastTriggeredImageID:             # string                                  lastTriggeredImageID is used internally by the ImageChangeController to save last used image ID for build
      from:                             # v1.ObjectReference                      from is a reference to an ImageStreamTag that will trigger a build when updated It is optional. If no From is specified, the From image from the build strategy will be used. Only one ImageChangeTrigger with an empty From reference is allowed in a build configuration.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        namespace:                      # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        apiVersion:                     # string                                  API version of the referent.
        resourceVersion:                # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        fieldPath:                      # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  runPolicy:                            # string                                  RunPolicy describes how the new build created from this build configuration will be scheduled for execution. This is optional, if not specified we default to "Serial".
  serviceAccount:                       # string                                  serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount
  source:                               # v1.BuildSource                          source describes the SCM in use.
    type:                               # string                                  type of build input to accept
    binary:                             # v1.BinaryBuildSource                    binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy. For Docker builds, this is the build context and an optional Dockerfile may be specified to override any Dockerfile in the build context. For Source builds, this is assumed to be an archive as described above. For Source and Docker builds, if binary.asFile is set the build will receive a directory with a single file. contextDir may be used when an archive is provided. Custom builds will receive this binary as input on STDIN.
      asFile:                           # string                                  asFile indicates that the provided binary input should be considered a single file within the build input. For example, specifying "webapp.war" would place the provided binary as `/webapp.war` for the builder. If left empty, the Docker and Source build strategies assume this file is a zip, tar, or tar.gz file and extract it as the source. The custom strategy receives this binary as standard input. This filename may not contain slashes or be '..' or '.'.
    dockerfile:                         # string                                  dockerfile is the raw contents of a Dockerfile which should be built. When this option is specified, the FROM may be modified based on your strategy base image and additional ENV stanzas from your strategy environment will be added after the FROM, but before the rest of your Dockerfile stanzas. The Dockerfile source type may be used with other options like git - in those cases the Git repo will have any innate Dockerfile replaced in the context dir.
    git:                                # v1.GitBuildSource                       git contains optional information about git build source
      uri:                              # string                                  uri points to the source that will be built. The structure of the source will depend on the type of build to run
      ref:                              # string                                  ref is the branch/tag/ref to build.
      httpProxy:                        # string                                  httpProxy is a proxy used to reach the git repository over http
      httpsProxy:                       # string                                  httpsProxy is a proxy used to reach the git repository over https
    images:                             # []v1.ImageSource                        images describes a set of images to be used to provide source for the build
    - from:                             # v1.ObjectReference                      from is a reference to an ImageStreamTag, ImageStreamImage, or DockerImage to copy source from.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        namespace:                      # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        apiVersion:                     # string                                  API version of the referent.
        resourceVersion:                # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        fieldPath:                      # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
      paths:                            # []v1.ImageSourcePath                    paths is a list of source and destination paths to copy from the image.
      - sourcePath:                     # string                                  sourcePath is the absolute path of the file or directory inside the image to copy to the build directory.
        destinationDir:                 # string                                  destinationDir is the relative directory within the build directory where files copied from the image are placed.
      pullSecret:                       # v1.LocalObjectReference                 pullSecret is a reference to a secret to be used to pull the image from a registry If the image is pulled from the OpenShift registry, this field does not need to be set.
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    contextDir:                         # string                                  contextDir specifies the sub-directory where the source code for the application exists. This allows to have buildable sources in directory other than root of repository.
    sourceSecret:                       # v1.LocalObjectReference                 sourceSecret is the name of a Secret that would be used for setting up the authentication for cloning private repository. The secret contains valid credentials for remote repository, where the data's key represent the authentication method to be used and value is the base64 encoded credentials. Supported auth methods are: ssh-privatekey.
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    secrets:                            # []v1.SecretBuildSource                  secrets represents a list of secrets and their destinations that will be used only for the build.
    - secret:                           # v1.LocalObjectReference                 secret is a reference to an existing secret that you want to use in your build.
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      destinationDir:                   # string                                  destinationDir is the directory where the files from the secret should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. Later, when the script finishes, all files injected will be truncated to zero length. For the Docker build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during docker build.
  revision:                             # v1.SourceRevision                       revision is the information from the source for a specific repo snapshot. This is optional.
    type:                               # string                                  type of the build source, may be one of 'Source', 'Dockerfile', 'Binary', or 'Images'
    git:                                # v1.GitSourceRevision                    Git contains information about git-based build source
      commit:                           # string                                  commit is the commit hash identifying a specific commit
      author:                           # v1.SourceControlUser                    author is the author of a specific commit
        name:                           # string                                  name of the source control user
        email:                          # string                                  email of the source control user
      committer:                        # v1.SourceControlUser                    committer is the committer of a specific commit
        name:                           # string                                  name of the source control user
        email:                          # string                                  email of the source control user
      message:                          # string                                  message is the description of a specific commit
  strategy:                             # v1.BuildStrategy                        strategy defines how to perform a build.
    type:                               # string                                  type is the kind of build strategy.
    dockerStrategy:                     # v1.DockerBuildStrategy                  dockerStrategy holds the parameters to the Docker build strategy.
      from:                             # v1.ObjectReference                      from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the docker image should be pulled the resulting image will be used in the FROM line of the Dockerfile for this build.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        namespace:                      # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        apiVersion:                     # string                                  API version of the referent.
        resourceVersion:                # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        fieldPath:                      # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
      pullSecret:                       # v1.LocalObjectReference                 pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the Docker images from the private Docker registries
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      noCache:                          # boolean                                 noCache if set to true indicates that the docker build must be executed with the --no-cache=true flag
      env:                              # []v1.EnvVar                             env contains additional environment variables you want to pass into a builder container
      - name:                           # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
        value:                          # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        valueFrom:                      # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
          fieldRef:                     # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
            apiVersion:                 # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
            fieldPath:                  # string                                  Path of the field to select in the specified API version.
          resourceFieldRef:             # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
            containerName:              # string                                  Container name: required for volumes, optional for env vars
            resource:                   # string                                  Required: resource to select
            divisor:                    # string                                  Specifies the output format of the exposed resources, defaults to "1"
          configMapKeyRef:              # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key to select.
          secretKeyRef:                 # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key of the secret to select from.  Must be a valid secret key.
      forcePull:                        # boolean                                 forcePull describes if the builder should pull the images from registry prior to building.
      dockerfilePath:                   # string                                  dockerfilePath is the path of the Dockerfile that will be used to build the Docker image, relative to the root of the context (contextDir).
    sourceStrategy:                     # v1.SourceBuildStrategy                  sourceStrategy holds the parameters to the Source build strategy.
      from:                             # v1.ObjectReference                      from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the docker image should be pulled
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        namespace:                      # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        apiVersion:                     # string                                  API version of the referent.
        resourceVersion:                # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        fieldPath:                      # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
      pullSecret:                       # v1.LocalObjectReference                 pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the Docker images from the private Docker registries
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      env:                              # []v1.EnvVar                             env contains additional environment variables you want to pass into a builder container
      - name:                           # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
        value:                          # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        valueFrom:                      # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
          fieldRef:                     # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
            apiVersion:                 # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
            fieldPath:                  # string                                  Path of the field to select in the specified API version.
          resourceFieldRef:             # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
            containerName:              # string                                  Container name: required for volumes, optional for env vars
            resource:                   # string                                  Required: resource to select
            divisor:                    # string                                  Specifies the output format of the exposed resources, defaults to "1"
          configMapKeyRef:              # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key to select.
          secretKeyRef:                 # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key of the secret to select from.  Must be a valid secret key.
      scripts:                          # string                                  scripts is the location of Source scripts
      incremental:                      # boolean                                 incremental flag forces the Source build to do incremental builds if true.
      forcePull:                        # boolean                                 forcePull describes if the builder should pull the images from registry prior to building.
    customStrategy:                     # v1.CustomBuildStrategy                  customStrategy holds the parameters to the Custom build strategy
      from:                             # v1.ObjectReference                      from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the docker image should be pulled
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        namespace:                      # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        apiVersion:                     # string                                  API version of the referent.
        resourceVersion:                # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        fieldPath:                      # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
      pullSecret:                       # v1.LocalObjectReference                 pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the Docker images from the private Docker registries
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      env:                              # []v1.EnvVar                             env contains additional environment variables you want to pass into a builder container
      - name:                           # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
        value:                          # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        valueFrom:                      # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
          fieldRef:                     # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
            apiVersion:                 # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
            fieldPath:                  # string                                  Path of the field to select in the specified API version.
          resourceFieldRef:             # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
            containerName:              # string                                  Container name: required for volumes, optional for env vars
            resource:                   # string                                  Required: resource to select
            divisor:                    # string                                  Specifies the output format of the exposed resources, defaults to "1"
          configMapKeyRef:              # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key to select.
          secretKeyRef:                 # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key of the secret to select from.  Must be a valid secret key.
      exposeDockerSocket:               # boolean                                 exposeDockerSocket will allow running Docker commands (and build Docker images) from inside the Docker container.
      forcePull:                        # boolean                                 forcePull describes if the controller should configure the build pod to always pull the images for the builder or only pull if it is not present locally
      secrets:                          # []v1.SecretSpec                         secrets is a list of additional secrets that will be included in the build pod
      - secretSource:                   # v1.LocalObjectReference                 secretSource is a reference to the secret
          name:                         # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        mountPath:                      # string                                  mountPath is the path at which to mount the secret
      buildAPIVersion:                  # string                                  buildAPIVersion is the requested API version for the Build object serialized and passed to the custom builder
    jenkinsPipelineStrategy:            # v1.JenkinsPipelineBuildStrategy         JenkinsPipelineStrategy holds the parameters to the Jenkins Pipeline build strategy. This strategy is experimental.
      jenkinsfilePath:                  # string                                  JenkinsfilePath is the optional path of the Jenkinsfile that will be used to configure the pipeline relative to the root of the context (contextDir). If both JenkinsfilePath & Jenkinsfile are both not specified, this defaults to Jenkinsfile in the root of the specified contextDir.
      jenkinsfile:                      # string                                  Jenkinsfile defines the optional raw contents of a Jenkinsfile which defines a Jenkins pipeline build.
  output:                               # v1.BuildOutput                          output describes the Docker image the Strategy should produce.
    to:                                 # v1.ObjectReference                      to defines an optional location to push the output of this build to. Kind must be one of 'ImageStreamTag' or 'DockerImage'. This value will be used to look up a Docker image repository to push to. In the case of an ImageStreamTag, the ImageStreamTag will be looked for in the namespace of the build unless Namespace is specified.
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      namespace:                        # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      apiVersion:                       # string                                  API version of the referent.
      resourceVersion:                  # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      fieldPath:                        # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    pushSecret:                         # v1.LocalObjectReference                 PushSecret is the name of a Secret that would be used for setting up the authentication for executing the Docker push to authentication enabled Docker Registry (or Docker Hub).
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  resources:                            # v1.ResourceRequirements                 resources computes resource requirements to execute the build.
    limits:                             # map[string]string                       Limits describes the maximum amount of compute resources allowed. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
      [string]:                         # string
    requests:                           # map[string]string                       Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
      [string]:                         # string
  postCommit:                           # v1.BuildPostCommitSpec                  postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry.
    command:                            # []string                                command is the command to run. It may not be specified with Script. This might be needed if the image doesn't have `/bin/sh`, or if you do not want to use a shell. In all other cases, using Script might be more convenient.
    - [string]                          # 
    args:                               # []string                                args is a list of arguments that are provided to either Command, Script or the Docker image's default entrypoint. The arguments are placed immediately after the command to be run.
    - [string]                          # 
    script:                             # string                                  script is a shell script to be run with `/bin/sh -ic`. It may not be specified with Command. Use Script when a shell script is appropriate to execute the post build hook, for example for running unit tests with `rake test`. If you need control over the image entrypoint, or if the image does not have `/bin/sh`, use Command and/or Args. The `-i` flag is needed to support CentOS and RHEL images that use Software Collections (SCL), in order to have the appropriate collections enabled in the shell. E.g., in the Ruby image, this is necessary to make `ruby`, `bundle` and other binaries available in the PATH.
  completionDeadlineSeconds:            # integer                                 completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer
status:                                 # v1.BuildConfigStatus                    status holds any relevant information about a build config
  lastVersion:                          # integer                                 lastVersion is used to inform about number of last triggered build.


BuildLog
========

BuildLog is the (unused) resource associated with the build log redirector

kind: BuildLog                          # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources


BuildRequest
============

BuildRequest is the resource used to pass parameters to build generator

kind: BuildRequest                      # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           metadata for BuildRequest.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
revision:                               # v1.SourceRevision                       revision is the information from the source for a specific repo snapshot.
  type:                                 # string                                  type of the build source, may be one of 'Source', 'Dockerfile', 'Binary', or 'Images'
  git:                                  # v1.GitSourceRevision                    Git contains information about git-based build source
    commit:                             # string                                  commit is the commit hash identifying a specific commit
    author:                             # v1.SourceControlUser                    author is the author of a specific commit
      name:                             # string                                  name of the source control user
      email:                            # string                                  email of the source control user
    committer:                          # v1.SourceControlUser                    committer is the committer of a specific commit
      name:                             # string                                  name of the source control user
      email:                            # string                                  email of the source control user
    message:                            # string                                  message is the description of a specific commit
triggeredByImage:                       # v1.ObjectReference                      triggeredByImage is the Image that triggered this build.
  kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
from:                                   # v1.ObjectReference                      from is the reference to the ImageStreamTag that triggered the build.
  kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
binary:                                 # v1.BinaryBuildSource                    binary indicates a request to build from a binary provided to the builder
  asFile:                               # string                                  asFile indicates that the provided binary input should be considered a single file within the build input. For example, specifying "webapp.war" would place the provided binary as `/webapp.war` for the builder. If left empty, the Docker and Source build strategies assume this file is a zip, tar, or tar.gz file and extract it as the source. The custom strategy receives this binary as standard input. This filename may not contain slashes or be '..' or '.'.
lastVersion:                            # integer                                 lastVersion (optional) is the LastVersion of the BuildConfig that was used to generate the build. If the BuildConfig in the generator doesn't match, a build will not be generated.
env:                                    # []v1.EnvVar                             env contains additional environment variables you want to pass into a builder container
- name:                                 # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
  value:                                # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
  valueFrom:                            # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
    fieldRef:                           # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
      apiVersion:                       # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
      fieldPath:                        # string                                  Path of the field to select in the specified API version.
    resourceFieldRef:                   # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
      containerName:                    # string                                  Container name: required for volumes, optional for env vars
      resource:                         # string                                  Required: resource to select
      divisor:                          # string                                  Specifies the output format of the exposed resources, defaults to "1"
    configMapKeyRef:                    # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      key:                              # string                                  The key to select.
    secretKeyRef:                       # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      key:                              # string                                  The key of the secret to select from.  Must be a valid secret key.
triggeredBy:                            # []v1.BuildTriggerCause                  triggeredBy describes which triggers started the most recent update to the build configuration and contains information about those triggers.
- message:                              # string                                  message is used to store a human readable message for why the build was triggered. E.g.: "Manually triggered by user", "Configuration change",etc.
  genericWebHook:                       # v1.GenericWebHookCause                  genericWebHook holds data about a builds generic webhook trigger.
    revision:                           # v1.SourceRevision                       revision is an optional field that stores the git source revision information of the generic webhook trigger when it is available.
      type:                             # string                                  type of the build source, may be one of 'Source', 'Dockerfile', 'Binary', or 'Images'
      git:                              # v1.GitSourceRevision                    Git contains information about git-based build source
        commit:                         # string                                  commit is the commit hash identifying a specific commit
        author:                         # v1.SourceControlUser                    author is the author of a specific commit
          name:                         # string                                  name of the source control user
          email:                        # string                                  email of the source control user
        committer:                      # v1.SourceControlUser                    committer is the committer of a specific commit
          name:                         # string                                  name of the source control user
          email:                        # string                                  email of the source control user
        message:                        # string                                  message is the description of a specific commit
    secret:                             # string                                  secret is the obfuscated webhook secret that triggered a build.
  githubWebHook:                        # v1.GitHubWebHookCause                   gitHubWebHook represents data for a GitHub webhook that fired a specific build.
    revision:                           # v1.SourceRevision                       revision is the git revision information of the trigger.
      type:                             # string                                  type of the build source, may be one of 'Source', 'Dockerfile', 'Binary', or 'Images'
      git:                              # v1.GitSourceRevision                    Git contains information about git-based build source
        commit:                         # string                                  commit is the commit hash identifying a specific commit
        author:                         # v1.SourceControlUser                    author is the author of a specific commit
          name:                         # string                                  name of the source control user
          email:                        # string                                  email of the source control user
        committer:                      # v1.SourceControlUser                    committer is the committer of a specific commit
          name:                         # string                                  name of the source control user
          email:                        # string                                  email of the source control user
        message:                        # string                                  message is the description of a specific commit
    secret:                             # string                                  secret is the obfuscated webhook secret that triggered a build.
  imageChangeBuild:                     # v1.ImageChangeCause                     imageChangeBuild stores information about an imagechange event that triggered a new build.
    imageID:                            # string                                  imageID is the ID of the image that triggered a a new build.
    fromRef:                            # v1.ObjectReference                      fromRef contains detailed information about an image that triggered a build.
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      namespace:                        # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      apiVersion:                       # string                                  API version of the referent.
      resourceVersion:                  # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      fieldPath:                        # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.


ClusterNetwork
==============

ClusterNetwork describes a cluster network

kind: ClusterNetwork                    # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
network:                                # string                                  Network is a CIDR string to specify the global overlay network's L3 space
hostsubnetlength:                       # integer                                 HostSubnetLength is the number of bits to allocate to each host's subnet e.g. 8 would mean a /24 network on the host
serviceNetwork:                         # string                                  ServiceNetwork is the CIDR string to specify the service network
pluginName:                             # string                                  PluginName is the name of the network plugin


ClusterPolicy
=============

ClusterPolicy is a object that holds all the ClusterRoles for a particular namespace.  There is at most one ClusterPolicy document per namespace.

kind: ClusterPolicy                     # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
lastModified:                           # string                                  LastModified is the last time that any part of the ClusterPolicy was created, updated, or deleted
roles:                                  # []v1.NamedClusterRole                   Roles holds all the ClusterRoles held by this ClusterPolicy, mapped by ClusterRole.Name
- name:                                 # string                                  Name is the name of the cluster role
  role:                                 # v1.ClusterRole                          Role is the cluster role being named
    kind:                               # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    apiVersion:                         # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
    metadata:                           # v1.ObjectMeta                           Standard object's metadata.
      name:                             # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      generateName:                     # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
      namespace:                        # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      selfLink:                         # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
      uid:                              # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      resourceVersion:                  # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      generation:                       # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
      creationTimestamp:                # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionTimestamp:                # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionGracePeriodSeconds:       # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
      labels:                           # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
        [string]:                       # string
      annotations:                      # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
        [string]:                       # string
      ownerReferences:                  # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
      - apiVersion:                     # string                                  API version of the referent.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        controller:                     # boolean                                 If true, this reference points to the managing controller.
      finalizers:                       # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
      - [string]                        # 
    rules:                              # []v1.PolicyRule                         Rules holds all the PolicyRules for this ClusterRole
    - verbs:                            # []string                                Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
      - [string]                        # 
      attributeRestrictions:            # string                                  AttributeRestrictions will vary depending on what the Authorizer/AuthorizationAttributeBuilder pair supports. If the Authorizer does not recognize how to handle the AttributeRestrictions, the Authorizer should report an error.
      apiGroups:                        # []string                                APIGroups is the name of the APIGroup that contains the resources.  If this field is empty, then both kubernetes and origin API groups are assumed. That means that if an action is requested against one of the enumerated resources in either the kubernetes or the origin API group, the request will be allowed
      - [string]                        # 
      resources:                        # []string                                Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
      - [string]                        # 
      resourceNames:                    # []string                                ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
      - [string]                        # 
      nonResourceURLs:                  # []string                                NonResourceURLsSlice is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different.
      - [string]                        # 


ClusterPolicyBinding
====================

ClusterPolicyBinding is a object that holds all the ClusterRoleBindings for a particular namespace.  There is one ClusterPolicyBinding document per referenced ClusterPolicy namespace

kind: ClusterPolicyBinding              # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
lastModified:                           # string                                  LastModified is the last time that any part of the ClusterPolicyBinding was created, updated, or deleted
policyRef:                              # v1.ObjectReference                      PolicyRef is a reference to the ClusterPolicy that contains all the ClusterRoles that this ClusterPolicyBinding's RoleBindings may reference
  kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
roleBindings:                           # []v1.NamedClusterRoleBinding            RoleBindings holds all the ClusterRoleBindings held by this ClusterPolicyBinding, mapped by ClusterRoleBinding.Name
- name:                                 # string                                  Name is the name of the cluster role binding
  roleBinding:                          # v1.ClusterRoleBinding                   RoleBinding is the cluster role binding being named
    kind:                               # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    apiVersion:                         # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
    metadata:                           # v1.ObjectMeta                           Standard object's metadata.
      name:                             # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      generateName:                     # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
      namespace:                        # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      selfLink:                         # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
      uid:                              # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      resourceVersion:                  # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      generation:                       # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
      creationTimestamp:                # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionTimestamp:                # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionGracePeriodSeconds:       # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
      labels:                           # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
        [string]:                       # string
      annotations:                      # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
        [string]:                       # string
      ownerReferences:                  # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
      - apiVersion:                     # string                                  API version of the referent.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        controller:                     # boolean                                 If true, this reference points to the managing controller.
      finalizers:                       # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
      - [string]                        # 
    userNames:                          # []string                                UserNames holds all the usernames directly bound to the role
    - [string]                          # 
    groupNames:                         # []string                                GroupNames holds all the groups directly bound to the role
    - [string]                          # 
    subjects:                           # []v1.ObjectReference                    Subjects hold object references to authorize with this rule
    - kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      namespace:                        # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      apiVersion:                       # string                                  API version of the referent.
      resourceVersion:                  # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      fieldPath:                        # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    roleRef:                            # v1.ObjectReference                      RoleRef can only reference the current namespace and the global namespace If the ClusterRoleRef cannot be resolved, the Authorizer must return an error. Since Policy is a singleton, this is sufficient knowledge to locate a role
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      namespace:                        # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      apiVersion:                       # string                                  API version of the referent.
      resourceVersion:                  # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      fieldPath:                        # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.


ClusterResourceQuota
====================

ClusterResourceQuota mirrors ResourceQuota at a cluster scope.  This object is easily convertible to synthetic ResourceQuota object to allow quota evaluation re-use.

kind: ClusterResourceQuota              # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.ClusterResourceQuotaSpec             Spec defines the desired quota
  selector:                             # v1.ClusterResourceQuotaSelector         Selector is the selector used to match projects. It should only select active projects on the scale of dozens (though it can select many more less active projects).  These projects will contend on object creation through this resource.
    labels:                             # unversioned.LabelSelector               LabelSelector is used to select projects by label.
      matchLabels:                      # map[string]string                       matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        [string]:                       # string
      matchExpressions:                 # []unversioned.LabelSelectorRequirement  matchExpressions is a list of label selector requirements. The requirements are ANDed.
      - key:                            # string                                  key is the label key that the selector applies to.
        operator:                       # string                                  operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist.
        values:                         # []string                                values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        - [string]                      # 
    annotations:                        # map[string]string                       AnnotationSelector is used to select projects by annotation.
      [string]:                         # string
  quota:                                # v1.ResourceQuotaSpec                    Quota defines the desired quota
    hard:                               # map[string]string                       Hard is the set of desired hard limits for each named resource. More info: http://releases.k8s.io/release-1.3/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota
      [string]:                         # string
    scopes:                             # []v1.ResourceQuotaScope                 A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
status:                                 # v1.ClusterResourceQuotaStatus           Status defines the actual enforced quota and its current usage
  total:                                # v1.ResourceQuotaStatus                  Total defines the actual enforced quota and its current usage across all projects
    hard:                               # map[string]string                       Hard is the set of enforced hard limits for each named resource. More info: http://releases.k8s.io/release-1.3/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota
      [string]:                         # string
    used:                               # map[string]string                       Used is the current observed total usage of the resource in the namespace.
      [string]:                         # string
  namespaces:                           # []v1.ResourceQuotaStatusByNamespace     Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconcilation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project.
  - namespace:                          # string                                  Namespace the project this status applies to
    status:                             # v1.ResourceQuotaStatus                  Status indicates how many resources have been consumed by this project
      hard:                             # map[string]string                       Hard is the set of enforced hard limits for each named resource. More info: http://releases.k8s.io/release-1.3/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota
        [string]:                       # string
      used:                             # map[string]string                       Used is the current observed total usage of the resource in the namespace.
        [string]:                       # string


ClusterRole
===========

ClusterRole is a logical grouping of PolicyRules that can be referenced as a unit by ClusterRoleBindings.

kind: ClusterRole                       # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
rules:                                  # []v1.PolicyRule                         Rules holds all the PolicyRules for this ClusterRole
- verbs:                                # []string                                Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
  - [string]                            # 
  attributeRestrictions:                # string                                  AttributeRestrictions will vary depending on what the Authorizer/AuthorizationAttributeBuilder pair supports. If the Authorizer does not recognize how to handle the AttributeRestrictions, the Authorizer should report an error.
  apiGroups:                            # []string                                APIGroups is the name of the APIGroup that contains the resources.  If this field is empty, then both kubernetes and origin API groups are assumed. That means that if an action is requested against one of the enumerated resources in either the kubernetes or the origin API group, the request will be allowed
  - [string]                            # 
  resources:                            # []string                                Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
  - [string]                            # 
  resourceNames:                        # []string                                ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
  - [string]                            # 
  nonResourceURLs:                      # []string                                NonResourceURLsSlice is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different.
  - [string]                            # 


ClusterRoleBinding
==================

ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference any ClusterRole in the same namespace or in the global namespace. It adds who information via Users and Groups and namespace information by which namespace it exists in.  ClusterRoleBindings in a given namespace only have effect in that namespace (excepting the master namespace which has power in all namespaces).

kind: ClusterRoleBinding                # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
userNames:                              # []string                                UserNames holds all the usernames directly bound to the role
- [string]                              # 
groupNames:                             # []string                                GroupNames holds all the groups directly bound to the role
- [string]                              # 
subjects:                               # []v1.ObjectReference                    Subjects hold object references to authorize with this rule
- kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
roleRef:                                # v1.ObjectReference                      RoleRef can only reference the current namespace and the global namespace If the ClusterRoleRef cannot be resolved, the Authorizer must return an error. Since Policy is a singleton, this is sufficient knowledge to locate a role
  kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.


DeleteOptions
=============

DeleteOptions may be provided when deleting an API object

kind: DeleteOptions                     # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
gracePeriodSeconds:                     # integer                                 The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
preconditions:                          # v1.Preconditions                        Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
  uid:                                  # types.UID                               Specifies the target UID.
orphanDependents:                       # boolean                                 Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list.


DeploymentConfig
================

DeploymentConfig represents a configuration for a single deployment (represented as a ReplicationController). It also contains details about changes which resulted in the current state of the DeploymentConfig. Each change to the DeploymentConfig which should result in a new deployment results in an increment of LatestVersion.

kind: DeploymentConfig                  # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.DeploymentConfigSpec                 Spec represents a desired deployment state and how to deploy to it.
  strategy:                             # v1.DeploymentStrategy                   Strategy describes how a deployment is executed.
    type:                               # string                                  Type is the name of a deployment strategy.
    customParams:                       # v1.CustomDeploymentStrategyParams       CustomParams are the input to the Custom deployment strategy.
      image:                            # string                                  Image specifies a Docker image which can carry out a deployment.
      environment:                      # []v1.EnvVar                             Environment holds the environment which will be given to the container for Image.
      - name:                           # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
        value:                          # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        valueFrom:                      # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
          fieldRef:                     # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
            apiVersion:                 # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
            fieldPath:                  # string                                  Path of the field to select in the specified API version.
          resourceFieldRef:             # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
            containerName:              # string                                  Container name: required for volumes, optional for env vars
            resource:                   # string                                  Required: resource to select
            divisor:                    # string                                  Specifies the output format of the exposed resources, defaults to "1"
          configMapKeyRef:              # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key to select.
          secretKeyRef:                 # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            key:                        # string                                  The key of the secret to select from.  Must be a valid secret key.
      command:                          # []string                                Command is optional and overrides CMD in the container Image.
      - [string]                        # 
    recreateParams:                     # v1.RecreateDeploymentStrategyParams     RecreateParams are the input to the Recreate deployment strategy.
      timeoutSeconds:                   # integer                                 TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.
      pre:                              # v1.LifecycleHook                        Pre is a lifecycle hook which is executed before the strategy manipulates the deployment. All LifecycleHookFailurePolicy values are supported.
        failurePolicy:                  # string                                  FailurePolicy specifies what action to take if the hook fails.
        execNewPod:                     # v1.ExecNewPodHook                       ExecNewPod specifies the options for a lifecycle hook backed by a pod.
          command:                      # []string                                Command is the action command and its arguments.
          - [string]                    # 
          env:                          # []v1.EnvVar                             Env is a set of environment variables to supply to the hook pod's container.
          - name:                       # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
            value:                      # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
            valueFrom:                  # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
              fieldRef:                 # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
                apiVersion:             # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                fieldPath:              # string                                  Path of the field to select in the specified API version.
              resourceFieldRef:         # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                containerName:          # string                                  Container name: required for volumes, optional for env vars
                resource:               # string                                  Required: resource to select
                divisor:                # string                                  Specifies the output format of the exposed resources, defaults to "1"
              configMapKeyRef:          # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
                name:                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
                key:                    # string                                  The key to select.
              secretKeyRef:             # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
                name:                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
                key:                    # string                                  The key of the secret to select from.  Must be a valid secret key.
          containerName:                # string                                  ContainerName is the name of a container in the deployment pod template whose Docker image will be used for the hook pod's container.
          volumes:                      # []string                                Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied.
          - [string]                    # 
        tagImages:                      # []v1.TagImageHook                       TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.
        - containerName:                # string                                  ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container.
          to:                           # v1.ObjectReference                      To is the target ImageStreamTag to set the container's image onto.
            kind:                       # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
            namespace:                  # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            uid:                        # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
            apiVersion:                 # string                                  API version of the referent.
            resourceVersion:            # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
            fieldPath:                  # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
      mid:                              # v1.LifecycleHook                        Mid is a lifecycle hook which is executed while the deployment is scaled down to zero before the first new pod is created. All LifecycleHookFailurePolicy values are supported.
        failurePolicy:                  # string                                  FailurePolicy specifies what action to take if the hook fails.
        execNewPod:                     # v1.ExecNewPodHook                       ExecNewPod specifies the options for a lifecycle hook backed by a pod.
          command:                      # []string                                Command is the action command and its arguments.
          - [string]                    # 
          env:                          # []v1.EnvVar                             Env is a set of environment variables to supply to the hook pod's container.
          - name:                       # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
            value:                      # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
            valueFrom:                  # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
              fieldRef:                 # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
                apiVersion:             # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                fieldPath:              # string                                  Path of the field to select in the specified API version.
              resourceFieldRef:         # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                containerName:          # string                                  Container name: required for volumes, optional for env vars
                resource:               # string                                  Required: resource to select
                divisor:                # string                                  Specifies the output format of the exposed resources, defaults to "1"
              configMapKeyRef:          # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
                name:                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
                key:                    # string                                  The key to select.
              secretKeyRef:             # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
                name:                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
                key:                    # string                                  The key of the secret to select from.  Must be a valid secret key.
          containerName:                # string                                  ContainerName is the name of a container in the deployment pod template whose Docker image will be used for the hook pod's container.
          volumes:                      # []string                                Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied.
          - [string]                    # 
        tagImages:                      # []v1.TagImageHook                       TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.
        - containerName:                # string                                  ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container.
          to:                           # v1.ObjectReference                      To is the target ImageStreamTag to set the container's image onto.
            kind:                       # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
            namespace:                  # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            uid:                        # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
            apiVersion:                 # string                                  API version of the referent.
            resourceVersion:            # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
            fieldPath:                  # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
      post:                             # v1.LifecycleHook                        Post is a lifecycle hook which is executed after the strategy has finished all deployment logic. All LifecycleHookFailurePolicy values are supported.
        failurePolicy:                  # string                                  FailurePolicy specifies what action to take if the hook fails.
        execNewPod:                     # v1.ExecNewPodHook                       ExecNewPod specifies the options for a lifecycle hook backed by a pod.
          command:                      # []string                                Command is the action command and its arguments.
          - [string]                    # 
          env:                          # []v1.EnvVar                             Env is a set of environment variables to supply to the hook pod's container.
          - name:                       # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
            value:                      # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
            valueFrom:                  # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
              fieldRef:                 # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
                apiVersion:             # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                fieldPath:              # string                                  Path of the field to select in the specified API version.
              resourceFieldRef:         # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                containerName:          # string                                  Container name: required for volumes, optional for env vars
                resource:               # string                                  Required: resource to select
                divisor:                # string                                  Specifies the output format of the exposed resources, defaults to "1"
              configMapKeyRef:          # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
                name:                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
                key:                    # string                                  The key to select.
              secretKeyRef:             # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
                name:                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
                key:                    # string                                  The key of the secret to select from.  Must be a valid secret key.
          containerName:                # string                                  ContainerName is the name of a container in the deployment pod template whose Docker image will be used for the hook pod's container.
          volumes:                      # []string                                Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied.
          - [string]                    # 
        tagImages:                      # []v1.TagImageHook                       TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.
        - containerName:                # string                                  ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container.
          to:                           # v1.ObjectReference                      To is the target ImageStreamTag to set the container's image onto.
            kind:                       # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
            namespace:                  # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            uid:                        # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
            apiVersion:                 # string                                  API version of the referent.
            resourceVersion:            # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
            fieldPath:                  # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    rollingParams:                      # v1.RollingDeploymentStrategyParams      RollingParams are the input to the Rolling deployment strategy.
      updatePeriodSeconds:              # integer                                 UpdatePeriodSeconds is the time to wait between individual pod updates. If the value is nil, a default will be used.
      intervalSeconds:                  # integer                                 IntervalSeconds is the time to wait between polling deployment status after update. If the value is nil, a default will be used.
      timeoutSeconds:                   # integer                                 TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.
      maxUnavailable:                   # string                                  MaxUnavailable is the maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0. By default, 25% is used. Example: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update.
      maxSurge:                         # string                                  MaxSurge is the maximum number of pods that can be scheduled above the original number of pods. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxUnavailable is 0. By default, 25% is used. Example: when this is set to 30%, the new RC can be scaled up by 30% immediately when the rolling update starts. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of original pods.
      updatePercent:                    # integer                                 UpdatePercent is the percentage of replicas to scale up or down each interval. If nil, one replica will be scaled up and down each interval. If negative, the scale order will be down/up instead of up/down. DEPRECATED: Use MaxUnavailable/MaxSurge instead.
      pre:                              # v1.LifecycleHook                        Pre is a lifecycle hook which is executed before the deployment process begins. All LifecycleHookFailurePolicy values are supported.
        failurePolicy:                  # string                                  FailurePolicy specifies what action to take if the hook fails.
        execNewPod:                     # v1.ExecNewPodHook                       ExecNewPod specifies the options for a lifecycle hook backed by a pod.
          command:                      # []string                                Command is the action command and its arguments.
          - [string]                    # 
          env:                          # []v1.EnvVar                             Env is a set of environment variables to supply to the hook pod's container.
          - name:                       # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
            value:                      # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
            valueFrom:                  # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
              fieldRef:                 # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
                apiVersion:             # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                fieldPath:              # string                                  Path of the field to select in the specified API version.
              resourceFieldRef:         # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                containerName:          # string                                  Container name: required for volumes, optional for env vars
                resource:               # string                                  Required: resource to select
                divisor:                # string                                  Specifies the output format of the exposed resources, defaults to "1"
              configMapKeyRef:          # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
                name:                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
                key:                    # string                                  The key to select.
              secretKeyRef:             # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
                name:                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
                key:                    # string                                  The key of the secret to select from.  Must be a valid secret key.
          containerName:                # string                                  ContainerName is the name of a container in the deployment pod template whose Docker image will be used for the hook pod's container.
          volumes:                      # []string                                Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied.
          - [string]                    # 
        tagImages:                      # []v1.TagImageHook                       TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.
        - containerName:                # string                                  ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container.
          to:                           # v1.ObjectReference                      To is the target ImageStreamTag to set the container's image onto.
            kind:                       # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
            namespace:                  # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            uid:                        # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
            apiVersion:                 # string                                  API version of the referent.
            resourceVersion:            # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
            fieldPath:                  # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
      post:                             # v1.LifecycleHook                        Post is a lifecycle hook which is executed after the strategy has finished all deployment logic. The LifecycleHookFailurePolicyAbort policy is NOT supported.
        failurePolicy:                  # string                                  FailurePolicy specifies what action to take if the hook fails.
        execNewPod:                     # v1.ExecNewPodHook                       ExecNewPod specifies the options for a lifecycle hook backed by a pod.
          command:                      # []string                                Command is the action command and its arguments.
          - [string]                    # 
          env:                          # []v1.EnvVar                             Env is a set of environment variables to supply to the hook pod's container.
          - name:                       # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
            value:                      # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
            valueFrom:                  # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
              fieldRef:                 # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
                apiVersion:             # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                fieldPath:              # string                                  Path of the field to select in the specified API version.
              resourceFieldRef:         # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                containerName:          # string                                  Container name: required for volumes, optional for env vars
                resource:               # string                                  Required: resource to select
                divisor:                # string                                  Specifies the output format of the exposed resources, defaults to "1"
              configMapKeyRef:          # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
                name:                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
                key:                    # string                                  The key to select.
              secretKeyRef:             # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
                name:                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
                key:                    # string                                  The key of the secret to select from.  Must be a valid secret key.
          containerName:                # string                                  ContainerName is the name of a container in the deployment pod template whose Docker image will be used for the hook pod's container.
          volumes:                      # []string                                Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied.
          - [string]                    # 
        tagImages:                      # []v1.TagImageHook                       TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.
        - containerName:                # string                                  ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container.
          to:                           # v1.ObjectReference                      To is the target ImageStreamTag to set the container's image onto.
            kind:                       # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
            namespace:                  # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            uid:                        # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
            apiVersion:                 # string                                  API version of the referent.
            resourceVersion:            # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
            fieldPath:                  # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    resources:                          # v1.ResourceRequirements                 Resources contains resource requirements to execute the deployment and any hooks
      limits:                           # map[string]string                       Limits describes the maximum amount of compute resources allowed. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
        [string]:                       # string
      requests:                         # map[string]string                       Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
        [string]:                       # string
    labels:                             # map[string]string                       Labels is a set of key, value pairs added to custom deployer and lifecycle pre/post hook pods.
      [string]:                         # string
    annotations:                        # map[string]string                       Annotations is a set of key, value pairs added to custom deployer and lifecycle pre/post hook pods.
      [string]:                         # string
  triggers:                             # []v1.DeploymentTriggerPolicy            Triggers determine how updates to a DeploymentConfig result in new deployments. If no triggers are defined, a new deployment can only occur as a result of an explicit client update to the DeploymentConfig with a new LatestVersion.
  - type:                               # string                                  Type of the trigger
    imageChangeParams:                  # v1.DeploymentTriggerImageChangeParams   ImageChangeParams represents the parameters for the ImageChange trigger.
      automatic:                        # boolean                                 Automatic means that the detection of a new tag value should result in an image update inside the pod template. Deployment configs that haven't been deployed yet will always have their images updated. Deployment configs that have been deployed at least once, will have their images updated only if this is set to true.
      containerNames:                   # []string                                ContainerNames is used to restrict tag updates to the specified set of container names in a pod.
      - [string]                        # 
      from:                             # v1.ObjectReference                      From is a reference to an image stream tag to watch for changes. From.Name is the only required subfield - if From.Namespace is blank, the namespace of the current deployment trigger will be used.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        namespace:                      # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        apiVersion:                     # string                                  API version of the referent.
        resourceVersion:                # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        fieldPath:                      # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
      lastTriggeredImage:               # string                                  LastTriggeredImage is the last image to be triggered.
  replicas:                             # integer                                 Replicas is the number of desired replicas.
  revisionHistoryLimit:                 # integer                                 RevisionHistoryLimit is the number of old ReplicationControllers to retain to allow for rollbacks. This field is a pointer to allow for differentiation between an explicit zero and not specified.
  test:                                 # boolean                                 Test ensures that this deployment config will have zero replicas except while a deployment is running. This allows the deployment config to be used as a continuous deployment test - triggering on images, running the deployment, and then succeeding or failing. Post strategy hooks and After actions can be used to integrate successful deployment with an action.
  paused:                               # boolean                                 Paused indicates that the deployment config is paused resulting in no new deployments on template changes or changes in the template caused by other triggers.
  selector:                             # map[string]string                       Selector is a label query over pods that should match the Replicas count.
    [string]:                           # string
  template:                             # v1.PodTemplateSpec                      Template is the object that describes the pod that will be created if insufficient replicas are detected.
    metadata:                           # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      name:                             # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      generateName:                     # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
      namespace:                        # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      selfLink:                         # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
      uid:                              # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      resourceVersion:                  # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      generation:                       # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
      creationTimestamp:                # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionTimestamp:                # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionGracePeriodSeconds:       # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
      labels:                           # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
        [string]:                       # string
      annotations:                      # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
        [string]:                       # string
      ownerReferences:                  # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
      - apiVersion:                     # string                                  API version of the referent.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        controller:                     # boolean                                 If true, this reference points to the managing controller.
      finalizers:                       # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
      - [string]                        # 
    spec:                               # v1.PodSpec                              Specification of the desired behavior of the pod. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
      volumes:                          # []v1.Volume                             List of volumes that can be mounted by containers belonging to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md
      - name:                           # string                                  Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        hostPath:                       # v1.HostPathVolumeSource                 HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#hostpath
          path:                         # string                                  Path of the directory on the host. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#hostpath
        emptyDir:                       # v1.EmptyDirVolumeSource                 EmptyDir represents a temporary directory that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#emptydir
          medium:                       # string                                  What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#emptydir
        gcePersistentDisk:              # v1.GCEPersistentDiskVolumeSource        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
          pdName:                       # string                                  Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
          fsType:                       # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
          partition:                    # integer                                 The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
          readOnly:                     # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#gcepersistentdisk
        awsElasticBlockStore:           # v1.AWSElasticBlockStoreVolumeSource     AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
          volumeID:                     # string                                  Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
          fsType:                       # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
          partition:                    # integer                                 The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          readOnly:                     # boolean                                 Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#awselasticblockstore
        gitRepo:                        # v1.GitRepoVolumeSource                  GitRepo represents a git repository at a particular revision.
          repository:                   # string                                  Repository URL
          revision:                     # string                                  Commit hash for the specified revision.
          directory:                    # string                                  Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        secret:                         # v1.SecretVolumeSource                   Secret represents a secret that should populate this volume. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#secrets
          secretName:                   # string                                  Name of the secret in the pod's namespace to use. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#secrets
          items:                        # []v1.KeyToPath                          If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
          - key:                        # string                                  The key to project.
            path:                       # string                                  The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        nfs:                            # v1.NFSVolumeSource                      NFS represents an NFS mount on the host that shares a pod's lifetime More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
          server:                       # string                                  Server is the hostname or IP address of the NFS server. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
          path:                         # string                                  Path that is exported by the NFS server. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
          readOnly:                     # boolean                                 ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#nfs
        iscsi:                          # v1.ISCSIVolumeSource                    ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/release-1.3/examples/iscsi/README.md
          targetPortal:                 # string                                  iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
          iqn:                          # string                                  Target iSCSI Qualified Name.
          lun:                          # integer                                 iSCSI target lun number.
          iscsiInterface:               # string                                  Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
          fsType:                       # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#iscsi
          readOnly:                     # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        glusterfs:                      # v1.GlusterfsVolumeSource                Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md
          endpoints:                    # string                                  EndpointsName is the endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
          path:                         # string                                  Path is the Glusterfs volume path. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
          readOnly:                     # boolean                                 ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/release-1.3/examples/glusterfs/README.md#create-a-pod
        persistentVolumeClaim:          # v1.PersistentVolumeClaimVolumeSource    PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#persistentvolumeclaims
          claimName:                    # string                                  ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#persistentvolumeclaims
          readOnly:                     # boolean                                 Will force the ReadOnly setting in VolumeMounts. Default false.
        rbd:                            # v1.RBDVolumeSource                      RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md
          monitors:                     # []string                                A collection of Ceph monitors. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
          - [string]                    # 
          image:                        # string                                  The rados image name. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
          fsType:                       # string                                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/docs/user-guide/volumes.md#rbd
          pool:                         # string                                  The rados pool name. Default is rbd. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it.
          user:                         # string                                  The rados user name. Default is admin. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
          keyring:                      # string                                  Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
          secretRef:                    # v1.LocalObjectReference                 SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          readOnly:                     # boolean                                 ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/release-1.3/examples/rbd/README.md#how-to-use-it
        flexVolume:                     # v1.FlexVolumeSource                     FlexVolume represents a generic volume resource that is provisioned/attached using a exec based plugin. This is an alpha feature and may change in future.
          driver:                       # string                                  Driver is the name of the driver to use for this volume.
          fsType:                       # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
          secretRef:                    # v1.LocalObjectReference                 Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          readOnly:                     # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
          options:                      # map[string]string                       Optional: Extra command options if any.
            [string]:                   # string
        cinder:                         # v1.CinderVolumeSource                   Cinder represents a cinder volume attached and mounted on kubelets host machine More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
          volumeID:                     # string                                  volume id used to identify the volume in cinder More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
          fsType:                       # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
          readOnly:                     # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/release-1.3/examples/mysql-cinder-pd/README.md
        cephfs:                         # v1.CephFSVolumeSource                   CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
          monitors:                     # []string                                Required: Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
          - [string]                    # 
          path:                         # string                                  Optional: Used as the mounted root, rather than the full Ceph tree, default is /
          user:                         # string                                  Optional: User is the rados user name, default is admin More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
          secretFile:                   # string                                  Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
          secretRef:                    # v1.LocalObjectReference                 Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          readOnly:                     # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/release-1.3/examples/cephfs/README.md#how-to-use-it
        flocker:                        # v1.FlockerVolumeSource                  Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
          datasetName:                  # string                                  Required: the volume name. This is going to be store on metadata -> name on the payload for Flocker
        downwardAPI:                    # v1.DownwardAPIVolumeSource              DownwardAPI represents downward API about the pod that should populate this volume
          items:                        # []v1.DownwardAPIVolumeFile              Items is a list of downward API volume file
          - path:                       # string                                  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
            fieldRef:                   # v1.ObjectFieldSelector                  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
              apiVersion:               # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
              fieldPath:                # string                                  Path of the field to select in the specified API version.
            resourceFieldRef:           # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
              containerName:            # string                                  Container name: required for volumes, optional for env vars
              resource:                 # string                                  Required: resource to select
              divisor:                  # string                                  Specifies the output format of the exposed resources, defaults to "1"
        fc:                             # v1.FCVolumeSource                       FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
          targetWWNs:                   # []string                                Required: FC target world wide names (WWNs)
          - [string]                    # 
          lun:                          # integer                                 Required: FC target lun number
          fsType:                       # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          readOnly:                     # boolean                                 Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        azureFile:                      # v1.AzureFileVolumeSource                AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
          secretName:                   # string                                  the name of secret that contains Azure Storage Account Name and Key
          shareName:                    # string                                  Share Name
          readOnly:                     # boolean                                 Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        configMap:                      # v1.ConfigMapVolumeSource                ConfigMap represents a configMap that should populate this volume
          name:                         # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          items:                        # []v1.KeyToPath                          If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
          - key:                        # string                                  The key to project.
            path:                       # string                                  The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        vsphereVolume:                  # v1.VsphereVirtualDiskVolumeSource       VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
          volumePath:                   # string                                  Path that identifies vSphere volume vmdk
          fsType:                       # string                                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        metadata:                       # v1.DeprecatedDownwardAPIVolumeSource    Metadata represents metadata about the pod that should populate this volume Deprecated: Use downwardAPI instead.
          items:                        # []v1.DeprecatedDownwardAPIVolumeFile    Items is a list of downward API volume file
          - name:                       # string                                  Required: Name is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
            fieldRef:                   # v1.ObjectFieldSelector                  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
              apiVersion:               # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
              fieldPath:                # string                                  Path of the field to select in the specified API version.
            resourceFieldRef:           # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
              containerName:            # string                                  Container name: required for volumes, optional for env vars
              resource:                 # string                                  Required: resource to select
              divisor:                  # string                                  Specifies the output format of the exposed resources, defaults to "1"
      containers:                       # []v1.Container                          List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/containers.md
      - name:                           # string                                  Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        image:                          # string                                  Docker image name. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md
        command:                        # []string                                Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/containers.md#containers-and-commands
        - [string]                      # 
        args:                           # []string                                Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/containers.md#containers-and-commands
        - [string]                      # 
        workingDir:                     # string                                  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        ports:                          # []v1.ContainerPort                      List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        - name:                         # string                                  If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
          hostPort:                     # integer                                 Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
          containerPort:                # integer                                 Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
          protocol:                     # string                                  Protocol for port. Must be UDP or TCP. Defaults to "TCP".
          hostIP:                       # string                                  What host IP to bind the external port to.
        env:                            # []v1.EnvVar                             List of environment variables to set in the container. Cannot be updated.
        - name:                         # string                                  Name of the environment variable. Must be a C_IDENTIFIER.
          value:                        # string                                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
          valueFrom:                    # v1.EnvVarSource                         Source for the environment variable's value. Cannot be used if value is not empty.
            fieldRef:                   # v1.ObjectFieldSelector                  Selects a field of the pod; only name and namespace are supported.
              apiVersion:               # string                                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
              fieldPath:                # string                                  Path of the field to select in the specified API version.
            resourceFieldRef:           # v1.ResourceFieldSelector                Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
              containerName:            # string                                  Container name: required for volumes, optional for env vars
              resource:                 # string                                  Required: resource to select
              divisor:                  # string                                  Specifies the output format of the exposed resources, defaults to "1"
            configMapKeyRef:            # v1.ConfigMapKeySelector                 Selects a key of a ConfigMap.
              name:                     # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
              key:                      # string                                  The key to select.
            secretKeyRef:               # v1.SecretKeySelector                    Selects a key of a secret in the pod's namespace
              name:                     # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
              key:                      # string                                  The key of the secret to select from.  Must be a valid secret key.
        resources:                      # v1.ResourceRequirements                 Compute Resources required by this container. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/persistent-volumes.md#resources
          limits:                       # map[string]string                       Limits describes the maximum amount of compute resources allowed. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
            [string]:                   # string
          requests:                     # map[string]string                       Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://releases.k8s.io/release-1.3/docs/design/resources.md#resource-specifications
            [string]:                   # string
        volumeMounts:                   # []v1.VolumeMount                        Pod volumes to mount into the container's filesystem. Cannot be updated.
        - name:                         # string                                  This must match the Name of a Volume.
          readOnly:                     # boolean                                 Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
          mountPath:                    # string                                  Path within the container at which the volume should be mounted.  Must not contain ':'.
          subPath:                      # string                                  Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        livenessProbe:                  # v1.Probe                                Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
          exec:                         # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
            command:                    # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            - [string]                  # 
          httpGet:                      # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
            path:                       # string                                  Path to access on the HTTP server.
            port:                       # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            host:                       # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            scheme:                     # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
            httpHeaders:                # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
            - name:                     # string                                  The header field name
              value:                    # string                                  The header field value
          tcpSocket:                    # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
            port:                       # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          initialDelaySeconds:          # integer                                 Number of seconds after the container has started before liveness probes are initiated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
          timeoutSeconds:               # integer                                 Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
          periodSeconds:                # integer                                 How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
          successThreshold:             # integer                                 Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
          failureThreshold:             # integer                                 Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        readinessProbe:                 # v1.Probe                                Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
          exec:                         # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
            command:                    # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            - [string]                  # 
          httpGet:                      # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
            path:                       # string                                  Path to access on the HTTP server.
            port:                       # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            host:                       # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            scheme:                     # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
            httpHeaders:                # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
            - name:                     # string                                  The header field name
              value:                    # string                                  The header field value
          tcpSocket:                    # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
            port:                       # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          initialDelaySeconds:          # integer                                 Number of seconds after the container has started before liveness probes are initiated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
          timeoutSeconds:               # integer                                 Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#container-probes
          periodSeconds:                # integer                                 How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
          successThreshold:             # integer                                 Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
          failureThreshold:             # integer                                 Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        lifecycle:                      # v1.Lifecycle                            Actions that the management system should take in response to container lifecycle events. Cannot be updated.
          postStart:                    # v1.Handler                              PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: http://releases.k8s.io/release-1.3/docs/user-guide/container-environment.md#hook-details
            exec:                       # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
              command:                  # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
              - [string]                # 
            httpGet:                    # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
              path:                     # string                                  Path to access on the HTTP server.
              port:                     # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              host:                     # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
              scheme:                   # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
              httpHeaders:              # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
              - name:                   # string                                  The header field name
                value:                  # string                                  The header field value
            tcpSocket:                  # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
              port:                     # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          preStop:                      # v1.Handler                              PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: http://releases.k8s.io/release-1.3/docs/user-guide/container-environment.md#hook-details
            exec:                       # v1.ExecAction                           One and only one of the following should be specified. Exec specifies the action to take.
              command:                  # []string                                Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
              - [string]                # 
            httpGet:                    # v1.HTTPGetAction                        HTTPGet specifies the http request to perform.
              path:                     # string                                  Path to access on the HTTP server.
              port:                     # string                                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              host:                     # string                                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
              scheme:                   # string                                  Scheme to use for connecting to the host. Defaults to HTTP.
              httpHeaders:              # []v1.HTTPHeader                         Custom headers to set in the request. HTTP allows repeated headers.
              - name:                   # string                                  The header field name
                value:                  # string                                  The header field value
            tcpSocket:                  # v1.TCPSocketAction                      TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
              port:                     # string                                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        terminationMessagePath:         # string                                  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
        imagePullPolicy:                # string                                  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md#updating-images
        securityContext:                # v1.SecurityContext                      Security options the pod should run with. More info: http://releases.k8s.io/release-1.3/docs/design/security_context.md
          capabilities:                 # v1.Capabilities                         The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
            add:                        # []v1.Capability                         Added capabilities
            drop:                       # []v1.Capability                         Removed capabilities
          privileged:                   # boolean                                 Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
          seLinuxOptions:               # v1.SELinuxOptions                       The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
            user:                       # string                                  User is a SELinux user label that applies to the container.
            role:                       # string                                  Role is a SELinux role label that applies to the container.
            type:                       # string                                  Type is a SELinux type label that applies to the container.
            level:                      # string                                  Level is SELinux level label that applies to the container.
          runAsUser:                    # integer                                 The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          runAsNonRoot:                 # boolean                                 Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          readOnlyRootFilesystem:       # boolean                                 Whether this container has a read-only root filesystem. Default is false.
        stdin:                          # boolean                                 Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        stdinOnce:                      # boolean                                 Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        tty:                            # boolean                                 Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
      restartPolicy:                    # string                                  Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: http://releases.k8s.io/release-1.3/docs/user-guide/pod-states.md#restartpolicy
      terminationGracePeriodSeconds:    # integer                                 Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
      activeDeadlineSeconds:            # integer                                 Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
      dnsPolicy:                        # string                                  Set DNS policy for containers within the pod. One of 'ClusterFirst' or 'Default'. Defaults to "ClusterFirst".
      nodeSelector:                     # map[string]string                       NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://releases.k8s.io/release-1.3/docs/user-guide/node-selection/README.md
        [string]:                       # string
      host:                             # string                                  A request to schedule this pod onto a specific node Deprecated: Use nodeName instead.
      serviceAccountName:               # string                                  ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/release-1.3/docs/design/service_accounts.md
      serviceAccount:                   # string                                  DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
      nodeName:                         # string                                  NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
      hostNetwork:                      # boolean                                 Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
      hostPID:                          # boolean                                 Use the host's pid namespace. Optional: Default to false.
      hostIPC:                          # boolean                                 Use the host's ipc namespace. Optional: Default to false.
      securityContext:                  # v1.PodSecurityContext                   SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
        seLinuxOptions:                 # v1.SELinuxOptions                       The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
          user:                         # string                                  User is a SELinux user label that applies to the container.
          role:                         # string                                  Role is a SELinux role label that applies to the container.
          type:                         # string                                  Type is a SELinux type label that applies to the container.
          level:                        # string                                  Level is SELinux level label that applies to the container.
        runAsUser:                      # integer                                 The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        runAsNonRoot:                   # boolean                                 Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        supplementalGroups:             # []integer                               A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
        - [integer]                     # 
        fsGroup:                        # integer                                 A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw 
      imagePullSecrets:                 # []v1.LocalObjectReference               ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: http://releases.k8s.io/release-1.3/docs/user-guide/images.md#specifying-imagepullsecrets-on-a-pod
      - name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      hostname:                         # string                                  Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
      subdomain:                        # string                                  If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
status:                                 # v1.DeploymentConfigStatus               Status represents the current deployment state.
  latestVersion:                        # integer                                 LatestVersion is used to determine whether the current deployment associated with a deployment config is out of sync.
  observedGeneration:                   # integer                                 ObservedGeneration is the most recent generation observed by the deployment config controller.
  replicas:                             # integer                                 Replicas is the total number of pods targeted by this deployment config.
  updatedReplicas:                      # integer                                 UpdatedReplicas is the total number of non-terminated pods targeted by this deployment config that have the desired template spec.
  availableReplicas:                    # integer                                 AvailableReplicas is the total number of available pods targeted by this deployment config.
  unavailableReplicas:                  # integer                                 UnavailableReplicas is the total number of unavailable pods targeted by this deployment config.
  details:                              # v1.DeploymentDetails                    Details are the reasons for the update to this deployment config. This could be based on a change made by the user or caused by an automatic trigger
    message:                            # string                                  Message is the user specified change message, if this deployment was triggered manually by the user
    causes:                             # []v1.DeploymentCause                    Causes are extended data associated with all the causes for creating a new deployment
    - type:                             # string                                  Type of the trigger that resulted in the creation of a new deployment
      imageTrigger:                     # v1.DeploymentCauseImageTrigger          ImageTrigger contains the image trigger details, if this trigger was fired based on an image change
        from:                           # v1.ObjectReference                      From is a reference to the changed object which triggered a deployment. The field may have the kinds DockerImage, ImageStreamTag, or ImageStreamImage.
          kind:                         # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
          namespace:                    # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
          name:                         # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          uid:                          # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
          apiVersion:                   # string                                  API version of the referent.
          resourceVersion:              # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
          fieldPath:                    # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.


DeploymentConfigRollback
========================

DeploymentConfigRollback provides the input to rollback generation.

kind: DeploymentConfigRollback          # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
name:                                   # string                                  Name of the deployment config that will be rolled back.
updatedAnnotations:                     # map[string]string                       UpdatedAnnotations is a set of new annotations that will be added in the deployment config.
  [string]:                             # string
spec:                                   # v1.DeploymentConfigRollbackSpec         Spec defines the options to rollback generation.
  from:                                 # v1.ObjectReference                      From points to a ReplicationController which is a deployment.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    namespace:                          # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    apiVersion:                         # string                                  API version of the referent.
    resourceVersion:                    # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
    fieldPath:                          # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  revision:                             # integer                                 Revision to rollback to. If set to 0, rollback to the last revision.
  includeTriggers:                      # boolean                                 IncludeTriggers specifies whether to include config Triggers.
  includeTemplate:                      # boolean                                 IncludeTemplate specifies whether to include the PodTemplateSpec.
  includeReplicationMeta:               # boolean                                 IncludeReplicationMeta specifies whether to include the replica count and selector.
  includeStrategy:                      # boolean                                 IncludeStrategy specifies whether to include the deployment Strategy.


DeploymentLog
=============

DeploymentLog represents the logs for a deployment

kind: DeploymentLog                     # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources


Group
=====

Group represents a referenceable set of Users

kind: Group                             # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
users:                                  # []string                                Users is the list of users in this group.
- [string]                              # 


HostSubnet
==========

HostSubnet encapsulates the inputs needed to define the container subnet network on a node

kind: HostSubnet                        # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
host:                                   # string                                  Host is the name of the host that is registered at the master. May just be an IP address, resolvable hostname or a complete DNS. A lease will be sought after this name.
hostIP:                                 # string                                  HostIP is the IP address to be used as vtep by other hosts in the overlay network
subnet:                                 # string                                  Subnet is the actual subnet CIDR lease assigned to the host


Identity
========

Identity records a successful authentication of a user with an identity provider

kind: Identity                          # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
providerName:                           # string                                  ProviderName is the source of identity information
providerUserName:                       # string                                  ProviderUserName uniquely represents this identity in the scope of the provider
user:                                   # v1.ObjectReference                      User is a reference to the user this identity is associated with Both Name and UID must be set
  kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
extra:                                  # map[string]string                       Extra holds extra information about this identity
  [string]:                             # string


Image
=====

Image is an immutable representation of a Docker image and metadata at a point in time.

kind: Image                             # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
dockerImageReference:                   # string                                  DockerImageReference is the string that can be used to pull this image.
dockerImageMetadata:                    # string                                  DockerImageMetadata contains metadata about this image
dockerImageMetadataVersion:             # string                                  DockerImageMetadataVersion conveys the version of the object, which if empty defaults to "1.0"
dockerImageManifest:                    # string                                  DockerImageManifest is the raw JSON of the manifest
dockerImageLayers:                      # []v1.ImageLayer                         DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.
- name:                                 # string                                  Name of the layer as defined by the underlying store.
  size:                                 # integer                                 Size of the layer in bytes as defined by the underlying store.
  mediaType:                            # string                                  MediaType of the referenced object.
signatures:                             # []v1.ImageSignature                     Signatures holds all signatures of the image.
- type:                                 # string                                  Required: Describes a type of stored blob.
  content:                              # []integer                               Required: An opaque binary string which is an image's signature.
  - [integer]                           # 
  conditions:                           # []v1.SignatureCondition                 Conditions represent the latest available observations of a signature's current state.
  - type:                               # string                                  Type of job condition, Complete or Failed.
    status:                             # string                                  Status of the condition, one of True, False, Unknown.
    lastProbeTime:                      # string                                  Last time the condition was checked.
    lastTransitionTime:                 # string                                  Last time the condition transit from one status to another.
    reason:                             # string                                  (brief) reason for the condition's last transition.
    message:                            # string                                  Human readable message indicating details about last transition.
  imageIdentity:                        # string                                  A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. "registry.access.redhat.com/rhel7/rhel:7.2").
  signedClaims:                         # map[string]string                       Contains claims from the signature.
    [string]:                           # string
  created:                              # string                                  If specified, it is the time of signature's creation.
  issuedBy:                             # v1.SignatureIssuer                      If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).
    organization:                       # string                                  Organization name.
    commonName:                         # string                                  Common name (e.g. openshift-signing-service).
  issuedTo:                             # v1.SignatureSubject                     If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).
    organization:                       # string                                  Organization name.
    commonName:                         # string                                  Common name (e.g. openshift-signing-service).
    publicKeyID:                        # string                                  If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).
dockerImageSignatures:                  # []v1.Image.dockerImageSignatures        DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.
dockerImageManifestMediaType:           # string                                  DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.
dockerImageConfig:                      # string                                  DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2.


ImageStream
===========

ImageStream stores a mapping of tags to images, metadata overrides that are applied when images are tagged in a stream, and an optional reference to a Docker image repository on a registry.

kind: ImageStream                       # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.ImageStreamSpec                      Spec describes the desired state of this stream
  dockerImageRepository:                # string                                  DockerImageRepository is optional, if specified this stream is backed by a Docker repository on this server
  tags:                                 # []v1.TagReference                       Tags map arbitrary string values to specific image locators
  - name:                               # string                                  Name of the tag
    annotations:                        # map[string]string                       Annotations associated with images using this tag
      [string]:                         # string
    from:                               # v1.ObjectReference                      From is a reference to an image stream tag or image stream this tag should track
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      namespace:                        # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      apiVersion:                       # string                                  API version of the referent.
      resourceVersion:                  # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      fieldPath:                        # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    reference:                          # boolean                                 Reference states if the tag will be imported. Default value is false, which means the tag will be imported.
    generation:                         # integer                                 Generation is the image stream generation that updated this tag - setting it to 0 is an indication that the generation must be updated. Legacy clients will send this as nil, which means the client doesn't know or care.
    importPolicy:                       # v1.TagImportPolicy                      Import is information that controls how images may be imported by the server.
      insecure:                         # boolean                                 Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.
      scheduled:                        # boolean                                 Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported
status:                                 # v1.ImageStreamStatus                    Status describes the current state of this stream
  dockerImageRepository:                # string                                  DockerImageRepository represents the effective location this stream may be accessed at. May be empty until the server determines where the repository is located
  tags:                                 # []v1.NamedTagEventList                  Tags are a historical record of images associated with each tag. The first entry in the TagEvent array is the currently tagged image.
  - tag:                                # string                                  Tag is the tag for which the history is recorded
    items:                              # []v1.TagEvent                           Standard object's metadata.
    - created:                          # string                                  Created holds the time the TagEvent was created
      dockerImageReference:             # string                                  DockerImageReference is the string that can be used to pull this image
      image:                            # string                                  Image is the image
      generation:                       # integer                                 Generation is the spec tag generation that resulted in this tag being updated
    conditions:                         # []v1.TagEventCondition                  Conditions is an array of conditions that apply to the tag event list.
    - type:                             # string                                  Type of tag event condition, currently only ImportSuccess
      status:                           # string                                  Status of the condition, one of True, False, Unknown.
      lastTransitionTime:               # string                                  LastTransitionTIme is the time the condition transitioned from one status to another.
      reason:                           # string                                  Reason is a brief machine readable explanation for the condition's last transition.
      message:                          # string                                  Message is a human readable description of the details about last transition, complementing reason.
      generation:                       # integer                                 Generation is the spec tag generation that this status corresponds to


ImageStreamImage
================

ImageStreamImage represents an Image that is retrieved by image name from an ImageStream.

kind: ImageStreamImage                  # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
image:                                  # v1.Image                                Image associated with the ImageStream and image name.
  kind:                                 # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  apiVersion:                           # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
  metadata:                             # v1.ObjectMeta                           Standard object's metadata.
    name:                               # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    generateName:                       # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
    namespace:                          # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
    selfLink:                           # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
    uid:                                # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    resourceVersion:                    # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
    generation:                         # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
    creationTimestamp:                  # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
    deletionTimestamp:                  # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
    deletionGracePeriodSeconds:         # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
    labels:                             # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
      [string]:                         # string
    annotations:                        # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
      [string]:                         # string
    ownerReferences:                    # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
    - apiVersion:                       # string                                  API version of the referent.
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      controller:                       # boolean                                 If true, this reference points to the managing controller.
    finalizers:                         # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
    - [string]                          # 
  dockerImageReference:                 # string                                  DockerImageReference is the string that can be used to pull this image.
  dockerImageMetadata:                  # string                                  DockerImageMetadata contains metadata about this image
  dockerImageMetadataVersion:           # string                                  DockerImageMetadataVersion conveys the version of the object, which if empty defaults to "1.0"
  dockerImageManifest:                  # string                                  DockerImageManifest is the raw JSON of the manifest
  dockerImageLayers:                    # []v1.ImageLayer                         DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.
  - name:                               # string                                  Name of the layer as defined by the underlying store.
    size:                               # integer                                 Size of the layer in bytes as defined by the underlying store.
    mediaType:                          # string                                  MediaType of the referenced object.
  signatures:                           # []v1.ImageSignature                     Signatures holds all signatures of the image.
  - type:                               # string                                  Required: Describes a type of stored blob.
    content:                            # []integer                               Required: An opaque binary string which is an image's signature.
    - [integer]                         # 
    conditions:                         # []v1.SignatureCondition                 Conditions represent the latest available observations of a signature's current state.
    - type:                             # string                                  Type of job condition, Complete or Failed.
      status:                           # string                                  Status of the condition, one of True, False, Unknown.
      lastProbeTime:                    # string                                  Last time the condition was checked.
      lastTransitionTime:               # string                                  Last time the condition transit from one status to another.
      reason:                           # string                                  (brief) reason for the condition's last transition.
      message:                          # string                                  Human readable message indicating details about last transition.
    imageIdentity:                      # string                                  A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. "registry.access.redhat.com/rhel7/rhel:7.2").
    signedClaims:                       # map[string]string                       Contains claims from the signature.
      [string]:                         # string
    created:                            # string                                  If specified, it is the time of signature's creation.
    issuedBy:                           # v1.SignatureIssuer                      If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).
      organization:                     # string                                  Organization name.
      commonName:                       # string                                  Common name (e.g. openshift-signing-service).
    issuedTo:                           # v1.SignatureSubject                     If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).
      organization:                     # string                                  Organization name.
      commonName:                       # string                                  Common name (e.g. openshift-signing-service).
      publicKeyID:                      # string                                  If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).
  dockerImageSignatures:                # []v1.Image.dockerImageSignatures        DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.
  dockerImageManifestMediaType:         # string                                  DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.
  dockerImageConfig:                    # string                                  DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2.


ImageStreamImport
=================

ImageStreamImport imports an image from remote repositories into OpenShift.

kind: ImageStreamImport                 # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.ImageStreamImportSpec                Spec is a description of the images that the user wishes to import
  import:                               # boolean                                 Import indicates whether to perform an import - if so, the specified tags are set on the spec and status of the image stream defined by the type meta.
  repository:                           # v1.RepositoryImportSpec                 Repository is an optional import of an entire Docker image repository. A maximum limit on the number of tags imported this way is imposed by the server.
    from:                               # v1.ObjectReference                      From is the source for the image repository to import; only kind DockerImage and a name of a Docker image repository is allowed
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      namespace:                        # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      apiVersion:                       # string                                  API version of the referent.
      resourceVersion:                  # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      fieldPath:                        # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    importPolicy:                       # v1.TagImportPolicy                      ImportPolicy is the policy controlling how the image is imported
      insecure:                         # boolean                                 Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.
      scheduled:                        # boolean                                 Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported
    includeManifest:                    # boolean                                 IncludeManifest determines if the manifest for each image is returned in the response
  images:                               # []v1.ImageImportSpec                    Images are a list of individual images to import.
  - from:                               # v1.ObjectReference                      From is the source of an image to import; only kind DockerImage is allowed
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      namespace:                        # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      apiVersion:                       # string                                  API version of the referent.
      resourceVersion:                  # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      fieldPath:                        # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    to:                                 # v1.LocalObjectReference                 To is a tag in the current image stream to assign the imported image to, if name is not specified the default tag from from.name will be used
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    importPolicy:                       # v1.TagImportPolicy                      ImportPolicy is the policy controlling how the image is imported
      insecure:                         # boolean                                 Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.
      scheduled:                        # boolean                                 Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported
    includeManifest:                    # boolean                                 IncludeManifest determines if the manifest for each image is returned in the response
status:                                 # v1.ImageStreamImportStatus              Status is the the result of importing the image
  import:                               # v1.ImageStream                          Import is the image stream that was successfully updated or created when 'to' was set.
    kind:                               # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    apiVersion:                         # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
    metadata:                           # v1.ObjectMeta                           Standard object's metadata.
      name:                             # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      generateName:                     # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
      namespace:                        # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      selfLink:                         # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
      uid:                              # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      resourceVersion:                  # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      generation:                       # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
      creationTimestamp:                # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionTimestamp:                # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionGracePeriodSeconds:       # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
      labels:                           # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
        [string]:                       # string
      annotations:                      # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
        [string]:                       # string
      ownerReferences:                  # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
      - apiVersion:                     # string                                  API version of the referent.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        controller:                     # boolean                                 If true, this reference points to the managing controller.
      finalizers:                       # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
      - [string]                        # 
    spec:                               # v1.ImageStreamSpec                      Spec describes the desired state of this stream
      dockerImageRepository:            # string                                  DockerImageRepository is optional, if specified this stream is backed by a Docker repository on this server
      tags:                             # []v1.TagReference                       Tags map arbitrary string values to specific image locators
      - name:                           # string                                  Name of the tag
        annotations:                    # map[string]string                       Annotations associated with images using this tag
          [string]:                     # string
        from:                           # v1.ObjectReference                      From is a reference to an image stream tag or image stream this tag should track
          kind:                         # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
          namespace:                    # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
          name:                         # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          uid:                          # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
          apiVersion:                   # string                                  API version of the referent.
          resourceVersion:              # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
          fieldPath:                    # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
        reference:                      # boolean                                 Reference states if the tag will be imported. Default value is false, which means the tag will be imported.
        generation:                     # integer                                 Generation is the image stream generation that updated this tag - setting it to 0 is an indication that the generation must be updated. Legacy clients will send this as nil, which means the client doesn't know or care.
        importPolicy:                   # v1.TagImportPolicy                      Import is information that controls how images may be imported by the server.
          insecure:                     # boolean                                 Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.
          scheduled:                    # boolean                                 Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported
    status:                             # v1.ImageStreamStatus                    Status describes the current state of this stream
      dockerImageRepository:            # string                                  DockerImageRepository represents the effective location this stream may be accessed at. May be empty until the server determines where the repository is located
      tags:                             # []v1.NamedTagEventList                  Tags are a historical record of images associated with each tag. The first entry in the TagEvent array is the currently tagged image.
      - tag:                            # string                                  Tag is the tag for which the history is recorded
        items:                          # []v1.TagEvent                           Standard object's metadata.
        - created:                      # string                                  Created holds the time the TagEvent was created
          dockerImageReference:         # string                                  DockerImageReference is the string that can be used to pull this image
          image:                        # string                                  Image is the image
          generation:                   # integer                                 Generation is the spec tag generation that resulted in this tag being updated
        conditions:                     # []v1.TagEventCondition                  Conditions is an array of conditions that apply to the tag event list.
        - type:                         # string                                  Type of tag event condition, currently only ImportSuccess
          status:                       # string                                  Status of the condition, one of True, False, Unknown.
          lastTransitionTime:           # string                                  LastTransitionTIme is the time the condition transitioned from one status to another.
          reason:                       # string                                  Reason is a brief machine readable explanation for the condition's last transition.
          message:                      # string                                  Message is a human readable description of the details about last transition, complementing reason.
          generation:                   # integer                                 Generation is the spec tag generation that this status corresponds to
  repository:                           # v1.RepositoryImportStatus               Repository is set if spec.repository was set to the outcome of the import
    status:                             # unversioned.Status                      Status reflects whether any failure occurred during import
      kind:                             # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      apiVersion:                       # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
      metadata:                         # unversioned.ListMeta                    Standard list metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        selfLink:                       # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
        resourceVersion:                # string                                  String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      status:                           # string                                  Status of the operation. One of: "Success" or "Failure". More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
      message:                          # string                                  A human-readable description of the status of this operation.
      reason:                           # string                                  A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
      details:                          # unversioned.StatusDetails               Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
        name:                           # string                                  The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
        group:                          # string                                  The group attribute of the resource associated with the status StatusReason.
        kind:                           # string                                  The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        causes:                         # []unversioned.StatusCause               The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
        - reason:                       # string                                  A machine-readable description of the cause of the error. If this value is empty there is no information available.
          message:                      # string                                  A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
          field:                        # string                                  The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional. Examples:   "name" - the field "name" on the current resource   "items[0].name" - the field "name" on the first array entry in "items"
        retryAfterSeconds:              # integer                                 If specified, the time in seconds before the operation should be retried.
      code:                             # integer                                 Suggested HTTP return code for this status, 0 if not set.
    images:                             # []v1.ImageImportStatus                  Images is a list of images successfully retrieved by the import of the repository.
    - status:                           # unversioned.Status                      Status is the status of the image import, including errors encountered while retrieving the image
        kind:                           # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        apiVersion:                     # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
        metadata:                       # unversioned.ListMeta                    Standard list metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
          selfLink:                     # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
          resourceVersion:              # string                                  String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        status:                         # string                                  Status of the operation. One of: "Success" or "Failure". More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
        message:                        # string                                  A human-readable description of the status of this operation.
        reason:                         # string                                  A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
        details:                        # unversioned.StatusDetails               Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
          name:                         # string                                  The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
          group:                        # string                                  The group attribute of the resource associated with the status StatusReason.
          kind:                         # string                                  The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
          causes:                       # []unversioned.StatusCause               The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
          - reason:                     # string                                  A machine-readable description of the cause of the error. If this value is empty there is no information available.
            message:                    # string                                  A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
            field:                      # string                                  The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional. Examples:   "name" - the field "name" on the current resource   "items[0].name" - the field "name" on the first array entry in "items"
          retryAfterSeconds:            # integer                                 If specified, the time in seconds before the operation should be retried.
        code:                           # integer                                 Suggested HTTP return code for this status, 0 if not set.
      image:                            # v1.Image                                Image is the metadata of that image, if the image was located
        kind:                           # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        apiVersion:                     # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
        metadata:                       # v1.ObjectMeta                           Standard object's metadata.
          name:                         # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          generateName:                 # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
          namespace:                    # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
          selfLink:                     # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
          uid:                          # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
          resourceVersion:              # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
          generation:                   # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
          creationTimestamp:            # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
          deletionTimestamp:            # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
          deletionGracePeriodSeconds:   # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
          labels:                       # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
            [string]:                   # string
          annotations:                  # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
            [string]:                   # string
          ownerReferences:              # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
          - apiVersion:                 # string                                  API version of the referent.
            kind:                       # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
            name:                       # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
            uid:                        # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
            controller:                 # boolean                                 If true, this reference points to the managing controller.
          finalizers:                   # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
          - [string]                    # 
        dockerImageReference:           # string                                  DockerImageReference is the string that can be used to pull this image.
        dockerImageMetadata:            # string                                  DockerImageMetadata contains metadata about this image
        dockerImageMetadataVersion:     # string                                  DockerImageMetadataVersion conveys the version of the object, which if empty defaults to "1.0"
        dockerImageManifest:            # string                                  DockerImageManifest is the raw JSON of the manifest
        dockerImageLayers:              # []v1.ImageLayer                         DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.
        - name:                         # string                                  Name of the layer as defined by the underlying store.
          size:                         # integer                                 Size of the layer in bytes as defined by the underlying store.
          mediaType:                    # string                                  MediaType of the referenced object.
        signatures:                     # []v1.ImageSignature                     Signatures holds all signatures of the image.
        - type:                         # string                                  Required: Describes a type of stored blob.
          content:                      # []integer                               Required: An opaque binary string which is an image's signature.
          - [integer]                   # 
          conditions:                   # []v1.SignatureCondition                 Conditions represent the latest available observations of a signature's current state.
          - type:                       # string                                  Type of job condition, Complete or Failed.
            status:                     # string                                  Status of the condition, one of True, False, Unknown.
            lastProbeTime:              # string                                  Last time the condition was checked.
            lastTransitionTime:         # string                                  Last time the condition transit from one status to another.
            reason:                     # string                                  (brief) reason for the condition's last transition.
            message:                    # string                                  Human readable message indicating details about last transition.
          imageIdentity:                # string                                  A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. "registry.access.redhat.com/rhel7/rhel:7.2").
          signedClaims:                 # map[string]string                       Contains claims from the signature.
            [string]:                   # string
          created:                      # string                                  If specified, it is the time of signature's creation.
          issuedBy:                     # v1.SignatureIssuer                      If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).
            organization:               # string                                  Organization name.
            commonName:                 # string                                  Common name (e.g. openshift-signing-service).
          issuedTo:                     # v1.SignatureSubject                     If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).
            organization:               # string                                  Organization name.
            commonName:                 # string                                  Common name (e.g. openshift-signing-service).
            publicKeyID:                # string                                  If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).
        dockerImageSignatures:          # []v1.Image.dockerImageSignatures        DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.
        dockerImageManifestMediaType:   # string                                  DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.
        dockerImageConfig:              # string                                  DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2.
      tag:                              # string                                  Tag is the tag this image was located under, if any
    additionalTags:                     # []string                                AdditionalTags are tags that exist in the repository but were not imported because a maximum limit of automatic imports was applied.
    - [string]                          # 
  images:                               # []v1.ImageImportStatus                  Images is set with the result of importing spec.images
  - status:                             # unversioned.Status                      Status is the status of the image import, including errors encountered while retrieving the image
      kind:                             # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      apiVersion:                       # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
      metadata:                         # unversioned.ListMeta                    Standard list metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        selfLink:                       # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
        resourceVersion:                # string                                  String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      status:                           # string                                  Status of the operation. One of: "Success" or "Failure". More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status
      message:                          # string                                  A human-readable description of the status of this operation.
      reason:                           # string                                  A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
      details:                          # unversioned.StatusDetails               Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
        name:                           # string                                  The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
        group:                          # string                                  The group attribute of the resource associated with the status StatusReason.
        kind:                           # string                                  The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        causes:                         # []unversioned.StatusCause               The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
        - reason:                       # string                                  A machine-readable description of the cause of the error. If this value is empty there is no information available.
          message:                      # string                                  A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
          field:                        # string                                  The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional. Examples:   "name" - the field "name" on the current resource   "items[0].name" - the field "name" on the first array entry in "items"
        retryAfterSeconds:              # integer                                 If specified, the time in seconds before the operation should be retried.
      code:                             # integer                                 Suggested HTTP return code for this status, 0 if not set.
    image:                              # v1.Image                                Image is the metadata of that image, if the image was located
      kind:                             # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      apiVersion:                       # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
      metadata:                         # v1.ObjectMeta                           Standard object's metadata.
        name:                           # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        generateName:                   # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
        namespace:                      # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
        selfLink:                       # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
        uid:                            # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        resourceVersion:                # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
        generation:                     # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
        creationTimestamp:              # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
        deletionTimestamp:              # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
        deletionGracePeriodSeconds:     # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
        labels:                         # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
          [string]:                     # string
        annotations:                    # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
          [string]:                     # string
        ownerReferences:                # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
        - apiVersion:                   # string                                  API version of the referent.
          kind:                         # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
          name:                         # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
          uid:                          # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
          controller:                   # boolean                                 If true, this reference points to the managing controller.
        finalizers:                     # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
        - [string]                      # 
      dockerImageReference:             # string                                  DockerImageReference is the string that can be used to pull this image.
      dockerImageMetadata:              # string                                  DockerImageMetadata contains metadata about this image
      dockerImageMetadataVersion:       # string                                  DockerImageMetadataVersion conveys the version of the object, which if empty defaults to "1.0"
      dockerImageManifest:              # string                                  DockerImageManifest is the raw JSON of the manifest
      dockerImageLayers:                # []v1.ImageLayer                         DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.
      - name:                           # string                                  Name of the layer as defined by the underlying store.
        size:                           # integer                                 Size of the layer in bytes as defined by the underlying store.
        mediaType:                      # string                                  MediaType of the referenced object.
      signatures:                       # []v1.ImageSignature                     Signatures holds all signatures of the image.
      - type:                           # string                                  Required: Describes a type of stored blob.
        content:                        # []integer                               Required: An opaque binary string which is an image's signature.
        - [integer]                     # 
        conditions:                     # []v1.SignatureCondition                 Conditions represent the latest available observations of a signature's current state.
        - type:                         # string                                  Type of job condition, Complete or Failed.
          status:                       # string                                  Status of the condition, one of True, False, Unknown.
          lastProbeTime:                # string                                  Last time the condition was checked.
          lastTransitionTime:           # string                                  Last time the condition transit from one status to another.
          reason:                       # string                                  (brief) reason for the condition's last transition.
          message:                      # string                                  Human readable message indicating details about last transition.
        imageIdentity:                  # string                                  A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. "registry.access.redhat.com/rhel7/rhel:7.2").
        signedClaims:                   # map[string]string                       Contains claims from the signature.
          [string]:                     # string
        created:                        # string                                  If specified, it is the time of signature's creation.
        issuedBy:                       # v1.SignatureIssuer                      If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).
          organization:                 # string                                  Organization name.
          commonName:                   # string                                  Common name (e.g. openshift-signing-service).
        issuedTo:                       # v1.SignatureSubject                     If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).
          organization:                 # string                                  Organization name.
          commonName:                   # string                                  Common name (e.g. openshift-signing-service).
          publicKeyID:                  # string                                  If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).
      dockerImageSignatures:            # []v1.Image.dockerImageSignatures        DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.
      dockerImageManifestMediaType:     # string                                  DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.
      dockerImageConfig:                # string                                  DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2.
    tag:                                # string                                  Tag is the tag this image was located under, if any


ImageStreamMapping
==================

ImageStreamMapping represents a mapping from a single tag to a Docker image as well as the reference to the Docker image stream the image came from.

kind: ImageStreamMapping                # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
image:                                  # v1.Image                                Image is a Docker image.
  kind:                                 # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  apiVersion:                           # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
  metadata:                             # v1.ObjectMeta                           Standard object's metadata.
    name:                               # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    generateName:                       # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
    namespace:                          # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
    selfLink:                           # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
    uid:                                # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    resourceVersion:                    # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
    generation:                         # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
    creationTimestamp:                  # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
    deletionTimestamp:                  # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
    deletionGracePeriodSeconds:         # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
    labels:                             # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
      [string]:                         # string
    annotations:                        # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
      [string]:                         # string
    ownerReferences:                    # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
    - apiVersion:                       # string                                  API version of the referent.
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      controller:                       # boolean                                 If true, this reference points to the managing controller.
    finalizers:                         # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
    - [string]                          # 
  dockerImageReference:                 # string                                  DockerImageReference is the string that can be used to pull this image.
  dockerImageMetadata:                  # string                                  DockerImageMetadata contains metadata about this image
  dockerImageMetadataVersion:           # string                                  DockerImageMetadataVersion conveys the version of the object, which if empty defaults to "1.0"
  dockerImageManifest:                  # string                                  DockerImageManifest is the raw JSON of the manifest
  dockerImageLayers:                    # []v1.ImageLayer                         DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.
  - name:                               # string                                  Name of the layer as defined by the underlying store.
    size:                               # integer                                 Size of the layer in bytes as defined by the underlying store.
    mediaType:                          # string                                  MediaType of the referenced object.
  signatures:                           # []v1.ImageSignature                     Signatures holds all signatures of the image.
  - type:                               # string                                  Required: Describes a type of stored blob.
    content:                            # []integer                               Required: An opaque binary string which is an image's signature.
    - [integer]                         # 
    conditions:                         # []v1.SignatureCondition                 Conditions represent the latest available observations of a signature's current state.
    - type:                             # string                                  Type of job condition, Complete or Failed.
      status:                           # string                                  Status of the condition, one of True, False, Unknown.
      lastProbeTime:                    # string                                  Last time the condition was checked.
      lastTransitionTime:               # string                                  Last time the condition transit from one status to another.
      reason:                           # string                                  (brief) reason for the condition's last transition.
      message:                          # string                                  Human readable message indicating details about last transition.
    imageIdentity:                      # string                                  A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. "registry.access.redhat.com/rhel7/rhel:7.2").
    signedClaims:                       # map[string]string                       Contains claims from the signature.
      [string]:                         # string
    created:                            # string                                  If specified, it is the time of signature's creation.
    issuedBy:                           # v1.SignatureIssuer                      If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).
      organization:                     # string                                  Organization name.
      commonName:                       # string                                  Common name (e.g. openshift-signing-service).
    issuedTo:                           # v1.SignatureSubject                     If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).
      organization:                     # string                                  Organization name.
      commonName:                       # string                                  Common name (e.g. openshift-signing-service).
      publicKeyID:                      # string                                  If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).
  dockerImageSignatures:                # []v1.Image.dockerImageSignatures        DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.
  dockerImageManifestMediaType:         # string                                  DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.
  dockerImageConfig:                    # string                                  DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2.
tag:                                    # string                                  Tag is a string value this image can be located with inside the stream.


ImageStreamTag
==============

ImageStreamTag represents an Image that is retrieved by tag name from an ImageStream.

kind: ImageStreamTag                    # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
tag:                                    # v1.TagReference                         Tag is the spec tag associated with this image stream tag, and it may be null if only pushes have occurred to this image stream.
  name:                                 # string                                  Name of the tag
  annotations:                          # map[string]string                       Annotations associated with images using this tag
    [string]:                           # string
  from:                                 # v1.ObjectReference                      From is a reference to an image stream tag or image stream this tag should track
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    namespace:                          # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    apiVersion:                         # string                                  API version of the referent.
    resourceVersion:                    # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
    fieldPath:                          # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  reference:                            # boolean                                 Reference states if the tag will be imported. Default value is false, which means the tag will be imported.
  generation:                           # integer                                 Generation is the image stream generation that updated this tag - setting it to 0 is an indication that the generation must be updated. Legacy clients will send this as nil, which means the client doesn't know or care.
  importPolicy:                         # v1.TagImportPolicy                      Import is information that controls how images may be imported by the server.
    insecure:                           # boolean                                 Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.
    scheduled:                          # boolean                                 Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported
generation:                             # integer                                 Generation is the current generation of the tagged image - if tag is provided and this value is not equal to the tag generation, a user has requested an import that has not completed, or Conditions will be filled out indicating any error.
conditions:                             # []v1.TagEventCondition                  Conditions is an array of conditions that apply to the image stream tag.
- type:                                 # string                                  Type of tag event condition, currently only ImportSuccess
  status:                               # string                                  Status of the condition, one of True, False, Unknown.
  lastTransitionTime:                   # string                                  LastTransitionTIme is the time the condition transitioned from one status to another.
  reason:                               # string                                  Reason is a brief machine readable explanation for the condition's last transition.
  message:                              # string                                  Message is a human readable description of the details about last transition, complementing reason.
  generation:                           # integer                                 Generation is the spec tag generation that this status corresponds to
image:                                  # v1.Image                                Image associated with the ImageStream and tag.
  kind:                                 # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  apiVersion:                           # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
  metadata:                             # v1.ObjectMeta                           Standard object's metadata.
    name:                               # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    generateName:                       # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
    namespace:                          # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
    selfLink:                           # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
    uid:                                # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    resourceVersion:                    # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
    generation:                         # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
    creationTimestamp:                  # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
    deletionTimestamp:                  # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
    deletionGracePeriodSeconds:         # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
    labels:                             # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
      [string]:                         # string
    annotations:                        # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
      [string]:                         # string
    ownerReferences:                    # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
    - apiVersion:                       # string                                  API version of the referent.
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      controller:                       # boolean                                 If true, this reference points to the managing controller.
    finalizers:                         # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
    - [string]                          # 
  dockerImageReference:                 # string                                  DockerImageReference is the string that can be used to pull this image.
  dockerImageMetadata:                  # string                                  DockerImageMetadata contains metadata about this image
  dockerImageMetadataVersion:           # string                                  DockerImageMetadataVersion conveys the version of the object, which if empty defaults to "1.0"
  dockerImageManifest:                  # string                                  DockerImageManifest is the raw JSON of the manifest
  dockerImageLayers:                    # []v1.ImageLayer                         DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.
  - name:                               # string                                  Name of the layer as defined by the underlying store.
    size:                               # integer                                 Size of the layer in bytes as defined by the underlying store.
    mediaType:                          # string                                  MediaType of the referenced object.
  signatures:                           # []v1.ImageSignature                     Signatures holds all signatures of the image.
  - type:                               # string                                  Required: Describes a type of stored blob.
    content:                            # []integer                               Required: An opaque binary string which is an image's signature.
    - [integer]                         # 
    conditions:                         # []v1.SignatureCondition                 Conditions represent the latest available observations of a signature's current state.
    - type:                             # string                                  Type of job condition, Complete or Failed.
      status:                           # string                                  Status of the condition, one of True, False, Unknown.
      lastProbeTime:                    # string                                  Last time the condition was checked.
      lastTransitionTime:               # string                                  Last time the condition transit from one status to another.
      reason:                           # string                                  (brief) reason for the condition's last transition.
      message:                          # string                                  Human readable message indicating details about last transition.
    imageIdentity:                      # string                                  A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. "registry.access.redhat.com/rhel7/rhel:7.2").
    signedClaims:                       # map[string]string                       Contains claims from the signature.
      [string]:                         # string
    created:                            # string                                  If specified, it is the time of signature's creation.
    issuedBy:                           # v1.SignatureIssuer                      If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).
      organization:                     # string                                  Organization name.
      commonName:                       # string                                  Common name (e.g. openshift-signing-service).
    issuedTo:                           # v1.SignatureSubject                     If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).
      organization:                     # string                                  Organization name.
      commonName:                       # string                                  Common name (e.g. openshift-signing-service).
      publicKeyID:                      # string                                  If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).
  dockerImageSignatures:                # []v1.Image.dockerImageSignatures        DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.
  dockerImageManifestMediaType:         # string                                  DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.
  dockerImageConfig:                    # string                                  DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2.


LocalResourceAccessReview
=========================

LocalResourceAccessReview is a means to request a list of which users and groups are authorized to perform the action specified by spec in a particular namespace

kind: LocalResourceAccessReview         # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
namespace:                              # string                                  Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces
verb:                                   # string                                  Verb is one of: get, list, watch, create, update, delete
resourceAPIGroup:                       # string                                  Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined
resourceAPIVersion:                     # string                                  Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined
resource:                               # string                                  Resource is one of the existing resource types
resourceName:                           # string                                  ResourceName is the name of the resource being requested for a "get" or deleted for a "delete"
content:                                # string                                  Content is the actual content of the request for create and update


LocalSubjectAccessReview
========================

LocalSubjectAccessReview is an object for requesting information about whether a user or group can perform an action in a particular namespace

kind: LocalSubjectAccessReview          # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
namespace:                              # string                                  Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces
verb:                                   # string                                  Verb is one of: get, list, watch, create, update, delete
resourceAPIGroup:                       # string                                  Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined
resourceAPIVersion:                     # string                                  Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined
resource:                               # string                                  Resource is one of the existing resource types
resourceName:                           # string                                  ResourceName is the name of the resource being requested for a "get" or deleted for a "delete"
content:                                # string                                  Content is the actual content of the request for create and update
user:                                   # string                                  User is optional.  If both User and Groups are empty, the current authenticated user is used.
groups:                                 # []string                                Groups is optional.  Groups is the list of groups to which the User belongs.
- [string]                              # 
scopes:                                 # []string                                Scopes to use for the evaluation.  Empty means "use the unscoped (full) permissions of the user/groups". Nil for a self-SAR, means "use the scopes on this request". Nil for a regular SAR, means the same as empty.
- [string]                              # 


NetNamespace
============

NetNamespace encapsulates the inputs needed to define a unique network namespace on the cluster

kind: NetNamespace                      # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
netname:                                # string                                  NetName is the name of the network namespace
netid:                                  # integer                                 NetID is the network identifier of the network namespace assigned to each overlay network packet


OAuthAccessToken
================

OAuthAccessToken describes an OAuth access token

kind: OAuthAccessToken                  # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
clientName:                             # string                                  ClientName references the client that created this token.
expiresIn:                              # integer                                 ExpiresIn is the seconds from CreationTime before this token expires.
scopes:                                 # []string                                Scopes is an array of the requested scopes.
- [string]                              # 
redirectURI:                            # string                                  RedirectURI is the redirection associated with the token.
userName:                               # string                                  UserName is the user name associated with this token
userUID:                                # string                                  UserUID is the unique UID associated with this token
authorizeToken:                         # string                                  AuthorizeToken contains the token that authorized this token
refreshToken:                           # string                                  RefreshToken is the value by which this token can be renewed. Can be blank.


OAuthAuthorizeToken
===================

OAuthAuthorizeToken describes an OAuth authorization token

kind: OAuthAuthorizeToken               # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
clientName:                             # string                                  ClientName references the client that created this token.
expiresIn:                              # integer                                 ExpiresIn is the seconds from CreationTime before this token expires.
scopes:                                 # []string                                Scopes is an array of the requested scopes.
- [string]                              # 
redirectURI:                            # string                                  RedirectURI is the redirection associated with the token.
state:                                  # string                                  State data from request
userName:                               # string                                  UserName is the user name associated with this token
userUID:                                # string                                  UserUID is the unique UID associated with this token. UserUID and UserName must both match for this token to be valid.


OAuthClient
===========

OAuthClient describes an OAuth client

kind: OAuthClient                       # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
secret:                                 # string                                  Secret is the unique secret associated with a client
additionalSecrets:                      # []string                                AdditionalSecrets holds other secrets that may be used to identify the client.  This is useful for rotation and for service account token validation
- [string]                              # 
respondWithChallenges:                  # boolean                                 RespondWithChallenges indicates whether the client wants authentication needed responses made in the form of challenges instead of redirects
redirectURIs:                           # []string                                RedirectURIs is the valid redirection URIs associated with a client
- [string]                              # 
grantMethod:                            # string                                  GrantMethod determines how to handle grants for this client. If no method is provided, the cluster default grant handling method will be used. Valid grant handling methods are:  - auto:   always approves grant requests, useful for trusted clients  - prompt: prompts the end user for approval of grant requests, useful for third-party clients  - deny:   always denies grant requests, useful for black-listed clients
scopeRestrictions:                      # []v1.ScopeRestriction                   ScopeRestrictions describes which scopes this client can request.  Each requested scope is checked against each restriction.  If any restriction matches, then the scope is allowed. If no restriction matches, then the scope is denied.
- literals:                             # []string                                ExactValues means the scope has to match a particular set of strings exactly
  - [string]                            # 
  clusterRole:                          # v1.ClusterRoleScopeRestriction          ClusterRole describes a set of restrictions for cluster role scoping.
    roleNames:                          # []string                                RoleNames is the list of cluster roles that can referenced.  * means anything
    - [string]                          # 
    namespaces:                         # []string                                Namespaces is the list of namespaces that can be referenced.  * means any of them (including *)
    - [string]                          # 
    allowEscalation:                    # boolean                                 AllowEscalation indicates whether you can request roles and their escalating resources


OAuthClientAuthorization
========================

OAuthClientAuthorization describes an authorization created by an OAuth client

kind: OAuthClientAuthorization          # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
clientName:                             # string                                  ClientName references the client that created this authorization
userName:                               # string                                  UserName is the user name that authorized this client
userUID:                                # string                                  UserUID is the unique UID associated with this authorization. UserUID and UserName must both match for this authorization to be valid.
scopes:                                 # []string                                Scopes is an array of the granted scopes.
- [string]                              # 


ObjectReference
===============

ObjectReference contains enough information to let you inspect or modify the referred object.

kind: ObjectReference                   # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
namespace:                              # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
name:                                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
uid:                                    # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
apiVersion: v1                          # string                                  API version of the referent.
resourceVersion:                        # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
fieldPath:                              # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.


OwnerReference
==============

OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.

apiVersion: v1                          # string                                  API version of the referent.
kind: OwnerReference                    # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
name:                                   # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
uid:                                    # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
controller:                             # boolean                                 If true, this reference points to the managing controller.


Policy
======

Policy is a object that holds all the Roles for a particular namespace.  There is at most one Policy document per namespace.

kind: Policy                            # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
lastModified:                           # string                                  LastModified is the last time that any part of the Policy was created, updated, or deleted
roles:                                  # []v1.NamedRole                          Roles holds all the Roles held by this Policy, mapped by Role.Name
- name:                                 # string                                  Name is the name of the role
  role:                                 # v1.Role                                 Role is the role being named
    kind:                               # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    apiVersion:                         # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
    metadata:                           # v1.ObjectMeta                           Standard object's metadata.
      name:                             # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      generateName:                     # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
      namespace:                        # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      selfLink:                         # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
      uid:                              # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      resourceVersion:                  # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      generation:                       # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
      creationTimestamp:                # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionTimestamp:                # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionGracePeriodSeconds:       # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
      labels:                           # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
        [string]:                       # string
      annotations:                      # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
        [string]:                       # string
      ownerReferences:                  # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
      - apiVersion:                     # string                                  API version of the referent.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        controller:                     # boolean                                 If true, this reference points to the managing controller.
      finalizers:                       # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
      - [string]                        # 
    rules:                              # []v1.PolicyRule                         Rules holds all the PolicyRules for this Role
    - verbs:                            # []string                                Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
      - [string]                        # 
      attributeRestrictions:            # string                                  AttributeRestrictions will vary depending on what the Authorizer/AuthorizationAttributeBuilder pair supports. If the Authorizer does not recognize how to handle the AttributeRestrictions, the Authorizer should report an error.
      apiGroups:                        # []string                                APIGroups is the name of the APIGroup that contains the resources.  If this field is empty, then both kubernetes and origin API groups are assumed. That means that if an action is requested against one of the enumerated resources in either the kubernetes or the origin API group, the request will be allowed
      - [string]                        # 
      resources:                        # []string                                Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
      - [string]                        # 
      resourceNames:                    # []string                                ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
      - [string]                        # 
      nonResourceURLs:                  # []string                                NonResourceURLsSlice is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different.
      - [string]                        # 


PolicyBinding
=============

PolicyBinding is a object that holds all the RoleBindings for a particular namespace.  There is one PolicyBinding document per referenced Policy namespace

kind: PolicyBinding                     # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
lastModified:                           # string                                  LastModified is the last time that any part of the PolicyBinding was created, updated, or deleted
policyRef:                              # v1.ObjectReference                      PolicyRef is a reference to the Policy that contains all the Roles that this PolicyBinding's RoleBindings may reference
  kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
roleBindings:                           # []v1.NamedRoleBinding                   RoleBindings holds all the RoleBindings held by this PolicyBinding, mapped by RoleBinding.Name
- name:                                 # string                                  Name is the name of the role binding
  roleBinding:                          # v1.RoleBinding                          RoleBinding is the role binding being named
    kind:                               # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    apiVersion:                         # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
    metadata:                           # v1.ObjectMeta                           Standard object's metadata.
      name:                             # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      generateName:                     # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
      namespace:                        # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      selfLink:                         # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
      uid:                              # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      resourceVersion:                  # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      generation:                       # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
      creationTimestamp:                # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionTimestamp:                # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
      deletionGracePeriodSeconds:       # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
      labels:                           # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
        [string]:                       # string
      annotations:                      # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
        [string]:                       # string
      ownerReferences:                  # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
      - apiVersion:                     # string                                  API version of the referent.
        kind:                           # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
        name:                           # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
        uid:                            # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
        controller:                     # boolean                                 If true, this reference points to the managing controller.
      finalizers:                       # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
      - [string]                        # 
    userNames:                          # []string                                UserNames holds all the usernames directly bound to the role
    - [string]                          # 
    groupNames:                         # []string                                GroupNames holds all the groups directly bound to the role
    - [string]                          # 
    subjects:                           # []v1.ObjectReference                    Subjects hold object references to authorize with this rule
    - kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      namespace:                        # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      apiVersion:                       # string                                  API version of the referent.
      resourceVersion:                  # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      fieldPath:                        # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    roleRef:                            # v1.ObjectReference                      RoleRef can only reference the current namespace and the global namespace If the RoleRef cannot be resolved, the Authorizer must return an error. Since Policy is a singleton, this is sufficient knowledge to locate a role
      kind:                             # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
      namespace:                        # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
      name:                             # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
      uid:                              # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
      apiVersion:                       # string                                  API version of the referent.
      resourceVersion:                  # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
      fieldPath:                        # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.


Project
=======

Project is a logical top-level container for a set of origin resources

kind: Project                           # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.ProjectSpec                          Spec defines the behavior of the Namespace.
  finalizers:                           # []v1.FinalizerName                      Finalizers is an opaque list of values that must be empty to permanently remove object from storage
status:                                 # v1.ProjectStatus                        Status describes the current status of a Namespace
  phase:                                # string                                  Phase is the current lifecycle phase of the project


ProjectRequest
==============

ProjecRequest is the set of options necessary to fully qualify a project request

kind: ProjectRequest                    # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
displayName:                            # string                                  DisplayName is the display name to apply to a project
description:                            # string                                  Description is the description to apply to a project


ResourceAccessReview
====================

ResourceAccessReview is a means to request a list of which users and groups are authorized to perform the action specified by spec

kind: ResourceAccessReview              # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
namespace:                              # string                                  Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces
verb:                                   # string                                  Verb is one of: get, list, watch, create, update, delete
resourceAPIGroup:                       # string                                  Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined
resourceAPIVersion:                     # string                                  Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined
resource:                               # string                                  Resource is one of the existing resource types
resourceName:                           # string                                  ResourceName is the name of the resource being requested for a "get" or deleted for a "delete"
content:                                # string                                  Content is the actual content of the request for create and update


Role
====

Role is a logical grouping of PolicyRules that can be referenced as a unit by RoleBindings.

kind: Role                              # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
rules:                                  # []v1.PolicyRule                         Rules holds all the PolicyRules for this Role
- verbs:                                # []string                                Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
  - [string]                            # 
  attributeRestrictions:                # string                                  AttributeRestrictions will vary depending on what the Authorizer/AuthorizationAttributeBuilder pair supports. If the Authorizer does not recognize how to handle the AttributeRestrictions, the Authorizer should report an error.
  apiGroups:                            # []string                                APIGroups is the name of the APIGroup that contains the resources.  If this field is empty, then both kubernetes and origin API groups are assumed. That means that if an action is requested against one of the enumerated resources in either the kubernetes or the origin API group, the request will be allowed
  - [string]                            # 
  resources:                            # []string                                Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
  - [string]                            # 
  resourceNames:                        # []string                                ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
  - [string]                            # 
  nonResourceURLs:                      # []string                                NonResourceURLsSlice is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different.
  - [string]                            # 


RoleBinding
===========

RoleBinding references a Role, but not contain it.  It can reference any Role in the same namespace or in the global namespace. It adds who information via Users and Groups and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace (excepting the master namespace which has power in all namespaces).

kind: RoleBinding                       # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
userNames:                              # []string                                UserNames holds all the usernames directly bound to the role
- [string]                              # 
groupNames:                             # []string                                GroupNames holds all the groups directly bound to the role
- [string]                              # 
subjects:                               # []v1.ObjectReference                    Subjects hold object references to authorize with this rule
- kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
roleRef:                                # v1.ObjectReference                      RoleRef can only reference the current namespace and the global namespace If the RoleRef cannot be resolved, the Authorizer must return an error. Since Policy is a singleton, this is sufficient knowledge to locate a role
  kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.


Route
=====

Route encapsulates the inputs needed to connect an alias to endpoints.

kind: Route                             # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1.RouteSpec                            Spec is the desired state of the route
  host:                                 # string                                  Host is an alias/DNS that points to the service. Optional Must follow DNS952 subdomain conventions.
  path:                                 # string                                  Path that the router watches for, to route traffic for to the service. Optional
  to:                                   # v1.RouteTargetReference                 To is an object the route points to. Only the Service kind is allowed, and it will be defaulted to Service.
    kind:                               # string                                  The kind of target that the route is referring to. Currently, only 'Service' is allowed
    name:                               # string                                  Name of the service/target that is being referred to. e.g. name of the service
    weight:                             # integer                                 Weight as an integer between 1 and 256 that specifies the target's relative weight against other target reference objects
  alternateBackends:                    # []v1.RouteTargetReference               AlternateBackends is an extension of the 'to' field. If more than one service needs to be pointed to, then use this field. Use the weight field in RouteTargetReference object to specify relative preference
  - kind:                               # string                                  The kind of target that the route is referring to. Currently, only 'Service' is allowed
    name:                               # string                                  Name of the service/target that is being referred to. e.g. name of the service
    weight:                             # integer                                 Weight as an integer between 1 and 256 that specifies the target's relative weight against other target reference objects
  port:                                 # v1.RoutePort                            If specified, the port to be used by the router. Most routers will use all endpoints exposed by the service by default - set this value to instruct routers which port to use.
    targetPort:                         # string                                  The target port on pods selected by the service this route points to. If this is a string, it will be looked up as a named port in the target endpoints port list. Required
  tls:                                  # v1.TLSConfig                            TLS provides the ability to configure certificates and termination for the route
    termination:                        # string                                  Termination indicates termination type.
    certificate:                        # string                                  Certificate provides certificate contents
    key:                                # string                                  Key provides key file contents
    caCertificate:                      # string                                  CACertificate provides the cert authority certificate contents
    destinationCACertificate:           # string                                  DestinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection
    insecureEdgeTerminationPolicy:      # string                                  InsecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to an edge-terminated route:   disable, allow or redirect
status:                                 # v1.RouteStatus                          Status is the current state of the route
  ingress:                              # []v1.RouteIngress                       Ingress describes the places where the route may be exposed. The list of ingress points may contain duplicate Host or RouterName values. Routes are considered live once they are `Ready`
  - host:                               # string                                  Host is the host string under which the route is exposed; this value is required
    routerName:                         # string                                  Name is a name chosen by the router to identify itself; this value is required
    conditions:                         # []v1.RouteIngressCondition              Conditions is the state of the route, may be empty.
    - type:                             # string                                  Type is the type of the condition. Currently only Ready.
      status:                           # string                                  Status is the status of the condition. Can be True, False, Unknown.
      reason:                           # string                                  (brief) reason for the condition's last transition, and is usually a machine and human readable constant
      message:                          # string                                  Human readable message indicating details about last transition.
      lastTransitionTime:               # string                                  RFC 3339 date and time when this condition last transitioned


RouteTargetReference
====================

RouteTargetReference specifies the target that resolve into endpoints. Only the 'Service' kind is allowed. Use 'weight' field to emphasize one over others.

kind: RouteTargetReference              # string                                  The kind of target that the route is referring to. Currently, only 'Service' is allowed
name:                                   # string                                  Name of the service/target that is being referred to. e.g. name of the service
weight:                                 # integer                                 Weight as an integer between 1 and 256 that specifies the target's relative weight against other target reference objects


Secret
======

Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.

kind: Secret                            # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
data:                                   # map[string]string                       Data contains the secret data. Each key must be a valid DNS_SUBDOMAIN or leading dot followed by valid DNS_SUBDOMAIN. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
  [string]:                             # string
type:                                   # string                                  Used to facilitate programmatic handling of secret data.


SelfSubjectRulesReview
======================

SelfSubjectRulesReview is a resource you can create to determine which actions you can perform in a namespace

kind: SelfSubjectRulesReview            # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
spec:                                   # v1.SelfSubjectRulesReviewSpec           Spec adds information about how to conduct the check
  scopes:                               # []string                                Scopes to use for the evaluation.  Empty means "use the unscoped (full) permissions of the user/groups". Nil means "use the scopes on this request".
  - [string]                            # 
status:                                 # v1.SubjectRulesReviewStatus             Status is completed by the server to tell which permissions you have
  rules:                                # []v1.PolicyRule                         Rules is the list of rules (no particular sort) that are allowed for the subject
  - verbs:                              # []string                                Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
    - [string]                          # 
    attributeRestrictions:              # string                                  AttributeRestrictions will vary depending on what the Authorizer/AuthorizationAttributeBuilder pair supports. If the Authorizer does not recognize how to handle the AttributeRestrictions, the Authorizer should report an error.
    apiGroups:                          # []string                                APIGroups is the name of the APIGroup that contains the resources.  If this field is empty, then both kubernetes and origin API groups are assumed. That means that if an action is requested against one of the enumerated resources in either the kubernetes or the origin API group, the request will be allowed
    - [string]                          # 
    resources:                          # []string                                Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
    - [string]                          # 
    resourceNames:                      # []string                                ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
    - [string]                          # 
    nonResourceURLs:                    # []string                                NonResourceURLsSlice is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different.
    - [string]                          # 
  evaluationError:                      # string                                  EvaluationError can appear in combination with Rules.  It means some error happened during evaluation that may have prevented additional rules from being populated.


SubjectAccessReview
===================

SubjectAccessReview is an object for requesting information about whether a user or group can perform an action

kind: SubjectAccessReview               # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
namespace:                              # string                                  Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces
verb:                                   # string                                  Verb is one of: get, list, watch, create, update, delete
resourceAPIGroup:                       # string                                  Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined
resourceAPIVersion:                     # string                                  Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined
resource:                               # string                                  Resource is one of the existing resource types
resourceName:                           # string                                  ResourceName is the name of the resource being requested for a "get" or deleted for a "delete"
content:                                # string                                  Content is the actual content of the request for create and update
user:                                   # string                                  User is optional. If both User and Groups are empty, the current authenticated user is used.
groups:                                 # []string                                GroupsSlice is optional. Groups is the list of groups to which the User belongs.
- [string]                              # 
scopes:                                 # []string                                Scopes to use for the evaluation.  Empty means "use the unscoped (full) permissions of the user/groups". Nil for a self-SAR, means "use the scopes on this request". Nil for a regular SAR, means the same as empty.
- [string]                              # 


Template
========

Template contains the inputs needed to produce a Config.

kind: Template                          # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
message:                                # string                                  message is an optional instructional message that will be displayed when this template is instantiated. This field should inform the user how to utilize the newly created resources. Parameter substitution will be performed on the message before being displayed so that generated credentials and other parameters can be included in the output.
objects:                                # []runtime.RawExtension                  objects is an array of resources to include in this template.
parameters:                             # []v1.Parameter                          parameters is an optional array of Parameters used during the Template to Config transformation.
- name:                                 # string                                  Name must be set and it can be referenced in Template Items using ${PARAMETER_NAME}. Required.
  displayName:                          # string                                  Optional: The name that will show in UI instead of parameter 'Name'
  description:                          # string                                  Description of a parameter. Optional.
  value:                                # string                                  Value holds the Parameter data. If specified, the generator will be ignored. The value replaces all occurrences of the Parameter ${Name} expression during the Template to Config transformation. Optional.
  generate:                             # string                                  generate specifies the generator to be used to generate random string from an input value specified by From field. The result string is stored into Value field. If empty, no generator is being used, leaving the result Value untouched. Optional. The only supported generator is "expression", which accepts a "from" value in the form of a simple regular expression containing the range expression "[a-zA-Z0-9]", and the length expression "a{length}". Examples: from             | value
  from:                                 # string                                  From is an input value for the generator. Optional.
  required:                             # boolean                                 Optional: Indicates the parameter must have a value.  Defaults to false.
labels:                                 # map[string]string                       labels is a optional set of labels that are applied to every object during the Template to Config transformation.
  [string]:                             # string


User
====

User describes someone that makes requests to the API

kind: User                              # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
fullName:                               # string                                  FullName is the full name of user
identities:                             # []string                                Identities are the identities associated with this user
- [string]                              # 
groups:                                 # []string                                Groups are the groups that this user is a member of
- [string]                              # 


UserIdentityMapping
===================

UserIdentityMapping maps a user to an identity

kind: UserIdentityMapping               # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1                          # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object's metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
identity:                               # v1.ObjectReference                      Identity is a reference to an identity
  kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
user:                                   # v1.ObjectReference                      User is a reference to a user
  kind:                                 # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  namespace:                            # string                                  Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  name:                                 # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  uid:                                  # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  apiVersion:                           # string                                  API version of the referent.
  resourceVersion:                      # string                                  Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  fieldPath:                            # string                                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.


Scale
=====

represents a scaling request for a resource.

kind: Scale                             # string                                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
apiVersion: v1beta1                     # string                                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
metadata:                               # v1.ObjectMeta                           Standard object metadata; More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata.
  name:                                 # string                                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  generateName:                         # string                                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#idempotency
  namespace:                            # string                                  Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  selfLink:                             # string                                  SelfLink is a URL representing this object. Populated by the system. Read-only.
  uid:                                  # string                                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  resourceVersion:                      # string                                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  generation:                           # integer                                 A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
  creationTimestamp:                    # string                                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionTimestamp:                    # string                                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  deletionGracePeriodSeconds:           # integer                                 Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
  labels:                               # map[string]string                       Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md
    [string]:                           # string
  annotations:                          # map[string]string                       Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/release-1.3/docs/user-guide/annotations.md
    [string]:                           # string
  ownerReferences:                      # []v1.OwnerReference                     List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
  - apiVersion:                         # string                                  API version of the referent.
    kind:                               # string                                  Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
    name:                               # string                                  Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
    uid:                                # string                                  UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
    controller:                         # boolean                                 If true, this reference points to the managing controller.
  finalizers:                           # []string                                Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
  - [string]                            # 
spec:                                   # v1beta1.ScaleSpec                       defines the behavior of the scale. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status.
  replicas:                             # integer                                 desired number of instances for the scaled object.
status:                                 # v1beta1.ScaleStatus                     current status of the scale. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#spec-and-status. Read-only.
  replicas:                             # integer                                 actual number of observed instances of the scaled object.
  selector:                             # map[string]string                       label query over pods that should match the replicas count. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md#label-selectors
    [string]:                           # string
  targetSelector:                       # string                                  label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/labels.md#label-selectors


